export const DEBUG_CURRENT_PROMPT = [
  {
    "type": "systemPrompt",
    "systemPrompt": "## Who are you?\n\nYou are GenAIcode, a code generation assistant tasked with helping me implement my ideas into my application's source code.\nYou should parse my application source code and then suggest changes using appropriate tools.\nPlease limit any changes to the root directory of my application, which is `/Users/gtanczyk/src/genaicode`.\n\n## Important Guidelines\n\n- **Use Absolute Paths**: Always use absolute file paths exactly as provided.\n- **Return Working Code**: Aim to return fully functional code.\n- **Avoid Incomplete Code Snippets**: Do not include commented-out fragments like `// ... (keep other existing functions)`.\n- **Handle Large Files Appropriately**: For large files, prefer to use the `patchFile` function, otherwise use `updateFile` for small files.\n- **Suggest File Splitting When Relevant**: Suggest splitting large files if it improves maintainability.\n- **Verify Permissions**: Ensure you have the necessary permissions before proceeding.\n- **Error Handling**: If instructions are unclear, consider failing the task with an explanation.\n- **Produce Necessary Code Only**: Do not generate unnecessary code.\n- **Request Context When Needed**: Ask for sufficient context paths in the code generation summary.\n- **Perform Dependency Analysis**: Always analyze the task thoroughly to identify all files that need to be updated, including dependencies and related modules.\n- **Comprehensive File Updates**: Ensure that all relevant files are included in the `fileUpdates` list when proposing changes.\n- **Perform Thorough Analysis**: Before generating code, always perform a comprehensive analysis of the task, identifying all affected files and dependencies.\n- **Communicate Planned Changes**: Summarize the planned changes and list all files to be updated. Seek user confirmation before proceeding.\n- **Consider Dependencies**: Include any dependent files that might require updates to ensure the codebase remains consistent.\n- **Avoid Unnecessary Permission Requests**: Do not request permissions that you already have.\n\n## Your permissions\n\n- You are allowed to modify files.\n- You are allowed to create new files.\n- You are allowed to delete files; in such cases, add an empty string as content.\n- You are allowed to create new directories.\n- You are allowed to move files.\n- Do not analyze image assets.\n- You are not allowed to generate images.\n## Asking Questions And Conversing\nYou have the ability to have a conversation with me to clarify requirements, seek permissions, or request additional context.\nUse this feature wisely to gather crucial information that would help you better understand the task or provide more accurate code generation.\nWhen the user prompt implies a complex, multi-step interaction requiring planning, clarification, or multiple steps, use `conversationGraph` to define a structured conversation flow.\n\nTo have conversation with me use the `askQuestion` function. This function allows you to:\n\n- **Express Your Thoughts**: Inform me about your considerations or concerns regarding the task.\n- **Share Analysis**: Provide insights or analysis based on the task requirements.\n- **Seek Clarification**: Ask questions or provide suggestions to ensure you fully understand the requirements.\n- **Request File Access**: If certain files are important but haven't been provided, request access to their content.\n- **Request Permissions**: If you need permissions for operations that were initially restricted, you may request them.\n- **Generate an image**: If you want to express your thoughts through an image, you can request image generation.\n- **Perform Code Generation**: Once you have all the necessary information, you can propose code changes.\n- **Update Files**: If you need to make small changes to a file, you can request to update it.\n- **Lint Code**: If you want to check the code for errors, you can request linting\n- **Use Context Compression**: Autonomously initiate context compression when the conversation history becomes large or complex, or the topic of conversation changes. Always inform the user before compressing and explain the benefits.\n- **Handle Conversation Summaries**: When you encounter a message starting with \"This is summary of our conversation:\", treat it as a compressed context representing key points and decisions from previous conversation. Use this summary as a foundation for understanding the conversation's history, technical decisions made, and current implementation status. The summary maintains the most important aspects of the conversation while reducing token usage.\n\nAlso additional actions can be added by plugins, and their names will be prefixed with `plugin:`.\n\n### How askQuestion process works\n\n1. You receive a conversation history\n2. You call the `askQuestion` function, which **MUST** include a `decisionMakingProcess` parameter. This parameter **requires a strictly structured format** as defined in the function definition, including numbered sections: Contextual Analysis, Options Evaluation, Decision Justification, Minimal Action Selection, and Evaluation of Action Choice.  **Pay close attention to the format of the `Options Evaluation` section, which requires reasoning for each possible action type.**\n3. You receive conversation history with the askQuestion function call added.\n4. You can call the action handler based on the action type.\n5. User will receive the response from the action handler.\n\nExample use cases of action types:\n\n- Have a conversation with the user, provide direct answers to questions, share immediate observations **based on direct inspection**, provide feedback etc. -> **sendMessage**\n- Need access to some files contents, which exist in the project, but content was not provided for them (have only summary, content is null) -> **requestFilesContent**\n- Need to access the *content* of a specific configuration file outside the project, like `/etc/hosts` or a specific log file -> **readExternalFiles**\n- Need to get a *list of files* in an external directory like `/var/log` to understand available log files before reading their content, or to find files based on certain criteria within a directory -> **exploreExternalDirectories**\n- Small change in one file that exists already is needed, and conversation should continue -> **updateFile**\n- You want to create one new file during the conversation, and then continue the conversation -> **createFile**\n- The conclusion of the conversation is to perform an implementation -> **confirmCodeGeneration**\n- Considering an action, but missing permission to perform it -> **requestPermissions**\n- Analyze a non trivial problem, do it internally, which involves a specific process or computation, and respond with the specific results or findings of that analysis to the user -> **performAnalysis**\n- Simple visual analysis of an image, which is already present in the context -> **sendMessage**\n- Need to reduce size of the context, and content of some files is not needed anymore -> **removeFilesFromContext**\n- Need to reorganize the context of the conversation, or reduce its size -> **contextOptimization**\n- Generate an image -> **generateImage**\n- Search for a keyword/phrase over the codebase of the project -> **searchCode**\n- Need to perform a linting of the code -> **lint**\n- End the conversation -> **endConversation**\n- The user needs help with GenAIcode itself, encountered a problem, or needs guidance -> **genaicodeHelp**\n- Perform inference on a AI model with reasoning capabilities -> **reasoningInference**\n- Complex, multi-step conversations that require **planning** and structured flow, wnen implementing complex features or handling tasks that involve multiple decisions and steps -> **conversationGraph**\n- Need to execute multiple distinct file operations (create, update, delete, move) or image manipulations as a batch, based on a user request that implies multiple simple, predefined actions -> **compoundAction**\n- Need to access Git information such as commit history, file changes, or blame data to understand code evolution or authorship -> **requestGitContext**\n\n### Efficient File Content Requests\n\nYou can request the content of legitimate files within the project without interrupting the user. This allows you to gather more context when needed.\n\n- **Judicious Use**: Only request files directly relevant to the task.\n- **Relevance**: Consider if the file content is truly necessary.\n- **Large Files**: Be cautious when requesting large files.\n- **Dependencies**: Trace through file dependencies when necessary.\n- **Privacy and Security**: Be mindful of sensitive information.\n- **Iterative Requests**: Anticipate your needs to minimize the number of requests.\n\n# Typical Conversation Flow \n\nIt is ** VERY IMPORTANT ** to follow the conversation flow to ensure a smooth and efficient code generation process. Here is a typical conversation flow:\n\n1. I provide you with source code and context.\n2. Then I tell you what I want to achieve, either in detail or sometimes very briefly.\n3. We do a conversation, until we reach a point where you have all the information you need, and we either continue to next step or stop the conversation.\n   Sometimes you may want to make a small change to one file and continue the conversation.\n4. You propose to start code generation (actionType: confirmCodeGeneration)\n5. I confirm that you can proceed (or reject and we go back to step 3)\n6. You generate the code changes summary\n7. Then you generate code change for each file\n8. I apply code changes, and the conversation ends.\n\n## Conversation Flow Best Practices\n\n- If the user wants to stop the conversation, you should respect that and stop the conversation (instead of using sendMessage prefer to use endConversation).\n- If you want to make small one file change, and continue the conversation, you can do that using actionType=updateFile. This makes sense if the change is small and does not require extensive planning.\n- If you are missing context or have uncertainties, ask for clarification before proposing code changes.\n- Every assistant message must contain meaningful content, whether it's a summary, clarifying question, or proposed code snippet.\n- Complete the conversation and fully understand the user's request before starting code generation.\n- Always provide tangible analysis, results, or insights when stating that it is performing analysis.\n- Provide meaningful responses or explanations instead of generic placeholders like \"I will do something. Please wait a moment\".\n- Request all necessary permissions and information before starting code generation.\n- When responding with `genaicodeHelp` action type, assume that the final answer will be generated by subsequent `genaicodeHelp` function call. So you should not try to provide the final answer in the first response, and also you should not ask for more information or ask other questions in the first response.\n- When writing content of `message` parameter in the `askQuestion` function, always direct it to the user, not to the assistant. For example, instead of \"User is asking for...\", use \"You are asking for...\".\n- Try to tell the user what is going to happen next, what they should expect, and what they should do next. For example, \"I will now generate the code changes summary. Please confirm if you are ready to proceed.\".\n- Do not refer to `actionType` parameter name or values in the message content. For example, instead of \"I will now generate the code changes summary. Please confirm if you are ready to proceed with actionType: confirmCodeGeneration.\", use \"I will now generate the code changes summary. Please confirm if you are ready to proceed.\". \n- **IMPORTANT: Always check if a file exists before using createFile.** Before suggesting the createFile action, carefully examine the source code context to verify the file doesn't already exist. If a file already exists with the same path, use sendMessage to inform the user instead.\n- When using `reasoningInference` action type to perform reasoning inference, in first step tell the user what you are going to do, and in the second step provide the results of the reasoning inference.\n- When calling `reasoningInference` function, always provide a detailed prompt that includes the problem statement, context, constraints, assumptions, and solution. This will help the reasoning model to provide more accurate predictions. REMEMBER: The reasoning model will only consider the prompt and will not have access to any other context, so if you think something is important, include its full content in the context items.\n- Distinguish `compoundAction` from `confirmCodeGeneration`: Use `compoundAction` for batching multiple *simple, predefined manipulations* specified by the user. Use `confirmCodeGeneration` for implementing features or complex changes requiring analysis and potentially complex logic generation.\n\n## GenAIcode configuration\n\nGenAIcode can be configured by using the `.genaicoderc` file in the root directory of the project. Available options are documented in the `.genaicoderc.schema.json` file.\n\n# ADDITIONAL INSTRUCTIONS\n\nGenAIcode is an AI-powered code generation and management tool designed to streamline software development. It leverages various AI services (Vertex AI, AI Studio, OpenAI, Anthropic) to generate, modify, and analyze code. The project features a modular architecture with components for AI services, CLI operations, file handling, and image processing. It supports interactive and UI modes, allowing developers to execute code generation tasks, manage prompts, and visualize outputs. GenAIcode offers customizable options for code generation, including file operations, context optimization, and temperature settings. The tool aims to enhance developer productivity by automating repetitive coding tasks and providing AI-assisted code improvements.\nWhen making changes to the codebase, it is important to follow the project's coding standards and conventions. This includes adhering to the linting rules, maintaining consistent formatting, and writing clear and concise code. It is also recommended to document the changes made, including the purpose of the modifications, any dependencies added or removed, and any potential impact on the project. By following these guidelines, developers can ensure that the codebase remains clean, readable, and maintainable."
  },
  {
    "type": "user",
    "text": "Hello, GenAIcode!"
  },
  {
    "type": "assistant",
    "text": "Hello there! I guess you have a task for me today. Before we start, could you please provide me with: \n      - the current source code of your application\n      - the image assets (if available)\n      - and conversational history (if available)\n      \n      Thanks",
    "functionCalls": [
      {
        "name": "getSourceCode"
      },
      {
        "name": "readHistory"
      }
    ]
  },
  {
    "type": "user",
    "functionResponses": [
      {
        "name": "getSourceCode",
        "content": "{\"/Users/gtanczyk/src/genaicode/.eslintrc.cjs\":{\"fileId\":\"000001\",\"content\":\"module.exports = {\\n  root: true,\\n  env: { node: true },\\n  extends: ['eslint:recommended', 'plugin:@typescript-eslint/recommended'],\\n  ignorePatterns: ['build', '.eslintrc.cjs', 'examples/**/*', 'dist'],\\n  parser: '@typescript-eslint/parser',\\n};\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/.eslintrc.cjs\",\"type\":\"local\",\"fileId\":\"000001\"}]},\"/Users/gtanczyk/src/genaicode/README.md\":{\"fileId\":\"000003\",\"content\":null},\"/Users/gtanczyk/src/genaicode/bin/genaicode-dev.js\":{\"fileId\":\"000004\",\"content\":null},\"/Users/gtanczyk/src/genaicode/bin/genaicode.cjs\":{\"fileId\":\"000005\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/design/configuration.md\":{\"fileId\":\"000006\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/design/context_optimization_feature.md\":{\"fileId\":\"000007\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/design/external_project_exploration.md\":{\"fileId\":\"000008\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/design/feature-implementation-status.md\":{\"fileId\":\"000009\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/design/features.md\":{\"fileId\":\"000010\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/design/file_operations.md\":{\"fileId\":\"000011\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/design/genaicode_design_doc.md\":{\"fileId\":\"000012\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/design/overview.md\":{\"fileId\":\"000013\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/design/token_usage_reduction.md\":{\"fileId\":\"000014\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/advanced_llm_prompt.md\":{\"fileId\":\"000015\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/ai_token_usage.md\":{\"fileId\":\"000016\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/allow_directory_create.md\":{\"fileId\":\"000017\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/app_context_feature.md\":{\"fileId\":\"000018\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/codegen_design_doc.md\":{\"fileId\":\"000019\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/configurable_extensions.md\":{\"fileId\":\"000020\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/content_mask.md\":{\"fileId\":\"000021\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/context_compression.md\":{\"fileId\":\"000022\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/context_shrinking.md\":{\"fileId\":\"000023\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/current_feedback.md\":{\"fileId\":\"000024\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/docker_containers.md\":{\"fileId\":\"000025\",\"summary\":\"Design doc for Docker execution with Lite Summarizer.\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/dynamic_scenario_selection.md\":{\"fileId\":\"000026\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/interactive_cli.md\":{\"fileId\":\"000027\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/lint_step.md\":{\"fileId\":\"000028\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/multimodal_frontend.md\":{\"fileId\":\"000029\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/new_config_options.md\":{\"fileId\":\"000030\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/project_structure_refactor.md\":{\"fileId\":\"000031\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/step_ask_question_refactor.md\":{\"fileId\":\"000032\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/usage_monitoring.md\":{\"fileId\":\"000033\",\"content\":null},\"/Users/gtanczyk/src/genaicode/docs/tasks/web_ui.md\":{\"fileId\":\"000034\",\"content\":null},\"/Users/gtanczyk/src/genaicode/e2e-tests/circular-dependencies.test.ts\":{\"fileId\":\"000035\",\"content\":null},\"/Users/gtanczyk/src/genaicode/e2e-tests/genaicode-ui.test.ts\":{\"fileId\":\"000036\",\"content\":null},\"/Users/gtanczyk/src/genaicode/e2e-tests/project-profiles-test-utils.ts\":{\"fileId\":\"000037\",\"content\":null},\"/Users/gtanczyk/src/genaicode/e2e-tests/project-profiles.test.ts\":{\"fileId\":\"000038\",\"content\":null},\"/Users/gtanczyk/src/genaicode/e2e-tests/vite-genaicode.test.ts\":{\"fileId\":\"000039\",\"content\":null},\"/Users/gtanczyk/src/genaicode/examples/README.md\":{\"fileId\":\"000040\",\"content\":null},\"/Users/gtanczyk/src/genaicode/examples/genaicode_plugins/deepseek_ai_service.ts\":{\"fileId\":\"000041\",\"content\":null},\"/Users/gtanczyk/src/genaicode/examples/genaicode_plugins/fake_ai_service.ts\":{\"fileId\":\"000042\",\"content\":null},\"/Users/gtanczyk/src/genaicode/examples/genaicode_plugins/genaicode_tracker.ts\":{\"fileId\":\"000043\",\"content\":null},\"/Users/gtanczyk/src/genaicode/examples/genaicode_plugins/grok_ai_service.ts\":{\"fileId\":\"000044\",\"content\":null},\"/Users/gtanczyk/src/genaicode/examples/genaicode_plugins/nonsense_action_handler.ts\":{\"fileId\":\"000045\",\"content\":null},\"/Users/gtanczyk/src/genaicode/examples/genaicode_plugins/nonsense_operation.ts\":{\"fileId\":\"000046\",\"content\":null},\"/Users/gtanczyk/src/genaicode/examples/genaicode_plugins/vitest_runner.ts\":{\"fileId\":\"000047\",\"content\":null},\"/Users/gtanczyk/src/genaicode/examples/vite_genaicode_example/index.html\":{\"fileId\":\"000048\",\"content\":null},\"/Users/gtanczyk/src/genaicode/examples/vite_genaicode_example/index.ts\":{\"fileId\":\"000049\",\"content\":null},\"/Users/gtanczyk/src/genaicode/examples/vite_genaicode_example/vite.config.ts\":{\"fileId\":\"000050\",\"content\":null},\"/Users/gtanczyk/src/genaicode/knip.json\":{\"fileId\":\"000051\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/ai-studio.ts\":{\"fileId\":\"000053\",\"summary\":\"Google AI Studio\",\"dependencies\":[{\"path\":\"@google/genai\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"node:assert\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/common.ts\",\"type\":\"local\",\"fileId\":\"000056\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/common-types.ts\",\"type\":\"local\",\"fileId\":\"000054\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/common/abort-controller.ts\",\"type\":\"local\",\"fileId\":\"000120\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/unescape-function-call.ts\",\"type\":\"local\",\"fileId\":\"000063\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/cli/cli-params.ts\",\"type\":\"local\",\"fileId\":\"000070\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/service-configurations.ts\",\"type\":\"local\",\"fileId\":\"000061\"}],\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/anthropic.ts\":{\"fileId\":\"000054\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/common-types.ts\":{\"fileId\":\"000055\",\"summary\":\"AI service common types\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/common.test.ts\":{\"fileId\":\"000056\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/common.ts\":{\"fileId\":\"000057\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/dall-e.ts\":{\"fileId\":\"000058\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/local-llm.ts\":{\"fileId\":\"000059\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/openai.ts\":{\"fileId\":\"000060\",\"summary\":\"Generates content using OpenAI models. Supports text, function calls, images, and reasoning.\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/common-types.ts\",\"type\":\"local\",\"fileId\":\"000054\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/common.ts\",\"type\":\"local\",\"fileId\":\"000056\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/service-configurations.ts\",\"type\":\"local\",\"fileId\":\"000061\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/common/abort-controller.ts\",\"type\":\"local\",\"fileId\":\"000120\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/common-types.ts\",\"type\":\"local\",\"fileId\":\"000054\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/common.ts\",\"type\":\"local\",\"fileId\":\"000056\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/service-configurations.ts\",\"type\":\"local\",\"fileId\":\"000061\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/common/abort-controller.ts\",\"type\":\"local\",\"fileId\":\"000120\"}],\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/service-configurations-types.ts\":{\"fileId\":\"000061\",\"summary\":\"Defines types for AI service configurations, including model overrides, service-specific requirements, and plugin service types.\",\"dependencies\":[{\"path\":\"src/main/config-types\",\"type\":\"local\",\"fileId\":\"\"},{\"path\":\"src/main/plugin-loader\",\"type\":\"local\",\"fileId\":\"\"},{\"path\":\"src/main/ui/common/api-types\",\"type\":\"local\",\"fileId\":\"\"}],\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/service-configurations.ts\":{\"fileId\":\"000062\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/unescape-function-call.test.ts\":{\"fileId\":\"000063\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/unescape-function-call.ts\":{\"fileId\":\"000064\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/vertex-ai-claude.ts\":{\"fileId\":\"000065\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/vertex-ai-imagen.ts\":{\"fileId\":\"000066\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/ai-service/vertex-ai.ts\":{\"fileId\":\"000067\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/cli/cli-options.test.ts\":{\"fileId\":\"000068\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/cli/cli-options.ts\":{\"fileId\":\"000069\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/cli/cli-params.test.ts\":{\"fileId\":\"000070\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/cli/cli-params.ts\":{\"fileId\":\"000071\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/cli/service-autodetect.test.ts\":{\"fileId\":\"000072\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/cli/service-autodetect.ts\":{\"fileId\":\"000073\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/cli/validate-cli-params.test.ts\":{\"fileId\":\"000074\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/cli/validate-cli-params.ts\":{\"fileId\":\"000075\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/ask-question.test.ts\":{\"fileId\":\"000076\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/code-generation.test.ts\":{\"fileId\":\"000077\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/codegen-summary.test.ts\":{\"fileId\":\"000078\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/compound-action.test.ts\":{\"fileId\":\"000079\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/context-compression.test.ts\":{\"fileId\":\"000080\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/context-optimization.test.ts\":{\"fileId\":\"000081\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/conversation-graph.test.ts\":{\"fileId\":\"000082\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/conversation-summary.test.ts\":{\"fileId\":\"000083\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/explore-external-directories.test.ts\":{\"fileId\":\"000084\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/external-project-exploration.test.ts\":{\"fileId\":\"000085\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/reasoning-inference.test.ts\":{\"fileId\":\"000086\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/request-git-context.test.ts\":{\"fileId\":\"000087\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/summarization.test.ts\":{\"fileId\":\"000088\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/test-utils/file-updates-verify.ts\":{\"fileId\":\"000089\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/test-utils/generate-content-retry.ts\":{\"fileId\":\"000090\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/eval/test-utils/llm-content-validate.ts\":{\"fileId\":\"000091\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/cache-file.ts\":{\"fileId\":\"000092\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/file-id-utils.ts\":{\"fileId\":\"000093\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/file-utils.test.ts\":{\"fileId\":\"000094\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/file-utils.ts\":{\"fileId\":\"000095\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/find-files.ts\":{\"fileId\":\"000096\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/path-utils.ts\":{\"fileId\":\"000097\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/read-files.test.ts\":{\"fileId\":\"000098\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/read-files.ts\":{\"fileId\":\"000099\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/search-files.ts\":{\"fileId\":\"000100\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/source-code-types.ts\":{\"fileId\":\"000101\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/source-code-utils.test.ts\":{\"fileId\":\"000102\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/source-code-utils.ts\":{\"fileId\":\"000103\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/summary-cache.ts\":{\"fileId\":\"000104\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/temp-buffer.ts\":{\"fileId\":\"000105\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/files/update-files.ts\":{\"fileId\":\"000106\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/help-docs/genaicode-help-document.ts\":{\"fileId\":\"000107\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/images/ensure-alpha.ts\":{\"fileId\":\"000108\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/images/imgly-remove-background.ts\":{\"fileId\":\"000109\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/images/resize-image.ts\":{\"fileId\":\"000110\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/images/split-image.ts\":{\"fileId\":\"000111\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/index.ts\":{\"fileId\":\"000112\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/codegen-non-interactive.ts\":{\"fileId\":\"000113\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/codegen-types.ts\":{\"fileId\":\"000114\",\"summary\":\"Defines types for codegen, file updates, plugins.\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/common-types.ts\",\"type\":\"local\",\"fileId\":\"000054\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/service-configurations-types.ts\",\"type\":\"local\",\"fileId\":\"000060\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/step-ask-question-handlers.ts\",\"type\":\"local\",\"fileId\":\"000326\"}],\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/codegen-utils.ts\":{\"fileId\":\"000115\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/codegen.ai-services.test.ts\":{\"fileId\":\"000116\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/codegen.cli-options.test.ts\":{\"fileId\":\"000117\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/codegen.image-generation.test.ts\":{\"fileId\":\"000118\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/codegen.test-utils.ts\":{\"fileId\":\"000119\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/codegen.ts\":{\"fileId\":\"000120\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/common/abort-controller.ts\":{\"fileId\":\"000121\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/common/app-context-bus.ts\":{\"fileId\":\"000122\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/common/content-bus-types.ts\":{\"fileId\":\"000123\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/common/content-bus.ts\":{\"fileId\":\"000124\",\"summary\":\"Manages content flow, messages\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/common/content-bus.ts\",\"type\":\"local\",\"fileId\":\"000117\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/common/content-bus.ts\",\"type\":\"local\",\"fileId\":\"000117\"}],\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/common/cost-collector.ts\":{\"fileId\":\"000125\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/common/user-actions.ts\":{\"fileId\":\"000126\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/config-lib.test.ts\":{\"fileId\":\"000127\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/config-lib.ts\":{\"fileId\":\"000128\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/interactive/codegen-interactive.test.ts\":{\"fileId\":\"000132\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/interactive/codegen-interactive.ts\":{\"fileId\":\"000133\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/interactive/codegen-worker.ts\":{\"fileId\":\"000134\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/interactive/common.ts\":{\"fileId\":\"000135\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/interactive/configure.ts\":{\"fileId\":\"000136\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/interactive/error-handling.ts\":{\"fileId\":\"000137\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/interactive/help.ts\":{\"fileId\":\"000138\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/interactive/select-ai-service.ts\":{\"fileId\":\"000139\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/interactive/task-file.ts\":{\"fileId\":\"000140\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/interactive/text-prompt.ts\":{\"fileId\":\"000141\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/interactive/user-action-handlers.ts\":{\"fileId\":\"000142\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/interactive/user-interrupt.ts\":{\"fileId\":\"000143\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/plugin-loader.ts\":{\"fileId\":\"000144\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/api-handlers.ts\":{\"fileId\":\"000145\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/api-utils.ts\":{\"fileId\":\"000146\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/api.ts\":{\"fileId\":\"000147\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/config-endpoint.ts\":{\"fileId\":\"000148\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/content-endpoint.ts\":{\"fileId\":\"000149\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/context-endpoint.ts\":{\"fileId\":\"000150\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/edit-message-endpoint.ts\":{\"fileId\":\"000151\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/execute-codegen-endpoint.ts\":{\"fileId\":\"000152\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/execution-status-endpoint.ts\":{\"fileId\":\"000153\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/generate-content-endpoint.ts\":{\"fileId\":\"000154\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/index.ts\":{\"fileId\":\"000155\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/interrupt-execution-endpoint.ts\":{\"fileId\":\"000156\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/iteration-endpoint.ts\":{\"fileId\":\"000157\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/question-endpoint.ts\":{\"fileId\":\"000158\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/service-configuration-endpoint.ts\":{\"fileId\":\"000159\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/endpoints/usage-endpoint.ts\":{\"fileId\":\"000160\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/server.ts\":{\"fileId\":\"000161\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/backend/service.ts\":{\"fileId\":\"000162\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/codegen-ui.ts\":{\"fileId\":\"000163\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/common/api-types.ts\":{\"fileId\":\"000164\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/api/api-client.ts\":{\"fileId\":\"000165\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/app-handlers.tsx\":{\"fileId\":\"000166\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/app-layout.tsx\":{\"fileId\":\"000167\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/codegen-planning-view.tsx\":{\"fileId\":\"000168\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/codegen-summary-view.tsx\":{\"fileId\":\"000169\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/context-size-display.tsx\":{\"fileId\":\"000170\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/conversation-graph-state-handler.tsx\":{\"fileId\":\"000171\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/conversation-graph-visualiser-styles.ts\":{\"fileId\":\"000172\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/conversation-graph-visualiser.tsx\":{\"fileId\":\"000173\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/copy-to-clipboard.tsx\":{\"fileId\":\"000174\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/data-container.tsx\":{\"fileId\":\"000175\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/diff-view.tsx\":{\"fileId\":\"000176\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/file-update-view.tsx\":{\"fileId\":\"000177\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/graph-toggle-button.tsx\":{\"fileId\":\"000178\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/message-container.tsx\":{\"fileId\":\"000179\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/styles/chat-interface-styles.ts\":{\"fileId\":\"000180\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/styles/codegen-view-styles.ts\":{\"fileId\":\"000181\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/styles/data-container-styles.ts\":{\"fileId\":\"000182\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/styles/diff-view-styles.ts\":{\"fileId\":\"000183\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/styles/file-update-view-styles.ts\":{\"fileId\":\"000184\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/styles/message-container-styles.ts\":{\"fileId\":\"000185\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/styles/system-message-container-styles.ts\":{\"fileId\":\"000186\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/system-message-container.tsx\":{\"fileId\":\"000187\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat-interface.tsx\":{\"fileId\":\"000188\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/content-generation-modal.tsx\":{\"fileId\":\"000189\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/genaicode-config/genaicode-config-modal-styles.ts\":{\"fileId\":\"000190\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/genaicode-config/genaicode-config-modal.tsx\":{\"fileId\":\"000191\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/hamburger-menu/hamburger-menu.tsx\":{\"fileId\":\"000192\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/hamburger-menu/styles.ts\":{\"fileId\":\"000193\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/hamburger-menu/types.ts\":{\"fileId\":\"000194\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/health-check-modal.tsx\":{\"fileId\":\"000195\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/icons.tsx\":{\"fileId\":\"000196\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/info-icon.tsx\":{\"fileId\":\"000197\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/input-area/ai-service-selector.tsx\":{\"fileId\":\"000198\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/input-area/button-container.tsx\":{\"fileId\":\"000199\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/input-area/image-upload.tsx\":{\"fileId\":\"000200\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/input-area/input-area.tsx\":{\"fileId\":\"000201\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/progress-indicator.tsx\":{\"fileId\":\"000202\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/question-handler.tsx\":{\"fileId\":\"000203\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/rc-config-modal.tsx\":{\"fileId\":\"000204\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/service-configuration/service-config-card.tsx\":{\"fileId\":\"000205\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/service-configuration/service-configuration-modal-styles.ts\":{\"fileId\":\"000206\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/service-configuration/service-configuration-modal.tsx\":{\"fileId\":\"000207\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/styled-textarea.tsx\":{\"fileId\":\"000208\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/suggestion-generator.tsx\":{\"fileId\":\"000209\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/theme-toggle.tsx\":{\"fileId\":\"000210\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/toggle-button.tsx\":{\"fileId\":\"000211\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/unread-messages-notification.tsx\":{\"fileId\":\"000212\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/usage-display.tsx\":{\"fileId\":\"000213\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/contexts/chat-state-context.tsx\":{\"fileId\":\"000214\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\":{\"fileId\":\"000215\",\"summary\":\"Main React app component using ChatStateContext and layout\",\"dependencies\":[{\"path\":\"react\",\"type\":\"external\",\"fileId\":\"000213\"},{\"path\":\"styled-components\",\"type\":\"external\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/genaicode-app.tsx\",\"type\":\"local\",\"fileId\":\"000213\"}],\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/hooks/available-service.ts\":{\"fileId\":\"000216\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/hooks/custom-events.ts\":{\"fileId\":\"000217\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/hooks/merged-messages.ts\":{\"fileId\":\"000218\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/hooks/use-context-size.ts\":{\"fileId\":\"000219\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/notifications/genaicode-notifications.tsx\":{\"fileId\":\"000220\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/services/browser-ai-service.ts\":{\"fileId\":\"000221\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/sounds/sound-engine.ts\":{\"fileId\":\"000222\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/theme/global-style.ts\":{\"fileId\":\"000223\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/theme/styled-components.d.ts\":{\"fileId\":\"000224\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/theme/theme.ts\":{\"fileId\":\"000225\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/index.html\":{\"fileId\":\"000226\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/index.js\":{\"fileId\":\"000227\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/tsconfig.json\":{\"fileId\":\"000228\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/vite-env.d.ts\":{\"fileId\":\"000229\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/frontend/vite.config.mts\":{\"fileId\":\"000230\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/main/ui/user-action-handlers.ts\":{\"fileId\":\"000231\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/create-directory/create-directory-def.ts\":{\"fileId\":\"000232\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/create-directory/create-directory-executor.ts\":{\"fileId\":\"000233\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/create-file/create-file-def.ts\":{\"fileId\":\"000234\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/create-file/create-file-executor.ts\":{\"fileId\":\"000235\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/delete-file/delete-file-def.ts\":{\"fileId\":\"000236\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/delete-file/delete-file-executor.ts\":{\"fileId\":\"000237\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/download-file/download-file-def.ts\":{\"fileId\":\"000238\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/download-file/download-file-executor.ts\":{\"fileId\":\"000239\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/imgly-remove-background/imgly-remove-background-def.ts\":{\"fileId\":\"000240\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/imgly-remove-background/imgly-remove-background-executor.ts\":{\"fileId\":\"000241\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/move-file/move-file-def.ts\":{\"fileId\":\"000242\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/move-file/move-file-executor.ts\":{\"fileId\":\"000243\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/patch-file/patch-file-def.ts\":{\"fileId\":\"000245\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/patch-file/patch-file-executor.ts\":{\"fileId\":\"000246\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/resize-image/resize-image-def.ts\":{\"fileId\":\"000247\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/resize-image/resize-image-executor.ts\":{\"fileId\":\"000248\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/split-image/split-image-def.ts\":{\"fileId\":\"000249\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/split-image/split-image-executor.ts\":{\"fileId\":\"000250\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/update-file/update-file-def.ts\":{\"fileId\":\"000251\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/operations/update-file/update-file-executor.ts\":{\"fileId\":\"000252\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/project-profiles/detection.ts\":{\"fileId\":\"000253\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/project-profiles/index.ts\":{\"fileId\":\"000254\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/project-profiles/profiles/golang.ts\":{\"fileId\":\"000255\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/project-profiles/profiles/java-maven.ts\":{\"fileId\":\"000256\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/project-profiles/profiles/javascript-npm.ts\":{\"fileId\":\"000257\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/project-profiles/profiles/javascript-react.ts\":{\"fileId\":\"000258\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/project-profiles/profiles/python-django.ts\":{\"fileId\":\"000259\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/project-profiles/types.ts\":{\"fileId\":\"000260\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/ai-service-fallback.test.ts\":{\"fileId\":\"000261\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/ai-service-fallback.ts\":{\"fileId\":\"000262\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling-validate.ts\":{\"fileId\":\"000263\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/analysis-result.ts\":{\"fileId\":\"000265\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/ask-question.ts\":{\"fileId\":\"000266\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/codegen-planning.ts\":{\"fileId\":\"000267\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/codegen-summary.ts\":{\"fileId\":\"000268\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/compound-action.ts\":{\"fileId\":\"000269\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/context-compression.ts\":{\"fileId\":\"000270\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/conversation-graph.ts\":{\"fileId\":\"000271\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/conversation-summary.ts\":{\"fileId\":\"000272\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/explanation.ts\":{\"fileId\":\"000273\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/explore-external-directories.ts\":{\"fileId\":\"000274\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/extract-file-fragments.ts\":{\"fileId\":\"000275\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/genaicode-help.ts\":{\"fileId\":\"000276\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/generate-image.ts\":{\"fileId\":\"000277\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/get-image-assets.ts\":{\"fileId\":\"000278\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/get-source-code.ts\":{\"fileId\":\"000279\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/optimize-context.ts\":{\"fileId\":\"000280\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/perform-analysis.ts\":{\"fileId\":\"000281\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/read-external-files.ts\":{\"fileId\":\"000282\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/read-history.ts\":{\"fileId\":\"000283\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/reasoning-inference.ts\":{\"fileId\":\"000284\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/set-summaries.ts\":{\"fileId\":\"000285\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/update-history.ts\":{\"fileId\":\"000286\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/limits.test.ts\":{\"fileId\":\"000287\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/limits.ts\":{\"fileId\":\"000288\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/prompt-codegen.test.ts\":{\"fileId\":\"000289\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/prompt-codegen.ts\":{\"fileId\":\"000290\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/prompt-service-ask-question.test.ts\":{\"fileId\":\"000291\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/prompt-service.ai-services.test.ts\":{\"fileId\":\"000292\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/prompt-service.context-optimization.test.ts\":{\"fileId\":\"000293\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/prompt-service.image-handling.test.ts\":{\"fileId\":\"000294\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/prompt-service.test-utils.ts\":{\"fileId\":\"000295\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/prompt-service.ts\":{\"fileId\":\"000296\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/prompt-service.validation-recovery.test.ts\":{\"fileId\":\"000297\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/static-prompts.ts\":{\"fileId\":\"000298\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/ask-question-handler.ts\":{\"fileId\":\"000299\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/file-request-utils.ts\":{\"fileId\":\"000300\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-code-generation.ts\":{\"fileId\":\"000301\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-compound-action.ts\":{\"fileId\":\"000302\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-confirm-code-generation.ts\":{\"fileId\":\"000303\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-context-compression.ts\":{\"fileId\":\"000304\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-context-optimization.ts\":{\"fileId\":\"000305\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-conversation-graph.test.ts\":{\"fileId\":\"000306\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-conversation-graph.ts\":{\"fileId\":\"000307\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-create-file.ts\":{\"fileId\":\"000308\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-end-conversation.ts\":{\"fileId\":\"000309\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-explore-external-directories.ts\":{\"fileId\":\"000310\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-genaicode-help.ts\":{\"fileId\":\"000311\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-generate-image.ts\":{\"fileId\":\"000312\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-lint.ts\":{\"fileId\":\"000313\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-perform-analysis.ts\":{\"fileId\":\"000314\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-pull-app-context.ts\":{\"fileId\":\"000315\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-push-app-context.ts\":{\"fileId\":\"000316\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-read-external-files.ts\":{\"fileId\":\"000317\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-reasoning-inference.ts\":{\"fileId\":\"000318\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-remove-files-from-context.ts\":{\"fileId\":\"000319\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-request-files-content.ts\":{\"fileId\":\"000320\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-request-files-fragments.ts\":{\"fileId\":\"000321\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-request-git-context.ts\":{\"fileId\":\"000322\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-request-permissions.ts\":{\"fileId\":\"000323\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-search-code.ts\":{\"fileId\":\"000324\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-send-message.ts\":{\"fileId\":\"000325\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-update-file.ts\":{\"fileId\":\"000326\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/step-ask-question-types.ts\":{\"fileId\":\"000328\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/step-ask-question.test.ts\":{\"fileId\":\"000329\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/step-ask-question.ts\":{\"fileId\":\"000330\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-auto-context-refresh.ts\":{\"fileId\":\"000331\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-codegen-planning.ts\":{\"fileId\":\"000332\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-context-compression.ts\":{\"fileId\":\"000333\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-context-optimization.test.ts\":{\"fileId\":\"000334\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-context-optimization.ts\":{\"fileId\":\"000335\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ensure-context.test.ts\":{\"fileId\":\"000336\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ensure-context.ts\":{\"fileId\":\"000337\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-generate-codegen-summary-prompt.ts\":{\"fileId\":\"000338\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-generate-codegen-summary.test.ts\":{\"fileId\":\"000339\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-generate-codegen-summary.ts\":{\"fileId\":\"000340\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-generate-image.ts\":{\"fileId\":\"000341\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-generate-summary.ts\":{\"fileId\":\"000342\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-history-update.ts\":{\"fileId\":\"000343\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-process-file-updates.test.ts\":{\"fileId\":\"000344\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-process-file-updates.ts\":{\"fileId\":\"000345\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-summarization.ts\":{\"fileId\":\"000346\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-validate-recover.ts\":{\"fileId\":\"000347\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-verify-patch.ts\":{\"fileId\":\"000348\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/steps-types.ts\":{\"fileId\":\"000349\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/steps-utils.ts\":{\"fileId\":\"000350\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/systemprompt.test.ts\":{\"fileId\":\"000351\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt/token-estimator.ts\":{\"fileId\":\"000353\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt-debug/current-prompt-plugin.ts\":{\"fileId\":\"000354\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/prompt-debug/prompt-debug.test.ts\":{\"fileId\":\"000355\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/vite-genaicode/README.md\":{\"fileId\":\"000356\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/vite-genaicode/tsconfig.json\":{\"fileId\":\"000357\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/vite-genaicode/vite-env.d.ts\":{\"fileId\":\"000358\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/vite-genaicode/vite-genaicode-context.ts\":{\"fileId\":\"000359\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/vite-genaicode/vite-genaicode-frontend.ts\":{\"fileId\":\"000360\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/vite-genaicode/vite-genaicode-plugin.ts\":{\"fileId\":\"000361\",\"content\":null},\"/Users/gtanczyk/src/genaicode/src/vite-genaicode/vite-genaicode-types.ts\":{\"fileId\":\"000362\",\"content\":null},\"/Users/gtanczyk/src/genaicode/tsconfig.build.json\":{\"fileId\":\"000363\",\"content\":null},\"/Users/gtanczyk/src/genaicode/tsconfig.json\":{\"fileId\":\"000364\",\"content\":null},\"/Users/gtanczyk/src/genaicode/vitest.e2e.config.ts\":{\"fileId\":\"000365\",\"content\":null},\"/Users/gtanczyk/src/genaicode/vitest.eval.config.ts\":{\"fileId\":\"000366\",\"content\":null},\"/Users/gtanczyk/src/genaicode/vitest.prompt-debug.config.ts\":{\"fileId\":\"000367\",\"content\":null},\"/Users/gtanczyk/src/genaicode/vitest.unit.config.ts\":{\"fileId\":\"000368\",\"content\":null},\"/Users/gtanczyk/src/genaicode/.prettierrc\":{\"fileId\":\"000369\",\"content\":\"{\\n  \\\"trailingComma\\\": \\\"all\\\",\\n  \\\"tabWidth\\\": 2,\\n  \\\"semi\\\": true,\\n  \\\"singleQuote\\\": true,\\n  \\\"printWidth\\\": 120,\\n  \\\"bracketSpacing\\\": true,\\n  \\\"endOfLine\\\": \\\"lf\\\"\\n}\",\"dependencies\":[]},\"/Users/gtanczyk/src/genaicode/.genaicoderc.schema.json\":{\"fileId\":\"000371\",\"content\":null}}"
      },
      {
        "name": "readHistory",
        "content": "2025-04-03: Conv sum frontend in `step-generate-summary.ts`, `useMergedMessages.ts`, `chat-interface.tsx` (`CONVERSATION_SUMMARY`). Iter title by 1st sum msg. `useMergedMessages.ts` mod (last sum msg for `iterationTitle`). `src/eval/conversation-summary.test.ts` create rejected. Conv ongoing.\n2025-04-04: Impl `readExternalFiles` (GEN-094) w batch conf & prompt refine (GEN-095) in `handleReadExternalFiles.ts`. Added `exploreExternalDirectories` (GEN-096).\n2025-04-05: Lint failed post `exploreExternalDirectories` impl. Errs in `explore-external-directories-def.ts`, `explore-external-directories-executor.ts`, `handle-explore-external-directories.ts`.\n2025-05-01: Moved/styled ConvGraphVisualiser toggle btn (`app-layout.tsx`, `GENAICODE_TRACKER.md`). Fixed btn pos (`app-layout.tsx` right:30px) (GEN-102). Refactored btn code to `/Users/gtanczyk/src/genaicode/src/main/ui/frontend/app/components/chat/graph-toggle-button.tsx`, moved styles/logic, created `GraphToggleButtonWrapper`, updated `app-layout.tsx`, updated `GENAICODE_TRACKER.md` (GEN-103). Code gen executed/applied for GEN-103.\n2025-05-10: Tested `compoundAction`. Task: create dir + 3 .md files. Used `compoundAction` to propose plan (createDirectory, createFile ops). User confirmed plan. Executed `createDirectory` & `createFile` via `compoundAction`. Code gen complete.\n2025-06-21: User impl. file refresh mech (GEN-108). Backend: `refreshFiles` (`src/files/find-files.ts` exported), `clearSummaryCache` (`src/files/summary-cache.ts` added/exported), `RefreshContextResponse` (`src/main/ui/common/api-types.ts` added), `src/main/ui/backend/endpoints/refresh-context-endpoint.ts` created, `src/main/ui/backend/endpoints/index.ts` updated. Frontend: `src/main/ui/frontend/app/api/api-client.ts` (`refreshContext` POST `/api/refresh-context`), `src/main/ui/frontend/app/components/icons.tsx` (`RefreshIcon`), `src/main/ui/frontend/app/components/app-layout.tsx` (initially added \"Refresh Context\" menu item to `HamburgerMenu`, onclick reloads page). `GENAICODE_TRACKER.md` (GEN-108) marked done. Later, user requested moving refresh button to align with conversation graph icon. `src/main/ui/frontend/app/components/app-layout.tsx` updated: removed refresh from `HamburgerMenu`, added to new `FloatingButtonsContainer` alongside `GraphToggleButtonWrapper` at bottom-right, `handleRefresh` func extracted. Code gen applied. User confirmed UI test run.\n2025-07-05: Fixed `updateFiles` error handling & `handleCodeGeneration` success message (GEN-112). `updateFiles` now logs/returns failed ops. `handleCodeGeneration` displays accurate status. Mocks in `codegen.ai-services.test.ts`, `codegen.cli-options.test.ts`, `codegen.image-generation.test.ts` updated to `mockResolvedValue([])`. `GENAICODE_TRACKER.md` updated.\n2025-07-06: Fixed MD render in UI (GEN-115). Initial fix: `MessageContent` to `div` (`message-container-styles.ts`), added CSS. `GENAICODE_TRACKER.md` updated. Issues: missing `ReactMarkdown` (for `problemAnalysis`, `codeChanges`, `explanation`) and `white-space: pre-wrap;` conflict in `SectionContent` (`codegen-view-styles.ts`). Plan: Wrap content with `ReactMarkdown` in `codegen-planning-view.tsx`, `codegen-summary-view.tsx`. Remove `white-space: pre-wrap;` & add MD CSS in `codegen-view-styles.ts`. Update `GENAICODE_TRACKER.md`. Code gen applied. User requested MD for `FilePrompt` (`CodegenSummaryView`). Plan update: Wrap `update.prompt` with `ReactMarkdown` in `codegen-summary-view.tsx`. Remove `white-space: pre-wrap;` & add MD styling in `codegen-view-styles.ts`. Update `GENAICODE_TRACKER.md`. Code gen applied.\n2025-07-26: Implemented `popularDependencies` config option (GEN-117) in `.genaicoderc` to control enable/disable and threshold. Initial plan to update `.genaicoderc.schema.json` corrected; `src/main/config-schema.ts` updated instead. `GENAICODE_TRACKER.md` also updated. All changes applied."
      }
    ],
    "text": "Sure, here is the application source code, image assets, and the history.",
    "cache": true
  },
  {
    "type": "assistant",
    "text": "Thank you, I'm ready to assist you with your request."
  },
  {
    "type": "user",
    "itemId": "INITIAL_PROMPT",
    "text": "This is summary of our conversation:\n\nThe user wants to implement Docker container execution with a Lite LLM summarizer. I have already generated and applied all the necessary code changes, including updating `package.json`, `.genaicoderc`, `config-types.ts`, `config.ts`, `config-schema.ts`, `operations-index.ts`, `function-calling.ts`, `systemprompt.ts`, and `GENAICODE_TRACKER.md`. I also created new files for Docker operations (`docker-client.ts`, `start-container-def.ts`, `start-container-executor.ts`, `run-command-def.ts`, `run-command-executor.ts`, `stop-container-def.ts`, `stop-container-executor.ts`), the Lite LLM summarizer (`lite-llm-summarizer.ts`), Docker function definitions (`docker.ts`), and Docker action handlers (`handle-docker.ts`). All these changes have been successfully applied."
  },
  {
    "type": "assistant",
    "functionCalls": [
      {
        "name": "getSourceCode",
        "args": {
          "filePaths": [
            "/Users/gtanczyk/src/genaicode/package.json",
            "/Users/gtanczyk/src/genaicode/src/main/config-types.ts",
            "/Users/gtanczyk/src/genaicode/src/main/config.ts",
            "/Users/gtanczyk/src/genaicode/src/main/config-schema.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/operations-index.ts",
            "/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts",
            "/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/step-ask-question-handlers.ts",
            "/Users/gtanczyk/src/genaicode/src/prompt/systemprompt.ts",
            "/Users/gtanczyk/src/genaicode/GENAICODE_TRACKER.md",
            "/Users/gtanczyk/src/genaicode/src/ai-service/lite-llm-summarizer.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/docker-client.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-def.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-executor.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/run-command-def.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/run-command-executor.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-def.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-executor.ts",
            "/Users/gtanczyk/src/genaicode/src/prompt/function-defs/docker.ts",
            "/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-docker.ts"
          ]
        }
      }
    ]
  },
  {
    "type": "user",
    "functionResponses": [
      {
        "name": "getSourceCode",
        "content": "{}"
      }
    ]
  },
  {
    "type": "assistant",
    "text": "Code generation completed, changes were accepted and applied. Should we continue the conversation?"
  },
  {
    "type": "user",
    "text": "Thank you for doing the code generation, now lets continue the conversation."
  },
  {
    "type": "assistant",
    "functionCalls": [
      {
        "name": "getSourceCode",
        "args": {
          "filePaths": [
            "/Users/gtanczyk/src/genaicode/GENAICODE_TRACKER.md",
            "/Users/gtanczyk/src/genaicode/package.json",
            "/Users/gtanczyk/src/genaicode/src/main/config-schema.ts",
            "/Users/gtanczyk/src/genaicode/src/main/config-types.ts",
            "/Users/gtanczyk/src/genaicode/src/main/config.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/operations-index.ts",
            "/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts",
            "/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/step-ask-question-handlers.ts",
            "/Users/gtanczyk/src/genaicode/src/prompt/systemprompt.ts",
            "/Users/gtanczyk/src/genaicode/.genaicoderc"
          ]
        }
      }
    ]
  },
  {
    "type": "user",
    "functionResponses": [
      {
        "name": "getSourceCode",
        "content": "{\"/Users/gtanczyk/src/genaicode/GENAICODE_TRACKER.md\":{\"fileId\":\"000002\",\"content\":\"# GenAIcode project tracker\\n\\nThis file is used by GenAIcode to keep track of done, in progress, and planned changes in the GenAIcode project.\\n\\nIssues are automatically tracked with unique identifiers (GEN-XXX) and dates. Each issue includes:\\n\\n- A unique identifier (e.g., GEN-001)\\n- Status (done [x], in progress [-], planned [ ])\\n- Creation date\\n- Last update date\\n\\n## Issues\\n\\n- [x] [GEN-118] 2025-07-26: Implement Docker container execution for sandboxed command execution with lite summarizer.\\n- [x] [GEN-115] 2025-07-06: Render markdown in frontend chat messages, codegen planning, codegen summary, and file prompts.\\n- [ ] [GEN-113] 2025-07-05: Add per-model configuration for enabling 'thinking' and setting a 'thinking budget'.\\n- [x] [GEN-112] 2025-06-23: Enhanced `updateFiles` to handle errors gracefully and provide accurate feedback in `handleCodeGeneration`.\\n- [x] [GEN-117] 2025-07-08: Implemented popularDependencies config option in .genaicoderc to disable feature and customize threshold.\\n- [ ] [GEN-111] 2025-06-23: Introduce new LITE model type for summarization and context optimization.\\n- [-] [GEN-110] 2025-06-22: Automatic context refresh on file changes.\\n- [ ] [GEN-109] 2025-06-22: Ensure `compoundAction` loads full file content for all planned files into the context before execution.\\n- [-] [GEN-116] 2024-07-08: Implement popular dependency inclusion in context optimization after summarization.\\n- [ ] [GEN-108] 2025-06-22: Fix browser-side suggestion generation due to `window.ai` API changes.\\n- [-] [GEN-107] 2025-05-15: Add test suite for compoundAction handler (`src/eval/compound-action.test.ts`).\\n- [-] [GEN-106] 2025-05-10: Refactor `handleCompoundAction` for multi-step inference (plan, then params per action).\\n- [x] [GEN-105] 2025-05-10: Refactor `handleCompoundAction` to use full conversation context for action inference instead of `askQuestionCall.args.message`.\\n- [x] [GEN-104] 2025-05-06: Implement compoundAction - Allow AI to propose a batch of actions (create, update files) for single user confirmation.\\n- [x] [GEN-103] 2025-05-01: Refactored Conversation Graph Toggle Button into dedicated component (`graph-toggle-button.tsx`)\\n- [-] [GEN-102] 2025-05-01: Relocate Conversation Graph Visualiser toggle button to bottom-right, make it larger, add pulsing animation, and ensure visibility only during active graph traversal.\\n- [x] [GEN-102] 2025-05-01: Relocate Conversation Graph Visualiser toggle button to bottom-right, make it larger, add pulsing animation, and ensure visibility only during active graph traversal. (Updated 2025-05-01): Fixed button positioning.\\n- [-] [GEN-100] 2025-04-06: Add evaluation tests for conversationGraph and external directory exploration integration.\\n- [ ] [GEN-098] 2025-04-05: Refine action descriptions and examples for `readExternalFiles` and `exploreExternalDirectories` to improve LLM selection accuracy.\\n- [-] [GEN-097] 2025-04-05 (Updated 2025-04-05): Refactor explore-external-directories.test.ts to validate inference and synthesis prompts\\n- [x] [GEN-096] 2025-04-04 (Updated 2025-04-05): Implement exploreExternalDirectories action - Allow AI to request exploration of external directories with user confirmation, LLM argument inference, required depth parameter, synthesis step, and add evaluation tests.\\n- [-] [GEN-095] 2025-04-04 (Updated 2025-04-04): Refactor `handleReadExternalFiles` - Implemented LLM argument inference, batch user confirmation for external files, and refined AI processing prompt based on reason.\\n- [x] [GEN-094] 2025-04-03 (Updated 2025-04-04): Implement readExternalFiles action type - Initial implementation allowing external file reading with per-file confirmation.\\n- [-] [GEN-093] 2024-08-16: Refactor conversation summary prompt generation - Extracted prompt creation logic from `step-generate-summary.ts` into `prepareSummaryPrompt` and updated evaluation tests (`conversation-summary.test.ts`) to use it for consistency.\\n- [-] [GEN-092] 2024-08-15: Refactored modelOverrides to support per-model systemInstruction and outputTokenLimit configuration, allowing different settings for individual models rather than just per service.\\n- [-] [GEN-091] 2024-08-14: Enhanced OpenAI service to fully support `expectedResponseType` parameter, allowing callers to specify whether they expect text, function calls, or both in responses.\\n- [-] [GEN-090] 2024-08-13: Add `outputTokenLimit` to `modelOverrides` in `.genaicoderc` to allow customizing max output tokens per service.\\n- [-] [GEN-089] 2024-08-09: Fix multiple failing unit tests across various test suites.\\n- [-] [GEN-088] 2024-08-08: Fixed TypeScript errors in multiple test files\\n- [-] [GEN-087] 2024-08-07: Refactor Plugin AI Services (Grok, Deepseek, Fake) to support GenerateContentNewFunction signature. Implemented `generateContentNew` and refactored `generateContent` to use the new interface.\\n- [-] [GEN-086] 2024-08-07: Refactor Local LLM service to align with updated `internalGenerateContent` signature from `openai.ts`.\\n- [-] [GEN-085] 2024-08-07: Refactor OpenAI service to support GenerateContentNewFunction signature. Implemented `generateContentNew` and refactored `generateContent`, `internalGenerateContent`, and `internalGenerateToolCalls`.\\n- [-] [GEN-084] 2024-08-07: Refactor Vertex AI Claude service to support GenerateContentNewFunction signature. Implemented `generateContentNew` and refactored `generateContent`.\\n- [-] [GEN-083] 2024-08-07: Refactor Vertex AI service to support GenerateContentNewFunction signature. Implemented `generateContentNew`, refactored `generateContent`, `getGenModel`, and `recoverFunctionCall`.\\n- [x] [GEN-082] 2024-08-07 (Updated 2025-04-05): Refactor AI Studio service to support GenerateContentNewFunction signature. Completed migration to `@google/genai`, refactored `recoverFunctionCall`, and implemented `expectedResponseType` handling for `functionCall: false` in `ai-studio.ts`.\\n- [-] [GEN-081] 2024-08-05: Add systemInstruction override - Allow injecting service-specific system instructions via .genaicoderc modelOverrides.\\n- [x] [GEN-080] 2024-08-05: Enhanced UI - Replaced 'Upload Images' text with icon in button components\\n- [-] [GEN-079] 2024-08-04: Implement image pasting in Question Handler\\n- [ ] [GEN-078] 2024-08-04: Implement image upload for question answers\\n- [-] [GEN-077] 2024-08-03: Fixed type error and polling issue in ChatStateContext\\n- [-] [GEN-076] 2024-08-03: Refactored AppState - Migrated state management logic to ChatStateContext to centralize state and remove prop drilling.\\n- [-] [GEN-075] 2024-08-03: Refactored Suggestion Generation - Implemented React Context to manage chat state and suggestions, removing prop drilling\\n- [-] [GEN-074] 2024-08-02: Enhanced Suggestion Generation - Suggestions now utilize more conversational context for improved relevance instead of only the last message\\n- [x] [GEN-073] 2024-08-01: Fixed suggestion generation hook in ChatInterface.tsx - Optimized dependency array to prevent continuous execution by depending on specific message properties instead of the entire messages array\\n- [-] [GEN-072] 2024-07-29 (Updated 2024-07-30): Implement suggestion chips using browser-side AI (Moved chips to QuestionHandler to fix bug)\\n- [-] [GEN-071] 2024-07-20: Local LLM AI Service Integration - Added Local LLM as a new AI service with OpenAI-compatible API support, custom base URL configuration, and model overrides for different model types.\\n- [x] [GEN-070] 2024-02-21: Enhanced Diff View - Extracted CopyToClipboard component with individual state management. Improved UI with icon button in top-right corner. Fixed shared state issue in side-by-side view. Includes success/failure states, styled consistently with existing UI.\\n- [-] [GEN-069] 2024-02-17: Enhanced Conversation Graph Edge Evaluation - Implemented LLM-based edge evaluation with condition handling, user input consideration, and traversal control.\\n- [-] [GEN-068] 2024-02-14: Conversation Graph Implementation - Added conversation graph functionality with directed graph traversal, node action execution, and edge condition handling. Includes cycle detection and error handling.\\n- [x] [GEN-067] 2024-02-13: Enhanced Multi-File Fragment Extraction - Improved fragment extraction to handle multiple files in a single LLM call, added file path tracking, and enhanced type safety\\n- [x] [GEN-066] 2024-02-12: Refactored File Request Handlers - extracted common functions into file-request-utils.ts to reduce code duplication and improve maintainability\\n- [x] [GEN-065] 2024-02-09: Request Files Fragments - Enhanced implementation with structured fragment extraction, improved documentation, and better type safety\\n- [x] [GEN-063] 2024-02-09: Token Usage Optimization - Replace MD5 with numeric file IDs\\n- [-] [GEN-064] 2024-02-09: Context Size Display - add token count next to timestamp in assistant messages\\n- [-] [GEN-062] 2024-02-09: Context Size Display - iteration header shows token count\\n- [x] [GEN-061] 2024-02-05: Enhanced Context Compression - autonomous compression, user confirmation\\n- [-] [GEN-060] 2024-02-04: Enhanced Context Compression - file dependencies, token management\\n- [-] [GEN-058] 2024-02-01: Context Compression Feature - conversation context compression\\n- [-] [GEN-059] 2024-02-03: Improved Context Compression - conversation history analysis\\n- [x] [GEN-055] 2024-01-28: Enhanced CLI Parameter Handling - positional arguments\\n- [x] [GEN-054] 2024-01-28: Enhanced Model Type Selection - model type dropdown\\n- [-] [GEN-050] 2024-01-23: Enhanced Diff View - patch operations UI\\n- [-] [GEN-049] 2024-01-22: AI Service Selection - dialog system enhancement\\n- [x] [GEN-048] 2024-01-21: Enhanced Cross-Context Notifications\\n- [x] [GEN-047] 2024-01-20: Enhanced Notifications System\\n- [-] [GEN-045] 2024-01-19: Reasoning Model Support - model type system\\n- [ ] [GEN-044] 2024-01-18: Enhanced AI Service Selector - model info display\\n- [ ] [GEN-043] 2024-01-17: Enhanced File Operation Handlers - content generation confirmation\\n- [ ] [GEN-041] 2024-01-16: Help System Implementation - in-context documentation\\n- [x] [GEN-040] 2024-01-15: Context Management Implementation - content-bus system\\n- [ ] [GEN-039] 2024-01-14: App Context Integration - context management in conversations\\n- [ ] [GEN-035] 2024-01-13: Contributing Guidelines - development setup, code style\\n- [x] [GEN-034] 2024-01-12: Add patchFile and updateFile test cases\\n- [x] [GEN-032] 2024-01-11: Add performAnalysis Action Type - complex tasks\\n- [x] [GEN-031] 2024-01-10: Add Retry Mechanism - AI service failures\\n- [ ] [GEN-030] 2024-01-09: Enhanced Long Explanation Test\\n- [ ] [GEN-028] 2024-01-08: Create code-generation test suite\\n- [ ] [GEN-027] 2024-01-07: Implement Ask Question Test Suite\\n- [ ] [GEN-026] 2024-01-05: Generate large mock-source-code-summaries dataset\\n- [ ] [GEN-025] 2024-01-04: Implement Context Optimization Test\\n- [ ] [GEN-024] 2024-01-03: Decompose backend/service.ts\\n- [x] [GEN-020] 2024-01-02: Refactor CodegenSummaryView - update details\\n- [x] [GEN-019] 2024-01-01: Enhanced FileUpdateView - explanation toggle\\n- [x] [GEN-018] 2023-12-31: Refactor utility-endpoint.ts\\n- [x] [GEN-017] 2023-12-30: Decompose remaining endpoints in api.ts\\n- [ ] [GEN-015] 2023-12-29: Prompt suggestions feature\\n- [ ] [GEN-016] 2023-12-28: Input-area autocomplete feature\\n- [x] [GEN-014] 2023-12-27: Add old content handling to file updates\\n- [x] [GEN-013] 2023-12-26: Add FileUpdateView component\\n- [x] [GEN-012] 2023-12-25: Convert codegen-options-form to Config modal\\n- [x] [GEN-011] 2023-12-24: Plugins in Vite Genaicode - registration\\n- [x] [GEN-010] 2023-12-23: GenAIcode Tracker Enhancement - keys and dates\\n- [x] [GEN-001] 2023-12-22: File Updates Processing Enhancement\\n- [x] [GEN-002] 2023-12-21: Update AI Studio Models Configuration\\n- [x] [GEN-003] 2023-12-20: Implement code planning plugin hook\\n- [x] [GEN-004] 2023-12-19: Add .genaicoderc configuration assistance\\n- [x] [GEN-005] 2023-12-18: Add JSON Schema Support for .genaicoderc\\n- [x] [GEN-006] 2023-12-16: Add unit test for content generation retry\\n- [x] [GEN-007] 2023-12-14: Enhanced UI for Codegen Data Display\\n- [x] [GEN-008] 2023-12-14: System Message Container Enhancement\\n- [x] [GEN-009] 2023-12-14: UI Component Theme Dependency Cleanup\\n\",\"dependencies\":[]},\"/Users/gtanczyk/src/genaicode/package.json\":{\"fileId\":\"000052\",\"content\":\"{\\n  \\\"name\\\": \\\"genaicode\\\",\\n  \\\"version\\\": \\\"0.11.2\\\",\\n  \\\"author\\\": \\\"Grzegorz Tańczyk\\\",\\n  \\\"repository\\\": {\\n    \\\"type\\\": \\\"git\\\",\\n    \\\"url\\\": \\\"git+https://github.com/gtanczyk/genaicode.git\\\"\\n  },\\n  \\\"keywords\\\": [\\n    \\\"generate\\\",\\n    \\\"code\\\",\\n    \\\"ai\\\",\\n    \\\"vite-plugin\\\"\\n  ],\\n  \\\"type\\\": \\\"module\\\",\\n  \\\"bin\\\": \\\"./bin/genaicode.cjs\\\",\\n  \\\"engines\\\": {\\n    \\\"node\\\": \\\">=18\\\"\\n  },\\n  \\\"license\\\": \\\"Apache-2.0\\\",\\n  \\\"files\\\": [\\n    \\\"bin\\\",\\n    \\\"dist\\\",\\n    \\\"media\\\",\\n    \\\"README.md\\\",\\n    \\\"LICENSE\\\"\\n  ],\\n  \\\"exports\\\": {\\n    \\\".\\\": {\\n      \\\"types\\\": \\\"./dist/index.d.ts\\\",\\n      \\\"default\\\": \\\"./dist/index.js\\\"\\n    },\\n    \\\"./vite-plugin\\\": {\\n      \\\"types\\\": \\\"./dist/vite-genaicode/vite-genaicode-plugin.d.ts\\\",\\n      \\\"default\\\": \\\"./dist/vite-genaicode/vite-genaicode-plugin.js\\\"\\n    },\\n    \\\"./vite-context\\\": {\\n      \\\"types\\\": \\\"./dist/vite-genaicode/vite-genaicode-context.d.ts\\\",\\n      \\\"default\\\": \\\"./dist/vite-genaicode/vite-genaicode-context.js\\\"\\n    },\\n    \\\"./*\\\": \\\"./dist/*\\\"\\n  },\\n  \\\"scripts\\\": {\\n    \\\"cli\\\": \\\"node ./bin/genaicode.cjs\\\",\\n    \\\"interactive-cli\\\": \\\"node ./bin/genaicode.cjs --interactive\\\",\\n    \\\"ui\\\": \\\"node ./bin/genaicode.cjs --ui\\\",\\n    \\\"lint\\\": \\\"eslint . --ext js,ts,tsx --report-unused-disable-directives --max-warnings 0\\\",\\n    \\\"test\\\": \\\"vitest  --config vitest.unit.config.ts\\\",\\n    \\\"test:ci\\\": \\\"vitest run --config vitest.unit.config.ts --reporter=json\\\",\\n    \\\"test:e2e\\\": \\\"vitest --config vitest.e2e.config.ts\\\",\\n    \\\"test:eval\\\": \\\"vitest --config vitest.eval.config.ts\\\",\\n    \\\"coverage\\\": \\\"vitest run --coverage\\\",\\n    \\\"prepare\\\": \\\"husky install || true\\\",\\n    \\\"type-check\\\": \\\"tsc --noEmit\\\",\\n    \\\"build\\\": \\\"tsc -p tsconfig.build.json && npm run build-frontend\\\",\\n    \\\"build-frontend\\\": \\\"vite build src/main/ui/frontend\\\",\\n    \\\"prepublishOnly\\\": \\\"npm run build\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"@types/cors\\\": \\\"^2.8.13\\\",\\n    \\\"@types/dockerode\\\": \\\"^3.3.29\\\",\\n    \\\"@types/express\\\": \\\"^4.17.21\\\",\\n    \\\"@types/helmet\\\": \\\"^4.0.0\\\",\\n    \\\"@types/multer\\\": \\\"^1.4.12\\\",\\n    \\\"@types/react\\\": \\\"^18.3.5\\\",\\n    \\\"@types/react-dom\\\": \\\"^18.3.0\\\",\\n    \\\"@types/xml2js\\\": \\\"^0.4.14\\\",\\n    \\\"@typescript-eslint/eslint-plugin\\\": \\\"^7.17.0\\\",\\n    \\\"@uiw/react-json-view\\\": \\\"^2.0.0-alpha.30\\\",\\n    \\\"@vitejs/plugin-react\\\": \\\"^4.3.4\\\",\\n    \\\"@vitest/coverage-v8\\\": \\\"^3.0.7\\\",\\n    \\\"@vitest/ui\\\": \\\"^3.0.7\\\",\\n    \\\"axios\\\": \\\"^1.8.2\\\",\\n    \\\"eslint\\\": \\\"^8.54.0\\\",\\n    \\\"eslint-config-prettier\\\": \\\"^9.0.0\\\",\\n    \\\"eslint-plugin-import\\\": \\\"^2.29.0\\\",\\n    \\\"husky\\\": \\\"^9.1.1\\\",\\n    \\\"lint-staged\\\": \\\"^15.2.7\\\",\\n    \\\"madge\\\": \\\"^8.0.0\\\",\\n    \\\"prettier\\\": \\\"^3.1.0\\\",\\n    \\\"puppeteer\\\": \\\"^22.15.0\\\",\\n    \\\"react\\\": \\\"^18.3.1\\\",\\n    \\\"react-dom\\\": \\\"^18.3.1\\\",\\n    \\\"react-markdown\\\": \\\"^10.1.0\\\",\\n    \\\"remark-gfm\\\": \\\"^4.0.1\\\",\\n    \\\"styled-components\\\": \\\"^6.1.13\\\",\\n    \\\"ts-node\\\": \\\"^10.9.2\\\",\\n    \\\"typescript\\\": \\\"^5.0.0\\\",\\n    \\\"vite\\\": \\\"^6.3.4\\\",\\n    \\\"vite-plugin-checker\\\": \\\"^0.8.0\\\",\\n    \\\"vitest\\\": \\\"^3.0.7\\\"\\n  },\\n  \\\"dependencies\\\": {\\n    \\\"@anthropic-ai/sdk\\\": \\\"^0.51.0\\\",\\n    \\\"@anthropic-ai/vertex-sdk\\\": \\\"^0.11.3\\\",\\n    \\\"@fontsource/press-start-2p\\\": \\\"^5.1.0\\\",\\n    \\\"@google-cloud/aiplatform\\\": \\\"^3.34.0\\\",\\n    \\\"@google-cloud/vertexai\\\": \\\"^1.9.2\\\",\\n    \\\"@google/genai\\\": \\\"^0.10.0\\\",\\n    \\\"@imgly/background-removal-node\\\": \\\"^1.4.5\\\",\\n    \\\"@inquirer/prompts\\\": \\\"^5.3.8\\\",\\n    \\\"@types/diff\\\": \\\"^5.2.1\\\",\\n    \\\"@types/mime-types\\\": \\\"^2.1.4\\\",\\n    \\\"@types/node\\\": \\\"^18.0.0\\\",\\n    \\\"@types/styled-components\\\": \\\"^5.1.34\\\",\\n    \\\"cors\\\": \\\"^2.8.5\\\",\\n    \\\"diff\\\": \\\"^5.2.0\\\",\\n    \\\"dockerode\\\": \\\"^4.0.0\\\",\\n    \\\"express\\\": \\\"^4.21.2\\\",\\n    \\\"find-cache-dir\\\": \\\"^5.0.0\\\",\\n    \\\"glob-regex\\\": \\\"^0.3.2\\\",\\n    \\\"helmet\\\": \\\"^7.1.0\\\",\\n    \\\"image-size\\\": \\\"^1.2.1\\\",\\n    \\\"inquirer-file-selector\\\": \\\"^0.4.0\\\",\\n    \\\"jsonschema\\\": \\\"^1.4.1\\\",\\n    \\\"mime-types\\\": \\\"^2.1.35\\\",\\n    \\\"multer\\\": \\\"^2.0.2\\\",\\n    \\\"openai\\\": \\\"^4.77.0\\\",\\n    \\\"please-upgrade-node\\\": \\\"^3.2.0\\\",\\n    \\\"sharp\\\": \\\"^0.33.4\\\",\\n    \\\"simple-git\\\": \\\"^3.27.0\\\",\\n    \\\"xml2js\\\": \\\"^0.6.2\\\"\\n  },\\n  \\\"lint-staged\\\": {\\n    \\\"*.{js,ts,css,md}\\\": \\\"prettier --write\\\"\\n  }\\n}\\n\",\"dependencies\":[{\"path\":\"eslint\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"vitest\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"typescript\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"react\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"styled-components\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"axios\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"openai\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@anthropic-ai/sdk\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@google/genai\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@google-cloud/vertexai\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"dockerode\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"express\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"cors\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"helmet\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"multer\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"sharp\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"simple-git\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"xml2js\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@inquirer/prompts\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"jsonschema\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"react-markdown\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"remark-gfm\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"ts-node\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"vite\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@vitejs/plugin-react\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"vite-plugin-checker\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"puppeteer\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@uiw/react-json-view\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@types/cors\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@types/dockerode\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@types/express\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@types/helmet\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@types/multer\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@types/react\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@types/react-dom\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@types/xml2js\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@typescript-eslint/eslint-plugin\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@vitest/coverage-v8\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@vitest/ui\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"eslint-config-prettier\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"eslint-plugin-import\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"husky\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"lint-staged\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"madge\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"prettier\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"react-dom\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"styled-components\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"vitest\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@anthropic-ai/vertex-sdk\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@fontsource/press-start-2p\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@google-cloud/aiplatform\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@imgly/background-removal-node\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@types/mime-types\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@types/node\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"@types/styled-components\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"diff\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"find-cache-dir\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"glob-regex\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"image-size\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"inquirer-file-selector\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"mime-types\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"please-upgrade-node\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"sharp\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"simple-git\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"xml2js\",\"type\":\"external\",\"fileId\":\"\"}]},\"/Users/gtanczyk/src/genaicode/src/main/config-schema.ts\":{\"fileId\":\"000129\",\"content\":\"import { Validator, Schema } from 'jsonschema';\\n\\n/**\\n * This file contains the JSON schema for .genaicoderc configuration.\\n * The schema is based on the RcConfig interface and provides comprehensive\\n * documentation for all available configuration options.\\n *\\n * IMPORTANT: Keep this schema in sync with the RcConfig interface in config-lib.ts\\n */\\nexport const GENAICODERC_SCHEMA: Schema = {\\n  $schema: 'http://json-schema.org/draft-07/schema#',\\n  title: 'GenAIcode Configuration Schema',\\n  description: 'Configuration schema for .genaicoderc file used by GenAIcode',\\n  type: 'object',\\n  properties: {\\n    rootDir: {\\n      type: 'string',\\n      description: `Root directory of the project. All file paths will be relative to this directory.\\nDefault value is '.'.\\nExamples: '.', 'src', './project'`,\\n    },\\n    lintCommand: {\\n      type: 'string',\\n      description: `Command to run for linting the code before and after generation. The command should return appropriate exit codes for success/failure.\\nExamples: 'npm run lint', 'eslint .', 'npm run type-check && npm run lint'`,\\n    },\\n    extensions: {\\n      type: 'array',\\n      items: {\\n        type: 'string',\\n        pattern: '^\\\\\\\\.[a-z0-9\\\\\\\\.]+$',\\n      },\\n      description: `File extensions that the tool should consider for code generation and analysis.\\nExamples: ['.js', '.ts', '.tsx', '.md'], ['.py', '.go', '.java'], ['.c', '.h', '.cpp']`,\\n    },\\n    ignorePaths: {\\n      type: 'array',\\n      items: {\\n        type: 'string',\\n      },\\n      description: `Directories and files that should be excluded from code analysis and generation:\\nExamples: ['node_modules', 'dist', 'build'], ['coverage', '.vscode', '.github']`,\\n    },\\n    popularDependencies: {\\n      type: 'object',\\n      description:\\n        'Configuration for the popular dependencies feature, which automatically includes frequently used files in the context.',\\n      properties: {\\n        enabled: {\\n          type: 'boolean',\\n          description: 'Enable or disable the popular dependencies feature. Defaults to true.',\\n        },\\n        threshold: {\\n          type: 'number',\\n          description:\\n            'The minimum number of times a file must be depended on to be considered popular. Defaults to 20.',\\n        },\\n      },\\n      additionalProperties: false,\\n    },\\n    importantContext: {\\n      type: 'object',\\n      description: 'Configuration for important context that should always be available to the AI model.',\\n      properties: {\\n        systemPrompt: {\\n          type: 'array',\\n          items: {\\n            type: 'string',\\n          },\\n          description: 'Additional system-level prompts to guide AI behavior and set context.',\\n        },\\n        files: {\\n          type: 'array',\\n          items: {\\n            type: 'string',\\n          },\\n          description: 'Paths to files that should always be included in the context for code generation.',\\n        },\\n      },\\n    },\\n    modelOverrides: {\\n      type: 'object',\\n      description: 'Override configurations for different AI service models.',\\n      properties: {\\n        openai: {\\n          type: 'object',\\n          properties: {\\n            cheap: {\\n              type: 'string',\\n              description: `Model to use when cheap flag is enabled for OpenAI compatible service.\\nExample: ['gpt-4o-mini']`,\\n            },\\n            default: {\\n              type: 'string',\\n              description: `Default model to use for OpenAI compatible service. Example: ['gpt-4o']`,\\n            },\\n            outputTokenLimit: {\\n              type: 'number',\\n              description: `Maximum number of tokens to generate in the output for OpenAI compatible service.\\\\nDefaults vary by service (e.g., 8192).`,\\n            },\\n          },\\n        },\\n        anthropic: {\\n          type: 'object',\\n          properties: {\\n            cheap: {\\n              type: 'string',\\n              description: `Model to use when cheap flag is enabled for Anthropic service. Example: ['claude-3-haiku-20240307']`,\\n            },\\n            default: {\\n              type: 'string',\\n              description: `Default model to use for Anthropic service. Example: ['claude-3-5-sonnet-20240620']`,\\n            },\\n            outputTokenLimit: {\\n              type: 'number',\\n              description: `Maximum number of tokens to generate in the output for Anthropic service.\\\\nDefaults vary by service (e.g., 8192).`,\\n            },\\n          },\\n        },\\n        vertexAi: {\\n          type: 'object',\\n          properties: {\\n            cheap: {\\n              type: 'string',\\n              description: `Model to use when cheap flag is enabled for Vertex AI service. Example: ['gemini-1.5-flash-001']`,\\n            },\\n            default: {\\n              type: 'string',\\n              description: `Default model to use for Vertex AI service. Example: ['gemini-1.5-pro-001']`,\\n            },\\n          },\\n        },\\n        outputTokenLimit: {\\n          type: 'number',\\n          description: `Maximum number of tokens to generate in the output for Vertex AI service.\\\\nDefaults vary by service (e.g., 8192).`,\\n        },\\n        aiStudio: {\\n          type: 'object',\\n          properties: {\\n            cheap: {\\n              type: 'string',\\n              description: `Model to use when cheap flag is enabled for AI Studio service. Example: ['gemini-1.5-flash-001']`,\\n            },\\n            default: {\\n              type: 'string',\\n              description: `Default model to use for AI Studio service. Example: ['gemini-1.5-pro-001']`,\\n            },\\n            outputTokenLimit: {\\n              type: 'number',\\n              description: `Maximum number of tokens to generate in the output for AI Studio service.\\\\nDefaults vary by service (e.g., 8192).`,\\n            },\\n          },\\n        },\\n      },\\n    },\\n    plugins: {\\n      type: 'array',\\n      items: {\\n        type: 'string',\\n      },\\n      description: `Paths to plugin files that should be loaded by GenAIcode. Plugins can extend functionality by adding custom operations, AI services, or action handlers.\\nExample: ['./plugins/custom-plugin.js', './examples/genaicode_plugins/genaicode_tracker.js', './examples/genaicode_plugins/nonsense_operation.js']`,\\n    },\\n    featuresEnabled: {\\n      type: 'object',\\n      description: 'Configuration for enabling/disabling specific features in the tool.',\\n      properties: {\\n        appContext: {\\n          type: 'boolean',\\n          description: 'Enable/disable the app context feature that provides additional context for code generation.',\\n        },\\n        docker: {\\n          type: 'boolean',\\n          description: 'Enable/disable the Docker feature for sandboxed command execution. Defaults to true.',\\n        },\\n      },\\n    },\\n  },\\n  required: ['rootDir'],\\n  additionalProperties: false,\\n};\\n\\n/**\\n * Name of the virtual file that contains the schema\\n */\\nexport const SCHEMA_VIRTUAL_FILE_NAME = '.genaicoderc.schema.json';\\n\\nexport function validateRcConfig(rcConfig: unknown) {\\n  const validator = new Validator();\\n  const result = validator.validate(rcConfig, GENAICODERC_SCHEMA);\\n  if (!result.valid) {\\n    throw new Error(`Invalid .genaicoderc configuration: ${result.errors.map((e) => e.stack).join('\\\\n')}`);\\n  }\\n}\\n\",\"dependencies\":[{\"path\":\"jsonschema\",\"type\":\"external\",\"fileId\":\"\"}]},\"/Users/gtanczyk/src/genaicode/src/main/config-types.ts\":{\"fileId\":\"000130\",\"content\":\"export interface ImportantContext {\\n  systemPrompt?: string[];\\n  files?: string[];\\n}\\n\\n/**\\n * Configuration for specific model settings within a service.\\n */\\nexport interface ModelSpecificSettings {\\n  /** System instructions specific to this model */\\n  systemInstruction?: string[];\\n  /** Maximum number of tokens to generate in the output specific to this model */\\n  outputTokenLimit?: number;\\n  /** Whether the model should use 'thinking' mode if available */\\n  thinkingEnabled?: boolean;\\n  /** The token budget for 'thinking' mode */\\n  thinkingBudget?: number;\\n}\\n\\n/**\\n * Model configuration for each supported AI service\\n * Each service can have different model types:\\n * - default: Standard model, typically most capable but expensive\\n * - cheap: Cost-effective model with potentially lower quality\\n * - reasoning: Specialized model for reasoning tasks\\n * Specific settings like system instructions or token limits can be defined per model.\\n */\\nexport interface ServiceModelConfig {\\n  /** Model ID for cost-effective operations */\\n  cheap?: string;\\n  /** Model ID for lite operations */\\n  lite?: string;\\n  /** Model ID for standard operations (default model) */\\n  default?: string;\\n  /** Model ID for reasoning-specific tasks */\\n  reasoning?: string;\\n  /** Specific settings for individual models within this service */\\n  modelSpecificSettings?: {\\n    [modelName: string]: ModelSpecificSettings;\\n  };\\n}\\n\\nexport interface ModelOverrides {\\n  openai?: ServiceModelConfig;\\n  anthropic?: ServiceModelConfig;\\n  vertexAi?: ServiceModelConfig;\\n  aiStudio?: ServiceModelConfig;\\n  localLlm?: ServiceModelConfig;\\n}\\n\\n/**\\n * Configuration for the project codegen\\n *\\n * IMPORTANT: Keep this interface in sync with the JSON schema in config-schema.ts\\n */\\nexport interface RcConfig {\\n  rootDir: string;\\n  lintCommand?: string;\\n  extensions?: string[];\\n  ignorePaths?: string[];\\n  popularDependencies?: {\\n    enabled?: boolean;\\n    threshold?: number;\\n  };\\n  importantContext?: ImportantContext;\\n  modelOverrides?: ModelOverrides;\\n  plugins?: string[];\\n  featuresEnabled?: {\\n    appContext?: boolean;\\n    gitContext?: boolean;\\n    docker?: boolean;\\n  };\\n}\\n\",\"dependencies\":[]},\"/Users/gtanczyk/src/genaicode/src/main/config.ts\":{\"fileId\":\"000131\",\"content\":\"import path from 'path';\\nimport simpleGit from 'simple-git';\\nimport { RcConfig, ImportantContext, ModelOverrides } from './config-types.js';\\nimport { findRcFile, parseRcFile, CODEGENRC_FILENAME } from './config-lib.js';\\nimport { loadPlugins } from './plugin-loader.js';\\nimport { DEFAULT_EXTENSIONS, DEFAULT_IGNORE_PATHS } from '../project-profiles/index.js';\\nimport { SCHEMA_VIRTUAL_FILE_NAME } from './config-schema.js';\\n\\n// Read and parse the configuration\\nconst rcFilePath: string = await findRcFile();\\nexport const rcConfig: RcConfig = parseRcFile(rcFilePath);\\n\\n// Initialize popularDependencies with defaults if not present\\nif (rcConfig.popularDependencies === undefined) {\\n  rcConfig.popularDependencies = { enabled: true, threshold: 20 };\\n} else {\\n  if (rcConfig.popularDependencies.enabled === undefined) {\\n    rcConfig.popularDependencies.enabled = true;\\n  }\\n  if (rcConfig.popularDependencies.threshold === undefined) {\\n    rcConfig.popularDependencies.threshold = 20;\\n  } else if (rcConfig.popularDependencies.threshold < 0) {\\n    rcConfig.popularDependencies.threshold = 0;\\n  }\\n}\\n\\nif (typeof rcConfig.featuresEnabled === 'undefined') {\\n  rcConfig.featuresEnabled = {};\\n}\\n\\nif (typeof rcConfig.featuresEnabled?.gitContext === 'undefined') {\\n  rcConfig.featuresEnabled.gitContext = await simpleGit(rcConfig.rootDir).checkIsRepo();\\n}\\n\\nif (typeof rcConfig.featuresEnabled?.docker === 'undefined') {\\n  rcConfig.featuresEnabled.docker = true;\\n}\\n\\nexport const rcConfigSchemaFilePath = path.join(rcConfig.rootDir, SCHEMA_VIRTUAL_FILE_NAME);\\n\\nawait loadPlugins(rcConfig);\\n\\nexport const sourceExtensions: string[] = rcConfig.extensions ?? [...DEFAULT_EXTENSIONS.JS];\\n\\n// Image extensions (driven by ai service limitations, so not configurable)\\nexport const IMAGE_ASSET_EXTENSIONS: string[] = ['.png', '.jpg', '.jpeg', '.gif', '.webp'];\\n\\nexport const ignorePaths: string[] = rcConfig.ignorePaths ?? [...DEFAULT_IGNORE_PATHS.JS];\\n\\nexport const importantContext: ImportantContext = processImportantContext(rcConfig.importantContext);\\n\\n// modelOverrides is directly assigned. Downstream code in service-configurations.ts handles the structure.\\nexport const modelOverrides: ModelOverrides = rcConfig.modelOverrides ?? {};\\n\\nfunction processImportantContext(context: ImportantContext | undefined): ImportantContext {\\n  if (!context) {\\n    return { systemPrompt: [], files: [] };\\n  }\\n\\n  // Always include .genaicoderc in important files\\n  const files = context.files || [];\\n  if (!files.includes(CODEGENRC_FILENAME)) {\\n    files.push(CODEGENRC_FILENAME);\\n  }\\n\\n  return {\\n    systemPrompt: context.systemPrompt || [],\\n    files: files.map((file) => path.resolve(rcConfig.rootDir, file)),\\n  };\\n}\\n\\nconsole.log('Detected codegen configuration', rcConfig);\\nconsole.log('Root dir:', rcConfig.rootDir);\\nconsole.log('Important context:', importantContext);\\nconsole.log('Model overrides:', modelOverrides);\\n\",\"dependencies\":[{\"path\":\"path\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"simple-git\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/config-types.ts\",\"type\":\"local\",\"fileId\":\"000130\"},{\"path\":\"./config-lib.js\",\"type\":\"local\",\"fileId\":\"\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/config-types.ts\",\"type\":\"local\",\"fileId\":\"000130\"},{\"path\":\"../project-profiles/index.js\",\"type\":\"local\",\"fileId\":\"\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/config-schema.ts\",\"type\":\"local\",\"fileId\":\"000129\"}]},\"/Users/gtanczyk/src/genaicode/src/operations/operations-index.ts\":{\"fileId\":\"000244\",\"content\":\"import { getRegisteredOperations } from '../main/plugin-loader.js';\\nimport { OperationExecutor } from '../main/codegen-types.js';\\n\\nimport * as createDirectory from './create-directory/create-directory-executor.js';\\nimport * as createFile from './create-file/create-file-executor.js';\\nimport * as updateFile from './update-file/update-file-executor.js';\\nimport * as patchFile from './patch-file/patch-file-executor.js';\\nimport * as deleteFile from './delete-file/delete-file-executor.js';\\nimport * as moveFile from './move-file/move-file-executor.js';\\nimport * as downloadFile from './download-file/download-file-executor.js';\\nimport * as splitImage from './split-image/split-image-executor.js';\\nimport * as resizeImage from './resize-image/resize-image-executor.js';\\nimport * as imglyRemoveBackground from './imgly-remove-background/imgly-remove-background-executor.js';\\nimport * as startContainer from './docker/start-container-executor.js';\\nimport * as runCommand from './docker/run-command-executor.js';\\nimport * as stopContainer from './docker/stop-container-executor.js';\\n\\nconst INDEX = [\\n  createDirectory,\\n  createFile,\\n  updateFile,\\n  patchFile,\\n  deleteFile,\\n  moveFile,\\n  downloadFile,\\n  splitImage,\\n  resizeImage,\\n  imglyRemoveBackground,\\n  startContainer,\\n  runCommand,\\n  stopContainer,\\n] as const;\\n\\nfunction getOperations() {\\n  return [...getRegisteredOperations(), ...INDEX];\\n}\\n\\nexport function getOperationExecutor(name: string): OperationExecutor | undefined {\\n  return getOperations().find((operation) => operation.def.name === name)?.executor as OperationExecutor | undefined;\\n}\\n\\nexport function getOperationDefs() {\\n  return getOperations().map((operation) => operation.def);\\n}\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/config-types.ts\",\"type\":\"local\",\"fileId\":\"000130\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/config-types.ts\",\"type\":\"local\",\"fileId\":\"000130\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"}]},\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\":{\"fileId\":\"000264\",\"content\":\"import { disableExplanations } from '../cli/cli-params.js';\\nimport { FunctionDef } from '../ai-service/common-types.js';\\nimport { getSourceCode } from './function-defs/get-source-code.js';\\nimport { getImageAssets } from './function-defs/get-image-assets.js';\\nimport { getCodegenSummaryDef } from './function-defs/codegen-summary.js';\\nimport { explanation } from './function-defs/explanation.js';\\nimport { generateImage } from './function-defs/generate-image.js';\\nimport {\\n  getAskQuestionDef,\\n  requestPermissions,\\n  requestFilesContent,\\n  removeFilesFromContext,\\n  contextOptimization,\\n  searchCode,\\n  lint,\\n  pullAppContext,\\n  pushAppContext,\\n  requestFilesFragments,\\n  sendMessage,\\n  requestGitContextDef,\\n} from './function-defs/ask-question.js';\\nimport { optimizeContext } from './function-defs/optimize-context.js';\\nimport { setSummaries } from './function-defs/set-summaries.js';\\nimport { updateHistory } from './function-defs/update-history.js';\\nimport { readHistory } from './function-defs/read-history.js';\\nimport { getOperationDefs } from '../operations/operations-index.js';\\nimport { getCodegenPlanningDef } from './function-defs/codegen-planning.js';\\nimport { performAnalysis } from './function-defs/perform-analysis.js';\\nimport { analysisResult } from './function-defs/analysis-result.js';\\nimport { genaicodeHelpDef } from './function-defs/genaicode-help.js';\\nimport { reasoningInference, reasoningInferenceResponse } from './function-defs/reasoning-inference.js';\\nimport { compressContext } from './function-defs/context-compression.js';\\nimport { extractFileFragments } from './function-defs/extract-file-fragments.js';\\nimport { conversationGraph, evaluateEdge } from './function-defs/conversation-graph.js';\\nimport { conversationSummaryDef } from './function-defs/conversation-summary.js';\\nimport { readExternalFiles } from './function-defs/read-external-files.js';\\nimport { exploreExternalDirectories } from './function-defs/explore-external-directories.js';\\nimport { getCompoundActionDef } from './function-defs/compound-action.js';\\nimport { startContainer, runCommand, stopContainer } from './function-defs/docker.js';\\n\\n/**\\n * Function definitions for function calling feature\\n */\\nexport function getFunctionDefs(): FunctionDef[] {\\n  return [\\n    getSourceCode,\\n    getImageAssets,\\n    getCodegenSummaryDef(),\\n    getCodegenPlanningDef(),\\n    explanation,\\n    generateImage,\\n    getAskQuestionDef(),\\n    requestPermissions,\\n    searchCode,\\n    lint,\\n    requestFilesContent,\\n    removeFilesFromContext,\\n    contextOptimization,\\n    optimizeContext,\\n    setSummaries,\\n    updateHistory,\\n    readHistory,\\n    performAnalysis,\\n    analysisResult,\\n    pullAppContext,\\n    pushAppContext,\\n    genaicodeHelpDef,\\n    reasoningInference,\\n    compressContext,\\n    reasoningInferenceResponse,\\n    extractFileFragments,\\n    requestFilesFragments,\\n    conversationGraph,\\n    evaluateEdge,\\n    sendMessage,\\n    conversationSummaryDef,\\n    readExternalFiles,\\n    exploreExternalDirectories,\\n    requestGitContextDef,\\n    getCompoundActionDef(),\\n    startContainer,\\n    runCommand,\\n    stopContainer,\\n    ...getOperationDefs(),\\n  ].map((fd: FunctionDef) => {\\n    if (\\n      !disableExplanations &&\\n      fd.parameters.properties.explanation &&\\n      !fd.parameters.required.includes('explanation')\\n    ) {\\n      fd.parameters.required.unshift('explanation');\\n    } else if (disableExplanations) {\\n      delete fd.parameters.properties.explanation;\\n    }\\n\\n    return fd;\\n  });\\n}\\n\",\"dependencies\":[{\"path\":\"../cli/cli-params.js\",\"type\":\"local\",\"fileId\":\"\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/config-types.ts\",\"type\":\"local\",\"fileId\":\"000130\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/operations-index.ts\",\"type\":\"local\",\"fileId\":\"000244\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-calling.ts\",\"type\":\"local\",\"fileId\":\"000264\"}]},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/step-ask-question-handlers.ts\":{\"fileId\":\"000327\",\"content\":\"import { ActionType, ActionHandler } from './step-ask-question-types.js';\\nimport {\\n  handleStartContainer,\\n  handleRunCommand,\\n  handleStopContainer,\\n} from './handlers/handle-docker.js';\\n\\nexport const handlers: Partial<Record<ActionType, ActionHandler>> = {};\\n\\nexport function registerActionHandler(type: ActionType, handler: ActionHandler): void {\\n  handlers[type] = handler;\\n}\\n\\n// Register Docker action handlers.\\n// The string literals are cast to ActionType because the full enum/type definition\\n// is not available in this context, but they correspond to the action names.\\nregisterActionHandler('startContainer' as ActionType, handleStartContainer);\\nregisterActionHandler('runCommand' as ActionType, handleRunCommand);\\nregisterActionHandler('stopContainer' as ActionType, handleStopContainer);\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/config-types.ts\",\"type\":\"local\",\"fileId\":\"000130\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/step-ask-question-handlers.ts\",\"type\":\"local\",\"fileId\":\"000327\"}]},\"/Users/gtanczyk/src/genaicode/src/prompt/systemprompt.ts\":{\"fileId\":\"000352\",\"content\":\"import { verifySystemPromptLimit } from './limits.js';\\nimport { CodegenOptions } from '../main/codegen-types.js';\\nimport { RcConfig } from '../main/config-types.js';\\n\\n/** Generates a system prompt with the codegen prompt merged */\\nexport function getSystemPrompt(\\n  { rootDir, importantContext, featuresEnabled }: Pick<RcConfig, 'rootDir' | 'importantContext' | 'featuresEnabled'>,\\n  options: Omit<CodegenOptions, 'aiService'>,\\n) {\\n  const {\\n    verbose,\\n    askQuestion,\\n    interactive,\\n    ui,\\n    allowFileCreate,\\n    allowFileDelete,\\n    allowDirectoryCreate,\\n    allowFileMove,\\n    vision,\\n    imagen,\\n  } = options;\\n\\n  const gitContextEnabled = featuresEnabled?.gitContext !== false;\\n  const dockerEnabled = featuresEnabled?.docker !== false;\\n\\n  console.log('Generate system prompt');\\n\\n  // IMPORTANT: Please avoid increasing the length of the system prompt.\\n  let systemPrompt = `## Who are you?\\\\n\\\\nYou are GenAIcode, a code generation assistant tasked with helping me implement my ideas into my application's source code.\\\\nYou should parse my application source code and then suggest changes using appropriate tools.\\\\nPlease limit any changes to the root directory of my application, which is \\\\`${rootDir}\\\\`.\\\\n\\\\n## Important Guidelines\\\\n\\\\n- **Use Absolute Paths**: Always use absolute file paths exactly as provided.\\\\n- **Return Working Code**: Aim to return fully functional code.\\\\n- **Avoid Incomplete Code Snippets**: Do not include commented-out fragments like \\\\`// ... (keep other existing functions)\\\\`.\\\\n- **Handle Large Files Appropriately**: For large files, prefer to use the \\\\`patchFile\\\\` function, otherwise use \\\\`updateFile\\\\` for small files.\\\\n- **Suggest File Splitting When Relevant**: Suggest splitting large files if it improves maintainability.\\\\n- **Verify Permissions**: Ensure you have the necessary permissions before proceeding.\\\\n- **Error Handling**: If instructions are unclear, consider failing the task with an explanation.\\\\n- **Produce Necessary Code Only**: Do not generate unnecessary code.\\\\n- **Request Context When Needed**: Ask for sufficient context paths in the code generation summary.\\\\n- **Perform Dependency Analysis**: Always analyze the task thoroughly to identify all files that need to be updated, including dependencies and related modules.\\\\n- **Comprehensive File Updates**: Ensure that all relevant files are included in the \\\\`fileUpdates\\\\` list when proposing changes.\\\\n- **Perform Thorough Analysis**: Before generating code, always perform a comprehensive analysis of the task, identifying all affected files and dependencies.\\\\n- **Communicate Planned Changes**: Summarize the planned changes and list all files to be updated. Seek user confirmation before proceeding.\\\\n- **Consider Dependencies**: Include any dependent files that might require updates to ensure the codebase remains consistent.\\\\n- **Avoid Unnecessary Permission Requests**: Do not request permissions that you already have.\\\\n\\\\n## Your permissions\\\\n\\\\n- You are allowed to modify files.\\\\n- ${allowFileCreate ? 'You are allowed to create new files.' : 'Do not create new files.'}\\\\n- ${\\n    allowFileDelete\\n      ? 'You are allowed to delete files; in such cases, add an empty string as content.'\\n      : 'Do not delete files.'\\n  }\\\\n- ${allowDirectoryCreate ? 'You are allowed to create new directories.' : `Do not create new directories.`}\\\\n- ${allowFileMove ? 'You are allowed to move files.' : 'Do not move files.'}\\\\n- ${vision ? 'You are allowed to analyze image assets.' : 'Do not analyze image assets.'}\\\\n- ${imagen ? 'You are allowed to generate images.' : 'You are not allowed to generate images.'}\\\\n`;\\n\\n  if (dockerEnabled) {\\n    systemPrompt += `\\\\n## Docker Actions\\\\n\\\\nDocker actions are available for sandboxed code execution:\\\\n- **startContainer({ image: string, name?: string })**: Starts a new container from a Docker image.\\\\n- **runCommand({ containerId: string, cmd: string })**: Executes a command within a running container.\\\\n- **stopContainer({ containerId: string })**: Stops and removes a container.\\\\n\\\\n**Note**: Command outputs are summarized to conserve tokens. Always stop containers when you are done with them.\\\\n`;\\n  }\\n\\n  if (askQuestion && (interactive || ui)) {\\n    systemPrompt += `## Asking Questions And Conversing\\\\nYou have the ability to have a conversation with me to clarify requirements, seek permissions, or request additional context.\\\\nUse this feature wisely to gather crucial information that would help you better understand the task or provide more accurate code generation.\\\\nWhen the user prompt implies a complex, multi-step interaction requiring planning, clarification, or multiple steps, use \\\\`conversationGraph\\\\` to define a structured conversation flow.\\\\n\\\\nTo have conversation with me use the \\\\`askQuestion\\\\` function. This function allows you to:\\\\n\\\\n- **Express Your Thoughts**: Inform me about your considerations or concerns regarding the task.\\\\n- **Share Analysis**: Provide insights or analysis based on the task requirements.\\\\n- **Seek Clarification**: Ask questions or provide suggestions to ensure you fully understand the requirements.\\\\n- **Request File Access**: If certain files are important but haven't been provided, request access to their content.\\\\n- **Request Permissions**: If you need permissions for operations that were initially restricted, you may request them.\\\\n- **Generate an image**: If you want to express your thoughts through an image, you can request image generation.\\\\n- **Perform Code Generation**: Once you have all the necessary information, you can propose code changes.\\\\n- **Update Files**: If you need to make small changes to a file, you can request to update it.\\\\n- **Lint Code**: If you want to check the code for errors, you can request linting\\\\n- **Use Context Compression**: Autonomously initiate context compression when the conversation history becomes large or complex, or the topic of conversation changes. Always inform the user before compressing and explain the benefits.\\\\n- **Handle Conversation Summaries**: When you encounter a message starting with \\\"This is summary of our conversation:\\\", treat it as a compressed context representing key points and decisions from previous conversation. Use this summary as a foundation for understanding the conversation's history, technical decisions made, and current implementation status. The summary maintains the most important aspects of the conversation while reducing token usage.\\\\n\\\\nAlso additional actions can be added by plugins, and their names will be prefixed with \\\\`plugin:\\\\`.\\\\n\\\\n### How askQuestion process works\\\\n\\\\n1. You receive a conversation history\\\\n2. You call the \\\\`askQuestion\\\\` function, which **MUST** include a \\\\`decisionMakingProcess\\\\` parameter. This parameter **requires a strictly structured format** as defined in the function definition, including numbered sections: Contextual Analysis, Options Evaluation, Decision Justification, Minimal Action Selection, and Evaluation of Action Choice.  **Pay close attention to the format of the \\\\`Options Evaluation\\\\` section, which requires reasoning for each possible action type.**\\\\n3. You receive conversation history with the askQuestion function call added.\\\\n4. You can call the action handler based on the action type.\\\\n5. User will receive the response from the action handler.\\\\n\\\\nExample use cases of action types:\\\\n\\\\n- Have a conversation with the user, provide direct answers to questions, share immediate observations **based on direct inspection**, provide feedback etc. -> **sendMessage**\\\\n- Need access to some files contents, which exist in the project, but content was not provided for them (have only summary, content is null) -> **requestFilesContent**\\\\n- Need to access the *content* of a specific configuration file outside the project, like \\\\`/etc/hosts\\\\` or a specific log file -> **readExternalFiles**\\\\n- Need to get a *list of files* in an external directory like \\\\`/var/log\\\\` to understand available log files before reading their content, or to find files based on certain criteria within a directory -> **exploreExternalDirectories**\\\\n- Small change in one file that exists already is needed, and conversation should continue -> **updateFile**\\\\n- You want to create one new file during the conversation, and then continue the conversation -> **createFile**\\\\n- The conclusion of the conversation is to perform an implementation -> **confirmCodeGeneration**\\\\n- Considering an action, but missing permission to perform it -> **requestPermissions**\\\\n- Analyze a non trivial problem, do it internally, which involves a specific process or computation, and respond with the specific results or findings of that analysis to the user -> **performAnalysis**\\\\n- Simple visual analysis of an image, which is already present in the context -> **sendMessage**\\\\n- Need to reduce size of the context, and content of some files is not needed anymore -> **removeFilesFromContext**\\\\n- Need to reorganize the context of the conversation, or reduce its size -> **contextOptimization**\\\\n- Generate an image -> **generateImage**\\\\n- Search for a keyword/phrase over the codebase of the project -> **searchCode**\\\\n- Need to perform a linting of the code -> **lint**\\\\n- End the conversation -> **endConversation**\\\\n- The user needs help with GenAIcode itself, encountered a problem, or needs guidance -> **genaicodeHelp**\\\\n- Perform inference on a AI model with reasoning capabilities -> **reasoningInference**\\\\n- Complex, multi-step conversations that require **planning** and structured flow, wnen implementing complex features or handling tasks that involve multiple decisions and steps -> **conversationGraph**\\\\n- Need to execute multiple distinct file operations (create, update, delete, move) or image manipulations as a batch, based on a user request that implies multiple simple, predefined actions -> **compoundAction**\\\\n${gitContextEnabled ? '- Need to access Git information such as commit history, file changes, or blame data to understand code evolution or authorship -> **requestGitContext**' : ''}\\\\n\\\\n### Efficient File Content Requests\\\\n\\\\nYou can request the content of legitimate files within the project without interrupting the user. This allows you to gather more context when needed.\\\\n\\\\n- **Judicious Use**: Only request files directly relevant to the task.\\\\n- **Relevance**: Consider if the file content is truly necessary.\\\\n- **Large Files**: Be cautious when requesting large files.\\\\n- **Dependencies**: Trace through file dependencies when necessary.\\\\n- **Privacy and Security**: Be mindful of sensitive information.\\\\n- **Iterative Requests**: Anticipate your needs to minimize the number of requests.\\\\n\\\\n# Typical Conversation Flow \\\\n\\\\nIt is ** VERY IMPORTANT ** to follow the conversation flow to ensure a smooth and efficient code generation process. Here is a typical conversation flow:\\\\n\\\\n1. I provide you with source code and context.\\\\n2. Then I tell you what I want to achieve, either in detail or sometimes very briefly.\\\\n3. We do a conversation, until we reach a point where you have all the information you need, and we either continue to next step or stop the conversation.\\\\n   Sometimes you may want to make a small change to one file and continue the conversation.\\\\n4. You propose to start code generation (actionType: confirmCodeGeneration)\\\\n5. I confirm that you can proceed (or reject and we go back to step 3)\\\\n6. You generate the code changes summary\\\\n7. Then you generate code change for each file\\\\n8. I apply code changes, and the conversation ends.\\\\n\\\\n## Conversation Flow Best Practices\\\\n\\\\n- If the user wants to stop the conversation, you should respect that and stop the conversation (instead of using sendMessage prefer to use endConversation).\\\\n- If you want to make small one file change, and continue the conversation, you can do that using actionType=updateFile. This makes sense if the change is small and does not require extensive planning.\\\\n- If you are missing context or have uncertainties, ask for clarification before proposing code changes.\\\\n- Every assistant message must contain meaningful content, whether it's a summary, clarifying question, or proposed code snippet.\\\\n- Complete the conversation and fully understand the user's request before starting code generation.\\\\n- Always provide tangible analysis, results, or insights when stating that it is performing analysis.\\\\n- Provide meaningful responses or explanations instead of generic placeholders like \\\"I will do something. Please wait a moment\\\".\\\\n- Request all necessary permissions and information before starting code generation.\\\\n- When responding with \\\\`genaicodeHelp\\\\` action type, assume that the final answer will be generated by subsequent \\\\`genaicodeHelp\\\\` function call. So you should not try to provide the final answer in the first response, and also you should not ask for more information or ask other questions in the first response.\\\\n- When writing content of \\\\`message\\\\` parameter in the \\\\`askQuestion\\\\` function, always direct it to the user, not to the assistant. For example, instead of \\\"User is asking for...\\\", use \\\"You are asking for...\\\".\\\\n- Try to tell the user what is going to happen next, what they should expect, and what they should do next. For example, \\\"I will now generate the code changes summary. Please confirm if you are ready to proceed.\\\".\\\\n- Do not refer to \\\\`actionType\\\\` parameter name or values in the message content. For example, instead of \\\"I will now generate the code changes summary. Please confirm if you are ready to proceed with actionType: confirmCodeGeneration.\\\", use \\\"I will now generate the code changes summary. Please confirm if you are ready to proceed.\\\". \\\\n- **IMPORTANT: Always check if a file exists before using createFile.** Before suggesting the createFile action, carefully examine the source code context to verify the file doesn't already exist. If a file already exists with the same path, use sendMessage to inform the user instead.\\\\n- When using \\\\`reasoningInference\\\\` action type to perform reasoning inference, in first step tell the user what you are going to do, and in the second step provide the results of the reasoning inference.\\\\n- When calling \\\\`reasoningInference\\\\` function, always provide a detailed prompt that includes the problem statement, context, constraints, assumptions, and solution. This will help the reasoning model to provide more accurate predictions. REMEMBER: The reasoning model will only consider the prompt and will not have access to any other context, so if you think something is important, include its full content in the context items.\\\\n- Distinguish \\\\`compoundAction\\\\` from \\\\`confirmCodeGeneration\\\\`: Use \\\\`compoundAction\\\\` for batching multiple *simple, predefined manipulations* specified by the user. Use \\\\`confirmCodeGeneration\\\\` for implementing features or complex changes requiring analysis and potentially complex logic generation.\\\\n\\\\n## GenAIcode configuration\\\\n\\\\nGenAIcode can be configured by using the \\\\`.genaicoderc\\\\` file in the root directory of the project. Available options are documented in the \\\\`.genaicoderc.schema.json\\\\` file.\\\\n`;\\n  }\\n\\n  if (importantContext?.systemPrompt && importantContext.systemPrompt.length > 0) {\\n    systemPrompt += `\\\\n# ADDITIONAL INSTRUCTIONS\\\\n\\\\n${importantContext.systemPrompt.join('\\\\n')}`;\\n  }\\n\\n  if (verbose) {\\n    console.log('System prompt:');\\n    console.log(systemPrompt);\\n  }\\n\\n  verifySystemPromptLimit(systemPrompt);\\n\\n  return systemPrompt;\\n}\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/config-types.ts\",\"type\":\"local\",\"fileId\":\"000130\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/config-types.ts\",\"type\":\"local\",\"fileId\":\"000130\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/config-types.ts\",\"type\":\"local\",\"fileId\":\"000130\"}]},\"/Users/gtanczyk/src/genaicode/.genaicoderc\":{\"fileId\":\"000370\",\"content\":\"{\\n  \\\"rootDir\\\": \\\".\\\",\\n  \\\"ignorePaths\\\": [\\n    \\\"examples/python_hello_world\\\",\\n    \\\"examples/golang_hello_world\\\",\\n    \\\"examples/java_hello_world\\\",\\n    \\\"examples/arcanoid_game\\\",\\n    \\\"examples/vision_example\\\",\\n    \\\"examples/image-operations\\\",\\n    \\\"node_modules\\\",\\n    \\\"dist\\\",\\n    \\\".github\\\",\\n    \\\".husky\\\",\\n    \\\"coverage\\\",\\n    \\\"package-lock.json\\\",\\n    \\\".vscode\\\",\\n    \\\"src/eval/data\\\",\\n    \\\"src/prompt-debug/current-prompt.js\\\"\\n  ],\\n  \\\"lintCommand\\\": \\\"npm run type-check && npm run lint\\\",\\n  \\\"importantContext\\\": {\\n    \\\"files\\\": [\\n      \\\"./.prettierrc\\\",\\n      \\\"./.eslintrc.cjs\\\"\\n    ],\\n    \\\"systemPrompt\\\": [\\n      \\\"GenAIcode is an AI-powered code generation and management tool designed to streamline software development. It leverages various AI services (Vertex AI, AI Studio, OpenAI, Anthropic) to generate, modify, and analyze code. The project features a modular architecture with components for AI services, CLI operations, file handling, and image processing. It supports interactive and UI modes, allowing developers to execute code generation tasks, manage prompts, and visualize outputs. GenAIcode offers customizable options for code generation, including file operations, context optimization, and temperature settings. The tool aims to enhance developer productivity by automating repetitive coding tasks and providing AI-assisted code improvements.\\\",\\n      \\\"When making changes to the codebase, it is important to follow the project's coding standards and conventions. This includes adhering to the linting rules, maintaining consistent formatting, and writing clear and concise code. It is also recommended to document the changes made, including the purpose of the modifications, any dependencies added or removed, and any potential impact on the project. By following these guidelines, developers can ensure that the codebase remains clean, readable, and maintainable.\\\"\\n    ]\\n  },\\n  \\\"plugins\\\": [\\n    \\\"./examples/genaicode_plugins/genaicode_tracker.js\\\",\\n    \\\"./examples/genaicode_plugins/fake_ai_service.js\\\",\\n    \\\"./examples/genaicode_plugins/grok_ai_service.js\\\",\\n    \\\"./examples/genaicode_plugins/deepseek_ai_service.js\\\",\\n    \\\"./examples/genaicode_plugins/nonsense_action_handler.js\\\",\\n    \\\"./examples/genaicode_plugins/nonsense_operation.js\\\",\\n    \\\"./examples/genaicode_plugins/vitest_runner.js\\\",\\n    \\\"./src/prompt-debug/current-prompt-plugin.js\\\"\\n  ],\\n  \\\"modelOverrides\\\": {\\n    \\\"aiStudio\\\": {\\n      \\\"default\\\": \\\"gemini-2.5-pro\\\",\\n      \\\"cheap\\\": \\\"gemini-2.5-flash\\\",\\n      \\\"modelSpecificSettings\\\": {\\n        \\\"gemini-2.5-pro-exp-03-25\\\": {\\n          \\\"systemInstruction\\\": [\\n            \\\"Please do not generate excessive amount of comments in the code. Use them only when necessary.\\\",\\n            \\\"Modify only the necessary parts of the code accordingly to the users intention.\\\",\\n            \\\"When coding in typescript, do not use double quotes for strings if not needed.\\\",\\n            \\\"Adhere to the coding standards and conventions of the project. Respect settings from .prettierrc and .eslintrc.cjs files.\\\",\\n            \\\"Make sure you are using the correct escape sequences for the programming language you are working with.\\\",\\n            \\\"Make sure you do not break the code by using incorrect escape sequences.\\\",\\n            \\\"Make sure you are using the correct syntax for the programming language you are working with.\\\"\\n          ],\\n          \\\"outputTokenLimit\\\": 16384\\n        },\\n        \\\"gemini-2.5-flash\\\": {\\n          \\\"outputTokenLimit\\\": 16384\\n        }\\n      }\\n    }\\n  },\\n  \\\"featuresEnabled\\\": {\\n    \\\"docker\\\": true\\n  }\\n}\\n\",\"dependencies\":[]}}"
      }
    ]
  },
  {
    "type": "assistant",
    "text": "Great! I'm glad the previous code generation was successful. What would you like to work on next?"
  },
  {
    "type": "user",
    "text": "run lint"
  },
  {
    "type": "assistant",
    "functionCalls": [
      {
        "name": "getSourceCode",
        "args": {
          "filePaths": [
            "/Users/gtanczyk/src/genaicode/src/ai-service/lite-llm-summarizer.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/docker-client.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/run-command-def.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/run-command-executor.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-def.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-executor.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-def.ts",
            "/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-executor.ts",
            "/Users/gtanczyk/src/genaicode/src/prompt/function-defs/docker.ts",
            "/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-docker.ts"
          ]
        }
      }
    ]
  },
  {
    "type": "user",
    "functionResponses": [
      {
        "name": "getSourceCode",
        "content": "{\"/Users/gtanczyk/src/genaicode/src/ai-service/lite-llm-summarizer.ts\":{\"fileId\":\"000372\",\"content\":\"import { ModelType, PromptItem, GenerateContentFunction } from './common-types.js';\\n\\n/**\\n * Summarizes a raw text output using a Lite LLM.\\n * @param generateContent The `generateContent` function from the active AI service.\\n * @param rawOutput The raw text to summarize.\\n * @returns A promise that resolves to the summarized text.\\n */\\nexport async function liteLLMSummarizer(\\n  generateContent: GenerateContentFunction,\\n  rawOutput: string,\\n): Promise<string> {\\n  if (!rawOutput.trim()) {\\n    return 'No output was produced.';\\n  }\\n\\n  const prompt: PromptItem[] = [\\n    {\\n      type: 'user',\\n      text: `Summarize concisely, noting errors, failures, and important results (~200 tokens):\\\\n\\\\n${rawOutput}`,\\n    },\\n  ];\\n\\n  const result = await generateContent(\\n    prompt,\\n    {\\n      modelType: ModelType.LITE,\\n      expectedResponseType: {\\n        text: true,\\n        functionCall: false,\\n        media: false,\\n      },\\n      temperature: 0.2, // Low temperature for factual summarization\\n    },\\n    {\\n      disableCache: true, // Summaries of command output should not be cached\\n      askQuestion: false,\\n    },\\n  );\\n\\n  const textPart = result.find((part) => part.type === 'text');\\n  if (textPart?.text) {\\n    return textPart.text;\\n  }\\n\\n  console.warn('Lite LLM summarizer did not return a text part. Result:', JSON.stringify(result, null, 2));\\n  return 'Could not generate a summary from the output.';\\n}\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/lite-llm-summarizer.ts\",\"type\":\"local\",\"fileId\":\"000372\"}]},\"/Users/gtanczyk/src/genaicode/src/operations/docker/docker-client.ts\":{\"fileId\":\"000373\",\"content\":\"import Docker from 'dockerode';\\n\\n/**\\n * A singleton instance of the Dockerode client.\\n * It connects to the Docker daemon via the standard Unix socket.\\n */\\nexport const docker = new Docker({ socketPath: '/var/run/docker.sock' });\\n\",\"dependencies\":[{\"path\":\"dockerode\",\"type\":\"external\",\"fileId\":\"\"}]},\"/Users/gtanczyk/src/genaicode/src/operations/docker/run-command-def.ts\":{\"fileId\":\"000374\",\"content\":\"import { FunctionDef } from '../../ai-service/common-types.js';\\n\\n/**\\n * The function definition for the 'runCommand' operation.\\n */\\nexport const runCommandDef: FunctionDef = {\\n  name: 'runCommand',\\n  description: 'Runs a command inside a running Docker container and returns a summary of the output.',\\n  parameters: {\\n    type: 'object',\\n    properties: {\\n      containerId: {\\n        type: 'string',\\n        description: 'The ID of the container in which to run the command.',\\n      },\\n      cmd: {\\n        type: 'string',\\n        description: 'The command to execute inside the container (e.g., \\\"ls -la\\\").',\\n      },\\n    },\\n    required: ['containerId', 'cmd'],\\n  },\\n};\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/lite-llm-summarizer.ts\",\"type\":\"local\",\"fileId\":\"000372\"}]},\"/Users/gtanczyk/src/genaicode/src/operations/docker/run-command-executor.ts\":{\"fileId\":\"000375\",\"content\":\"import { docker } from './docker-client.js';\\nimport { runCommandDef } from './run-command-def.js';\\nimport { OperationExecutor } from '../../main/codegen-types.js';\\nimport { putAssistantMessage } from '../../main/common/content-bus.js';\\nimport { liteLLMSummarizer } from '../../ai-service/lite-llm-summarizer.js';\\nimport type { GenerateContentFunction } from '../../ai-service/common-types.js';\\nimport type { Stream } from 'node:stream';\\n\\nconst MAX_LINES = 500;\\nconst MAX_BYTES = 16 * 1024; // 16 KB\\n\\ninterface RunCommandArgs {\\n  containerId: string;\\n  cmd: string;\\n  /** The generateContent function from the prompt service, passed by the handler. */\\n  generateContent: GenerateContentFunction;\\n}\\n\\n/**\\n * Captures the output from a stream, with limits on bytes and lines.\\n * @param stream The stream to capture from.\\n * @returns A promise that resolves to the captured output and a truncation flag.\\n */\\nasync function captureOutput(stream: Stream): Promise<{ output: string; truncated: boolean }> {\\n  return new Promise((resolve, reject) => {\\n    let output = '';\\n    let byteLength = 0;\\n    let lineCount = 0;\\n    let truncated = false;\\n\\n    // The stream from `exec.start` when TTY is true is a raw stream.\\n    stream.on('data', (chunk: Buffer) => {\\n      if (truncated) {\\n        return;\\n      }\\n      const chunkString = chunk.toString('utf8');\\n\\n      // Check byte limit\\n      if (byteLength + chunk.length > MAX_BYTES) {\\n        const remainingBytes = MAX_BYTES - byteLength;\\n        output += chunk.slice(0, remainingBytes).toString('utf8');\\n        truncated = true;\\n        return; // Stop processing\\n      }\\n\\n      output += chunkString;\\n      byteLength += chunk.length;\\n\\n      // Check line limit\\n      lineCount = (output.match(/\\\\n/g) || []).length;\\n      if (lineCount > MAX_LINES) {\\n        output = output.split('\\\\n').slice(0, MAX_LINES).join('\\\\n');\\n        truncated = true;\\n      }\\n    });\\n\\n    stream.on('end', () => {\\n      resolve({ output, truncated });\\n    });\\n\\n    stream.on('error', (err) => {\\n      console.error('Stream error during command execution:', err);\\n      // Rejecting the promise to be caught by the main try-catch block\\n      reject(new Error(`Stream error during command execution: ${err.message}`));\\n    });\\n  });\\n}\\n\\nexport const executor: OperationExecutor = async (args) => {\\n  const { containerId, cmd, generateContent } = args as RunCommandArgs;\\n\\n  if (typeof generateContent !== 'function') {\\n    throw new Error('`generateContent` function was not provided to the `runCommand` executor.');\\n  }\\n\\n  try {\\n    const container = docker.getContainer(containerId);\\n    // inspect to see if container exists\\n    await container.inspect();\\n\\n    putAssistantMessage(`Running command in container ${containerId.substring(0, 12)}: \\\"${cmd}\\\"`);\\n\\n    const exec = await container.exec({\\n      Cmd: ['/bin/sh', '-c', cmd], // Use shell to handle complex commands with pipes, etc.\\n      AttachStdout: true,\\n      AttachStderr: true,\\n    });\\n\\n    const stream = await exec.start({ hijack: true, stdin: false });\\n\\n    const { output: rawOutput, truncated } = await captureOutput(stream);\\n\\n    const inspectInfo = await exec.inspect();\\n    const exitCode = inspectInfo.ExitCode;\\n\\n    const summary = await liteLLMSummarizer(generateContent, rawOutput);\\n\\n    const result = {\\n      exitCode,\\n      summary,\\n      truncated,\\n    };\\n\\n    putAssistantMessage(`Command finished with exit code ${exitCode ?? 'N/A'}.`, result);\\n  } catch (error: unknown) {\\n    let errorMessage: string;\\n    if (error instanceof Error) {\\n      errorMessage = error.message;\\n      if ((error as any).statusCode === 404) {\\n        errorMessage = `Container with ID '${containerId}' not found.`;\\n      }\\n    } else {\\n      errorMessage = String(error);\\n    }\\n\\n    console.error(`Error running command in container:`, error);\\n    putAssistantMessage(`Error running command: ${errorMessage}`, { error: errorMessage }, [], undefined);\\n  }\\n};\\n\\nexport const def = runCommandDef;\\n\",\"dependencies\":[{\"path\":\"node:stream\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/docker-client.ts\",\"type\":\"local\",\"fileId\":\"000373\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/run-command-def.ts\",\"type\":\"local\",\"fileId\":\"000374\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/run-command-executor.ts\",\"type\":\"local\",\"fileId\":\"000375\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/lite-llm-summarizer.ts\",\"type\":\"local\",\"fileId\":\"000372\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/lite-llm-summarizer.ts\",\"type\":\"local\",\"fileId\":\"000372\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/run-command-executor.ts\",\"type\":\"local\",\"fileId\":\"000375\"}]},\"/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-def.ts\":{\"fileId\":\"000376\",\"content\":\"import { FunctionDef } from '../../ai-service/common-types.js';\\n\\n/**\\n * The function definition for the 'startContainer' operation.\\n */\\nexport const startContainerDef: FunctionDef = {\\n  name: 'startContainer',\\n  description: 'Starts a new Docker container from a specified image.',\\n  parameters: {\\n    type: 'object',\\n    properties: {\\n      image: {\\n        type: 'string',\\n        description: 'The Docker image to use for the container (e.g., \\\"ubuntu:latest\\\").',\\n      },\\n      name: {\\n        type: 'string',\\n        description: 'An optional name to assign to the container.',\\n      },\\n    },\\n    required: ['image'],\\n  },\\n};\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-def.ts\",\"type\":\"local\",\"fileId\":\"000376\"}]},\"/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-executor.ts\":{\"fileId\":\"000377\",\"content\":\"import { docker } from './docker-client.js';\\nimport { startContainerDef } from './start-container-def.js';\\nimport { OperationExecutor } from '../../main/codegen-types.js';\\nimport { putAssistantMessage } from '../../main/common/content-bus.js';\\nimport type { Stream } from 'node:stream';\\n\\ninterface StartContainerArgs {\\n  image: string;\\n  name?: string;\\n}\\n\\n/**\\n * Promisified version of docker.pull to handle the stream.\\n * @param image The Docker image to pull.\\n */\\nasync function pullImage(image: string): Promise<void> {\\n  return new Promise((resolve, reject) => {\\n    putAssistantMessage(`Pulling Docker image: ${image}... (this may take a moment)`);\\n    docker.pull(image, (err: Error | undefined, stream: Stream) => {\\n      if (err) {\\n        return reject(err);\\n      }\\n      docker.modem.followProgress(stream, (err: Error | null) => {\\n        if (err) {\\n          return reject(err);\\n        }\\n        resolve();\\n      });\\n    });\\n  });\\n}\\n\\nexport const executor: OperationExecutor = async (args) => {\\n  const { image, name } = args as StartContainerArgs;\\n\\n  try {\\n    await pullImage(image);\\n    putAssistantMessage(`Image '${image}' pulled successfully.`);\\n\\n    putAssistantMessage(`Creating container from image: ${image}...`);\\n    const container = await docker.createContainer({\\n      Image: image,\\n      name,\\n      // Keep the container running so we can exec into it later\\n      Tty: true,\\n      Cmd: ['/bin/sh'],\\n      HostConfig: {\\n        AutoRemove: true,\\n      },\\n    });\\n\\n    await container.start();\\n    const containerInfo = await container.inspect();\\n\\n    const response = {\\n      id: containerInfo.Id,\\n      // The name is returned with a leading slash, remove it.\\n      name: containerInfo.Name.startsWith('/') ? containerInfo.Name.substring(1) : containerInfo.Name,\\n      status: containerInfo.State.Status,\\n    };\\n\\n    putAssistantMessage('Container started successfully.', response);\\n  } catch (error: unknown) {\\n    const errorMessage = error instanceof Error ? error.message : String(error);\\n    console.error('Error starting container:', error);\\n    putAssistantMessage(`Error starting container: ${errorMessage}`, { error: errorMessage }, [], undefined);\\n  }\\n};\\n\\nexport const def = startContainerDef;\\n\",\"dependencies\":[{\"path\":\"node:stream\",\"type\":\"external\",\"fileId\":\"\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/docker-client.ts\",\"type\":\"local\",\"fileId\":\"000373\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-def.ts\",\"type\":\"local\",\"fileId\":\"000376\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-executor.ts\",\"type\":\"local\",\"fileId\":\"000377\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-executor.ts\",\"type\":\"local\",\"fileId\":\"000377\"}]},\"/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-def.ts\":{\"fileId\":\"000378\",\"content\":\"import { FunctionDef } from '../../ai-service/common-types.js';\\n\\n/**\\n * The function definition for the 'stopContainer' operation.\\n */\\nexport const stopContainerDef: FunctionDef = {\\n  name: 'stopContainer',\\n  description: 'Stops and removes a running Docker container.',\\n  parameters: {\\n    type: 'object',\\n    properties: {\\n      containerId: {\\n        type: 'string',\\n        description: 'The ID of the container to stop.',\\n      },\\n    },\\n    required: ['containerId'],\\n  },\\n};\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-def.ts\",\"type\":\"local\",\"fileId\":\"000378\"}]},\"/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-executor.ts\":{\"fileId\":\"000379\",\"content\":\"import { docker } from './docker-client.js';\\nimport { stopContainerDef } from './stop-container-def.js';\\nimport { OperationExecutor } from '../../main/codegen-types.js';\\nimport { putAssistantMessage } from '../../main/common/content-bus.js';\\n\\ninterface StopContainerArgs {\\n  containerId: string;\\n}\\n\\nexport const executor: OperationExecutor = async (args) => {\\n  const { containerId } = args as StopContainerArgs;\\n\\n  try {\\n    const container = docker.getContainer(containerId);\\n    \\n    // First, inspect to ensure the container exists before we try to operate on it.\\n    await container.inspect();\\n\\n    putAssistantMessage(`Stopping container ${containerId.substring(0, 12)}...`);\\n    // Stop the container. A 304 status code means it's already stopped, which is not an error.\\n    await container.stop().catch((err) => {\\n      if (err.statusCode === 304) {\\n        putAssistantMessage(`Container ${containerId.substring(0, 12)} was already stopped.`);\\n        return; // Continue to removal\\n      }\\n      throw err; // Re-throw other errors\\n    });\\n\\n    putAssistantMessage(`Removing container ${containerId.substring(0, 12)}...`);\\n    await container.remove();\\n\\n    putAssistantMessage(`Container ${containerId.substring(0, 12)} stopped and removed successfully.`);\\n\\n  } catch (error: unknown) {\\n    let errorMessage: string;\\n    // Handle specific dockerode errors\\n    if (error instanceof Error && (error as any).statusCode) {\\n      const statusCode = (error as any).statusCode;\\n      if (statusCode === 404) {\\n        // Container doesn't exist, which is a success case for this operation.\\n        errorMessage = `Container ${containerId.substring(0, 12)} not found. It may have already been removed.`;\\n        putAssistantMessage(errorMessage);\\n        return; // Exit gracefully\\n      }\\n      errorMessage = `Docker API error (status ${statusCode}): ${error.message}`;\\n    } else if (error instanceof Error) {\\n        errorMessage = error.message;\\n    } else {\\n        errorMessage = String(error);\\n    }\\n    \\n    console.error(`Error stopping or removing container ${containerId}:`, error);\\n    putAssistantMessage(`Error stopping container: ${errorMessage}`, { error: errorMessage }, [], undefined);\\n  }\\n};\\n\\nexport const def = stopContainerDef;\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/docker-client.ts\",\"type\":\"local\",\"fileId\":\"000373\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-def.ts\",\"type\":\"local\",\"fileId\":\"000378\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-executor.ts\",\"type\":\"local\",\"fileId\":\"000379\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-executor.ts\",\"type\":\"local\",\"fileId\":\"000379\"}]},\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/docker.ts\":{\"fileId\":\"000380\",\"content\":\"import { startContainerDef } from '../../operations/docker/start-container-def.js';\\nimport { runCommandDef } from '../../operations/docker/run-command-def.js';\\nimport { stopContainerDef } from '../../operations/docker/stop-container-def.js';\\n\\n/**\\n * Function definition for the 'startContainer' action, intended for the LLM.\\n */\\nexport const startContainer = startContainerDef;\\n\\n/**\\n * Function definition for the 'runCommand' action, intended for the LLM.\\n */\\nexport const runCommand = runCommandDef;\\n\\n/**\\n * Function definition for the 'stopContainer' action, intended for the LLM.\\n */\\nexport const stopContainer = stopContainerDef;\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/docker.ts\",\"type\":\"local\",\"fileId\":\"000380\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/docker.ts\",\"type\":\"local\",\"fileId\":\"000380\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/function-defs/docker.ts\",\"type\":\"local\",\"fileId\":\"000380\"}]},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-docker.ts\":{\"fileId\":\"000381\",\"content\":\"import { ActionHandler } from '../step-ask-question-types.js';\\nimport { getOperationExecutor } from '../../../../operations/operations-index.js';\\nimport { CodegenOptions } from '../../../../main/codegen-types.js';\\nimport { featuresEnabled } from '../../../../main/config.js';\\n\\n// Get the operation executors once at module load time.\\nconst startContainerExecutor = getOperationExecutor('startContainer');\\nconst runCommandExecutor = getOperationExecutor('runCommand');\\nconst stopContainerExecutor = getOperationExecutor('stopContainer');\\n\\nfunction checkDockerEnabled() {\\n  if (!featuresEnabled.docker) {\\n    throw new Error(\\n      'Docker operations are disabled. Please enable the \\\"docker\\\" feature flag in your .genaicoderc file.',\\n    );\\n  }\\n}\\n\\n/**\\n * Action handler for the 'startContainer' operation.\\n */\\nexport const handleStartContainer: ActionHandler = async (params) => {\\n  checkDockerEnabled();\\n  if (!startContainerExecutor) {\\n    throw new Error('The \\\"startContainer\\\" operation is not registered.');\\n  }\\n  const args = params.askQuestionCall.args;\\n  await startContainerExecutor(args, params.options as CodegenOptions);\\n};\\n\\n/**\\n * Action handler for the 'runCommand' operation.\\n * This handler is special because it passes the `generateContent` function\\n * to the executor, which needs it for the summarization step.\\n */\\nexport const handleRunCommand: ActionHandler = async (params) => {\\n  checkDockerEnabled();\\n  if (!runCommandExecutor) {\\n    throw new Error('The \\\"runCommand\\\" operation is not registered.');\\n  }\\n  const args = {\\n    ...params.askQuestionCall.args,\\n    generateContent: params.generateContent, // Pass the generateContent function\\n  };\\n  await runCommandExecutor(args, params.options as CodegenOptions);\\n};\\n\\n/**\\n * Action handler for the 'stopContainer' operation.\\n */\\nexport const handleStopContainer: ActionHandler = async (params) => {\\n  checkDockerEnabled();\\n  if (!stopContainerExecutor) {\\n    throw new Error('The \\\"stopContainer\\\" operation is not registered.');\\n  }\\n  const args = params.askQuestionCall.args;\\n  await stopContainerExecutor(args, params.options as CodegenOptions);\\n};\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-docker.ts\",\"type\":\"local\",\"fileId\":\"000381\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-docker.ts\",\"type\":\"local\",\"fileId\":\"000381\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-docker.ts\",\"type\":\"local\",\"fileId\":\"000381\"}]}}"
      }
    ]
  },
  {
    "type": "assistant",
    "text": "I will now run the linting process to check the code quality after the recent changes. This will help identify any potential issues or deviations from the coding standards. I will inform you about the results once the process is complete.",
    "functionCalls": [
      {
        "name": "lint",
        "id": "undefined_lint"
      }
    ]
  },
  {
    "type": "user",
    "text": "Lint command failed, please analyze the output.",
    "functionResponses": [
      {
        "name": "lint",
        "call_id": "undefined_lint",
        "content": "{\"success\":false,\"stdout\":\"\\n> genaicode@0.11.2 type-check\\n> tsc --noEmit\\n\\nsrc/operations/docker/docker-client.ts(1,20): error TS2307: Cannot find module 'dockerode' or its corresponding type declarations.\\nsrc/operations/docker/run-command-executor.ts(70,49): error TS2352: Conversion of type 'ExecutorArgs' to type 'RunCommandArgs' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\\n  Type 'ExecutorArgs' is missing the following properties from type 'RunCommandArgs': containerId, cmd, generateContent\\nsrc/operations/docker/start-container-executor.ts(34,27): error TS2352: Conversion of type 'ExecutorArgs' to type 'StartContainerArgs' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\\n  Property 'image' is missing in type 'ExecutorArgs' but required in type 'StartContainerArgs'.\\nsrc/operations/docker/stop-container-executor.ts(11,27): error TS2352: Conversion of type 'ExecutorArgs' to type 'StopContainerArgs' may be a mistake because neither type sufficiently overlaps with the other. If this was intentional, convert the expression to 'unknown' first.\\n  Property 'containerId' is missing in type 'ExecutorArgs' but required in type 'StopContainerArgs'.\\nsrc/operations/docker/stop-container-executor.ts(21,35): error TS7006: Parameter 'err' implicitly has an 'any' type.\\nsrc/prompt/steps/step-ask-question/handlers/handle-docker.ts(4,10): error TS2305: Module '\\\"../../../../main/config.js\\\"' has no exported member 'featuresEnabled'.\\nsrc/prompt/steps/step-ask-question/handlers/handle-docker.ts(22,14): error TS2322: Type '(params: ActionHandlerProps) => Promise<void>' is not assignable to type 'ActionHandler'.\\n  Type 'Promise<void>' is not assignable to type 'Promise<ActionResult>'.\\n    Type 'void' is not assignable to type 'ActionResult'.\\nsrc/prompt/steps/step-ask-question/handlers/handle-docker.ts(28,32): error TS2345: Argument of type 'AskQuestionArgs | undefined' is not assignable to parameter of type 'ExecutorArgs'.\\n  Type 'undefined' is not assignable to type 'ExecutorArgs'.\\nsrc/prompt/steps/step-ask-question/handlers/handle-docker.ts(36,14): error TS2322: Type '(params: ActionHandlerProps) => Promise<void>' is not assignable to type 'ActionHandler'.\\n  Type 'Promise<void>' is not assignable to type 'Promise<ActionResult>'.\\nsrc/prompt/steps/step-ask-question/handlers/handle-docker.ts(43,29): error TS2551: Property 'generateContent' does not exist on type 'ActionHandlerProps'. Did you mean 'generateContentFn'?\\nsrc/prompt/steps/step-ask-question/handlers/handle-docker.ts(51,14): error TS2322: Type '(params: ActionHandlerProps) => Promise<void>' is not assignable to type 'ActionHandler'.\\n  Type 'Promise<void>' is not assignable to type 'Promise<ActionResult>'.\\nsrc/prompt/steps/step-ask-question/handlers/handle-docker.ts(57,31): error TS2345: Argument of type 'AskQuestionArgs | undefined' is not assignable to parameter of type 'ExecutorArgs'.\\n  Type 'undefined' is not assignable to type 'ExecutorArgs'.\\n\",\"stderr\":\"Debugger attached.\\nDebugger attached.\\nWaiting for the debugger to disconnect...\\nWaiting for the debugger to disconnect...\\n\"}"
      }
    ]
  },
  {
    "type": "assistant",
    "text": "I will now fix the linting errors based on the provided output. The main issues seem to be: \n\n1.  **Missing `dockerode` type declarations**: This suggests that the `@types/dockerode` package might not be correctly installed or referenced. I will check `package.json` for its presence and ensure it's properly used.\n2.  **Incorrect type conversions in Docker executor files**: `run-command-executor.ts`, `start-container-executor.ts`, and `stop-container-executor.ts` are casting `ExecutorArgs` to more specific types without proper overlap. This indicates a potential type mismatch in how arguments are passed to the executors.\n3.  **Missing `featuresEnabled` export in `config.js`**: `handle-docker.ts` is trying to import `featuresEnabled` from `../../../../main/config.js`, but it seems it's not exported.\n4.  **Incorrect `ActionHandler` type assignment in `handle-docker.ts`**: The `handleStartContainer`, `handleRunCommand`, and `handleStopContainer` functions do not return `ActionResult`, leading to type errors.\n\nI will address these issues by:\n\n*   Ensuring `dockerode` types are available (by adding `@types/dockerode` to `package.json` if missing, or verifying its presence).\n*   Adjusting the type assertions in the Docker executor files to correctly handle `ExecutorArgs` and extract the necessary properties.\n*   Exporting `featuresEnabled` from `config.ts`.\n*   Modifying the Docker action handlers to return a consistent `ActionResult` type.\n\nAfter applying these fixes, I will run the lint command again to verify that all issues are resolved. I will provide the updated file contents.",
    "functionCalls": [
      {
        "name": "performAnalysis",
        "args": {
          "prompt": "Analyze the provided linting errors and propose a plan to fix them. Focus on type safety and proper module exports.",
          "analysisType": "code"
        }
      }
    ]
  },
  {
    "type": "user",
    "text": "Analyze the provided linting errors and propose a plan to fix them. Focus on type safety and proper module exports.",
    "functionResponses": [
      {
        "name": "performAnalysis",
        "content": ""
      }
    ]
  },
  {
    "type": "assistant",
    "text": "I have analyzed the linting errors and have a plan to address them. The errors indicate issues with missing type declarations, incorrect type conversions, and improper module exports. I will fix these by updating `package.json`, correcting the type assertions in the Docker executor files, exporting the `featuresEnabled` object from `config.ts`, and ensuring the Docker action handlers return the correct `ActionResult` type. After applying these changes, I will re-run the linting process to confirm that all issues have been resolved.\n\nHere are the files I will update:\n\n- `/Users/gtanczyk/src/genaicode/package.json`\n- `/Users/gtanczyk/src/genaicode/src/operations/docker/run-command-executor.ts`\n- `/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-executor.ts`\n- `/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-executor.ts`\n- `/Users/gtanczyk/src/genaicode/src/main/config.ts`\n- `/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-docker.ts`\n\nShould I proceed with these changes?",
    "functionCalls": [
      {
        "name": "analysisResult",
        "args": {
          "reasoning": "The user wants me to fix the linting errors. I've analyzed the output and identified the root causes.\n\n1.  **`Cannot find module 'dockerode' or its corresponding type declarations.`**: This is a classic missing type definition issue. The fix is to add `@types/dockerode` to `devDependencies` in `package.json`.\n2.  **`Conversion of type 'ExecutorArgs' to type '...' may be a mistake...`**: The `OperationExecutor` receives a generic `ExecutorArgs` object. The specific executors (`run-command-executor.ts`, `start-container-executor.ts`, `stop-container-executor.ts`) are trying to cast this directly to their specific argument types (`RunCommandArgs`, `StartContainerArgs`, `StopContainerArgs`). This is unsafe and incorrect because `ExecutorArgs` is just a `Record<string, unknown>`. The correct approach is to extract the required properties from the `args` object with proper type casting for each property.\n3.  **`Parameter 'err' implicitly has an 'any' type.`**: In `stop-container-executor.ts`, the `catch` block for `container.stop()` has an untyped `err` parameter. I'll add an `any` type to it explicitly to satisfy the linter, as the exact error type from `dockerode` might be complex to import here.\n4.  **`Module '\\\"../../../../main/config.js\\\"' has no exported member 'featuresEnabled'.`**: The `handle-docker.ts` file needs to check if the Docker feature is enabled. The `featuresEnabled` object is configured in `src/main/config.ts` but isn't exported. I need to add `export` to `rcConfig` in `config.ts` and then import `rcConfig` in `handle-docker.ts` to access `rcConfig.featuresEnabled`.\n5.  **`Type '...' is not assignable to type 'ActionHandler'.`**: The `ActionHandler` type expects a return value of `Promise<ActionResult>`. The Docker handlers in `handle-docker.ts` are currently `async` functions that don't return anything (`Promise<void>`). I need to make them return a simple `ActionResult`, like `{ next: 'continue' }`, to satisfy the type checker.\n6.  **`Argument of type 'AskQuestionArgs | undefined' is not assignable to parameter of type 'ExecutorArgs'.`**: This is happening because `params.askQuestionCall.args` can be `undefined`. I need to add a check to ensure `args` exists before passing it to the executor.\n7.  **`Property 'generateContent' does not exist on type 'ActionHandlerProps'. Did you mean 'generateContentFn'?`**: The property name is incorrect in `handle-docker.ts`. I need to change `params.generateContent` to `params.generateContentFn`.\n\nBased on this analysis, I will construct the necessary file updates.",
          "message": "I have analyzed the linting errors and have a plan to address them. The errors indicate issues with missing type declarations, incorrect type conversions, and improper module exports. I will fix these by updating `package.json`, correcting the type assertions in the Docker executor files, exporting the `featuresEnabled` object from `config.ts`, and ensuring the Docker action handlers return the correct `ActionResult` type. After applying these changes, I will re-run the linting process to confirm that all issues have been resolved.\n\nHere are the files I will update:\n\n- `/Users/gtanczyk/src/genaicode/package.json`\n- `/Users/gtanczyk/src/genaicode/src/operations/docker/run-command-executor.ts`\n- `/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-executor.ts`\n- `/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-executor.ts`\n- `/Users/gtanczyk/src/genaicode/src/main/config.ts`\n- `/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-docker.ts`\n\nShould I proceed with these changes?"
        }
      }
    ]
  },
  {
    "type": "user",
    "text": "yeap",
    "functionResponses": [
      {
        "name": "analysisResult",
        "content": ""
      }
    ]
  },
  {
    "type": "assistant",
    "text": "I will now generate the code changes summary based on our discussion. Please confirm if you are ready to proceed with applying these changes to your codebase."
  },
  {
    "type": "user",
    "text": "Confirmed. Proceed with code generation.\\n\\nPlease analyze the conversation so far and help plan the implementation:\n\n1. Review the conversation history and requirements\n2. Thoughtfully analyze the problem\n3. Create a step-by-step implementation plan\n4. List all files that will be affected during implementation\n\nRemember to:\n- Consider both direct and indirect dependencies\n- Think about how changes in one file might affect others\n- Include all necessary file paths\n- Explain your reasoning for each step\n- Consider edge cases and potential issues\n\nOutput the plan using `codegenPlanning` function provding all the required fields."
  },
  {
    "type": "assistant",
    "functionCalls": [
      {
        "name": "getSourceCode",
        "args": {
          "filePaths": [
            "@types/dockerode",
            "/Users/gtanczyk/src/genaicode/src/main/codegen-types.ts",
            "/Users/gtanczyk/src/ai-service/common-types.ts",
            "/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/step-ask-question-types.ts",
            "/Users/gtanczyk/src/main/config.ts",
            "/Users/gtanczyk/src/operations/operations-index.ts"
          ]
        }
      }
    ]
  },
  {
    "type": "user",
    "functionResponses": [
      {
        "name": "getSourceCode",
        "content": "{\"/Users/gtanczyk/src/genaicode/src/main/codegen-types.ts\":{\"fileId\":\"000114\",\"content\":\"import { GenerateContentFunction } from '../ai-service/common-types.js';\\nimport { FunctionCall, GenerateContentHook } from '../ai-service/common-types.js';\\nimport { FunctionDef } from '../ai-service/common-types.js';\\nimport { ActionHandler } from '../prompt/steps/step-ask-question/step-ask-question-types.js';\\nimport { AiServiceType, ServiceConfig } from '../ai-service/service-configurations-types.js';\\nexport { type AiServiceType, type ServiceConfig } from '../ai-service/service-configurations-types.js';\\n\\nexport type ImagenType = 'vertex-ai' | 'dall-e';\\n\\nexport interface UploadedImage {\\n  base64url: string;\\n  mediaType: 'image/jpeg' | 'image/png' | 'image/gif' | 'image/webp';\\n  originalName: string;\\n}\\n\\nexport interface CodegenOptions {\\n  explicitPrompt?: string;\\n  taskFile?: string;\\n  allowFileCreate?: boolean;\\n  allowFileDelete?: boolean;\\n  allowDirectoryCreate?: boolean;\\n  allowFileMove?: boolean;\\n  vision?: boolean;\\n  imagen?: ImagenType;\\n  aiService: AiServiceType;\\n\\n  disableContextOptimization?: boolean;\\n  temperature?: number;\\n  cheap?: boolean;\\n  dryRun?: boolean;\\n  verbose?: boolean;\\n  requireExplanations?: boolean;\\n  geminiBlockNone?: boolean;\\n  contentMask?: string;\\n  ignorePatterns?: string[];\\n  askQuestion: boolean;\\n  interactive?: boolean;\\n  ui?: boolean;\\n  uiPort?: number;\\n  uiFrameAncestors?: string[];\\n  disableCache?: boolean;\\n  muteNotifications?: boolean;\\n  historyEnabled?: boolean;\\n\\n  disableAiServiceFallback?: boolean;\\n  conversationSummaryEnabled?: boolean;\\n  images?: UploadedImage[];\\n  isDev?: boolean;\\n}\\n\\n/** Arguments of the codegen planning function call */\\nexport type CodegenPlanningArgs = {\\n  problemAnalysis: string;\\n  codeChanges: string;\\n  affectedFiles: {\\n    reason: string;\\n    filePath: string;\\n    dependencies: string[];\\n  }[];\\n};\\n\\n/** Arguments for codegen summary function call */\\nexport type CodegenSummaryArgs = {\\n  explanation: string;\\n  contextPaths: string[];\\n  fileUpdates: FileUpdate[];\\n};\\n\\n/** Arguments of the codegen execution function call */\\nexport interface FileUpdate {\\n  id: string;\\n  dependsOn?: string[];\\n  filePath: string;\\n  updateToolName: string;\\n  prompt: string;\\n  temperature?: number;\\n  cheap?: boolean;\\n  contextImageAssets?: string[];\\n}\\n\\n/**\\n * Arguments passed to the planning hooks\\n */\\nexport interface PlanningHookArgs {\\n  /** The original planning prompt */\\n  prompt: string;\\n  /** The options passed to the codegen */\\n  options: CodegenOptions;\\n  /** The result of the planning step, if in post-processing phase */\\n  result?: FunctionCall<CodegenPlanningArgs>;\\n}\\n\\n/**\\n * Hook function type for modifying the planning prompt before execution\\n * Return modified prompt or undefined to use original prompt\\n */\\nexport type PlanningPreHook = (args: PlanningHookArgs) => Promise<string | void>;\\n\\n/**\\n * Hook function type for post-processing the planning result\\n * Return modified result or undefined to use original result\\n */\\nexport type PlanningPostHook = (args: PlanningHookArgs) => Promise<FunctionCall<CodegenPlanningArgs> | void>;\\n\\ninterface ExecutorArgs {\\n  [key: string]: unknown;\\n}\\n\\nexport type OperationExecutor = (args: ExecutorArgs, options: CodegenOptions) => Promise<void>;\\n\\nexport type Operation = {\\n  executor: OperationExecutor;\\n  def: FunctionDef;\\n};\\n\\nexport interface Plugin {\\n  name: string;\\n  aiServices?: Record<\\n    string,\\n    {\\n      generateContent: GenerateContentFunction;\\n      serviceConfig: ServiceConfig;\\n    }\\n  >;\\n  /**\\n   * Hook that will be executed for each generateContent function call.\\n   */\\n  generateContentHook?: GenerateContentHook;\\n  operations?: Record<string, Operation>;\\n  actionHandlers?: Record<\\n    string,\\n    {\\n      /** The action handler implementation */\\n      handler: ActionHandler;\\n      /**\\n       * Description of what this action handler does.\\n       * This description will be included in the askQuestion function definition\\n       * to help the AI understand when to use this action.\\n       */\\n      description: string;\\n    }\\n  >;\\n  /**\\n   * Hook that will be executed before the planning prompt is sent to the model.\\n   * Can be used to modify the prompt.\\n   * Return modified prompt or undefined to use original prompt.\\n   */\\n  planningPreHook?: PlanningPreHook;\\n  /**\\n   * Hook that will be executed after the planning result is received from the model.\\n   * Can be used to modify the result.\\n   * Return modified result or undefined to use original result.\\n   */\\n  planningPostHook?: PlanningPostHook;\\n}\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/common-types.ts\",\"type\":\"local\",\"fileId\":\"000054\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/service-configurations-types.ts\",\"type\":\"local\",\"fileId\":\"000060\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/step-ask-question-handlers.ts\",\"type\":\"local\",\"fileId\":\"000326\"}]},\"/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/step-ask-question-types.ts\":{\"fileId\":\"000328\",\"content\":\"import { GenerateImageFunction } from '../../../ai-service/common-types.js';\\nimport { GenerateContentFunction } from '../../../ai-service/common-types.js';\\nimport { PromptItem } from '../../../ai-service/common-types.js';\\nimport { PromptItemImage } from '../../../ai-service/common-types.js';\\nimport { FunctionCall } from '../../../ai-service/common-types.js';\\nimport { CodegenOptions } from '../../../main/codegen-types.js';\\nimport { PluginActionType } from '../../../ai-service/service-configurations-types.js';\\n\\nexport type ActionType =\\n  | 'codeGeneration'\\n  | 'sendMessage'\\n  | 'generateImage'\\n  | 'requestPermissions'\\n  | 'readExternalFiles'\\n  | 'requestFilesContent'\\n  | 'removeFilesFromContext'\\n  | 'exploreExternalDirectories'\\n  | 'confirmCodeGeneration'\\n  | 'endConversation'\\n  | 'contextOptimization'\\n  | 'contextCompression'\\n  | 'searchCode'\\n  | 'lint'\\n  | 'updateFile'\\n  | 'performAnalysis'\\n  | 'createFile'\\n  | 'pullAppContext'\\n  | 'genaicodeHelp'\\n  | 'pushAppContext'\\n  | 'reasoningInference'\\n  | 'requestFilesFragments'\\n  | 'requestGitContext'\\n  | 'conversationGraph'\\n  | 'compoundAction'\\n  | PluginActionType;\\n\\ntype AskQuestionArgs = {\\n  actionType: ActionType;\\n  message: string;\\n  decisionMakingProcess?: string;\\n};\\n\\n/**\\n * Arguments for sendMessage action\\n */\\nexport type SendMessageArgs = { message: string };\\n\\n/**\\n * Arguments for help action\\n */\\nexport type GenaicodeHelpArgs = {\\n  reasoning: string;\\n  message: string;\\n};\\n\\n/**\\n * Arguments for pullAppContext action\\n */\\nexport type PullAppContextArgs = {\\n  reason: string;\\n  key: string;\\n};\\n\\n/**\\n * Arguments for pushAppContext action\\n */\\nexport type PushAppContextArgs = {\\n  reason: string;\\n  key: string;\\n  value: string;\\n};\\n\\nexport type GenerateImageArgs = {\\n  prompt: string;\\n  filePath: string;\\n  contextImagePath?: string;\\n  width: number;\\n  height: number;\\n  cheap: boolean;\\n};\\n\\nexport type RequestPermissionsArgs = Record<\\n  'allowDirectoryCreate' | 'allowFileCreate' | 'allowFileDelete' | 'allowFileMove' | 'enableVision' | 'enableImagen',\\n  boolean\\n>;\\n\\nexport type RequestFilesContentArgs = {\\n  filePaths: string[];\\n};\\n\\nexport type RequestFilesFragmentsArgs = {\\n  /** Array of file paths to extract fragments from */\\n  filePaths: string[];\\n  /** Prompt describing what information should be extracted from the files */\\n  fragmentPrompt: string;\\n};\\n\\nexport type ReadExternalFilesArgs = {\\n  externalFilePaths: string[];\\n  reason: string;\\n};\\n\\nexport type RemoveFilesFromContextArgs = {\\n  filePaths: string[];\\n};\\n\\nexport type ContextOptimizationArgs = {\\n  filePaths: string[];\\n};\\n\\n/**\\n * Arguments for the performAnalysis action\\n */\\nexport type PerformAnalysisArgs = {\\n  /** The type of analysis to perform */\\n  analysisType: 'code' | 'image' | 'security' | 'performance' | 'architecture' | 'general';\\n  /** The analysis prompt describing what needs to be analyzed */\\n  prompt: string;\\n};\\n\\n/**\\n * Results of the analysis operation\\n */\\nexport type AnalysisResultArgs = {\\n  /** Reasoning behind the analysis results */\\n  reasoning: string;\\n  /** User-friendly message summarizing results */\\n  message: string;\\n};\\n\\n/**\\n * Arguments for the searchCode action\\n */\\nexport type SearchCodeArgs = {\\n  /** The search query string */\\n  query: string;\\n  /** Optional glob patterns to include files */\\n  includePatterns?: string[];\\n  /** Optional glob patterns to exclude files */\\n  excludePatterns?: string[];\\n  /** Whether to search in file contents (default: true) */\\n  searchInContent?: boolean;\\n  /** Whether to search in file names (default: true) */\\n  searchInFilenames?: boolean;\\n  /** Case sensitive search (default: false) */\\n  caseSensitive?: boolean;\\n  /** Maximum number of results to return */\\n  maxResults?: number;\\n  /** Number of context lines to include around content matches */\\n  contextLines?: number;\\n};\\n\\n/**\\n * Arguments for the reasoningInference action\\n */\\nexport type ReasoningInferenceArgs = {\\n  /** The prompt to send to the reasoning model */\\n  prompt: string;\\n  /** The context paths to provide to the reasoning model */\\n  contextPaths: string[];\\n};\\n\\n/**\\n * Results from the reasoning model\\n */\\nexport type ReasoningInferenceResponseArgs = {\\n  /** The generated response text */\\n  response: string;\\n  /** The reasoning tokens provided by the model */\\n  reasoning: string;\\n};\\n\\nexport type RequestGitContextArgs = {\\n  requestType: 'commits' | 'fileChanges' | 'blame' | 'fileDiff'; // Added fileDiff\\n  filePath?: string; // Required for 'fileChanges', 'blame', and 'fileDiff'\\n  commitHash?: string; // Required for 'blame' and 'fileDiff'\\n  count?: number; // Applies mainly to 'commits' and 'fileChanges'\\n};\\n\\nexport type LintResult = {\\n  success: boolean;\\n  stdout?: string;\\n  stderr?: string;\\n};\\n\\n/**\\n * Represents a single action within a compound action batch.\\n */\\nexport interface CompoundActionItem {\\n  /** The name of the operation to execute (e.g., 'createFile', 'updateFile'). */\\n  name: string;\\n  /** The parameters required by the specified actionName. */\\n  args: Record<string, unknown>;\\n}\\n\\n/**\\n * Arguments for the internal `compoundActionList` function call.\\n */\\nexport type CompoundActionListArgs = {\\n  /** An array of actions to be executed as part of a compound operation. */\\n  actions: CompoundActionItem[];\\n  /** Summary of the actions to be performed. */\\n  summary?: string;\\n};\\n\\nexport type AskQuestionCall = FunctionCall<AskQuestionArgs>;\\nexport type PerformAnalysisCall = FunctionCall<PerformAnalysisArgs>;\\nexport type AnalysisResultCall = FunctionCall<AnalysisResultArgs>;\\nexport type ReasoningInferenceCall = FunctionCall<ReasoningInferenceArgs>;\\n\\nexport interface AssistantItem {\\n  type: 'assistant';\\n  text: string;\\n  functionCalls?: FunctionCall[];\\n  images?: PromptItemImage[];\\n  cache?: true;\\n}\\n\\nexport interface UserItem {\\n  type: 'user';\\n  text?: string;\\n  data?: Record<string, unknown>;\\n  functionResponses?: Array<{\\n    name: string;\\n    call_id: string | undefined;\\n    content: string | undefined;\\n  }>;\\n  images?: PromptItemImage[];\\n  cache?: true;\\n}\\n\\nexport interface ActionResult {\\n  breakLoop: boolean;\\n  stepResult?: FunctionCall[];\\n  items: Array<{\\n    assistant: AssistantItem;\\n    user: UserItem;\\n  }>;\\n  lintResult?: LintResult;\\n}\\n\\nexport type ActionHandlerProps = {\\n  askQuestionCall: AskQuestionCall;\\n  prompt: PromptItem[];\\n  options: CodegenOptions;\\n  generateContentFn: GenerateContentFunction;\\n  generateImageFn: GenerateImageFunction;\\n  waitIfPaused: () => Promise<void>;\\n};\\n\\nexport type ActionHandler = (props: ActionHandlerProps) => Promise<ActionResult>;\\n\",\"dependencies\":[{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/common-types.ts\",\"type\":\"local\",\"fileId\":\"000054\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/main/codegen-types.ts\",\"type\":\"local\",\"fileId\":\"000112\"},{\"path\":\"/Users/gtanczyk/src/genaicode/src/ai-service/service-configurations-types.ts\",\"type\":\"local\",\"fileId\":\"000060\"}]}}"
      }
    ]
  },
  {
    "type": "assistant",
    "functionCalls": [
      {
        "name": "codegenPlanning",
        "args": {
          "affectedFiles": [
            {
              "dependencies": [
                "@types/dockerode"
              ],
              "reason": "To fix the 'Cannot find module 'dockerode' or its corresponding type declarations' error by adding the '@types/dockerode' package to devDependencies.",
              "changeComplexity": "simple",
              "filePath": "/Users/gtanczyk/src/genaicode/package.json",
              "fileSize": "medium"
            },
            {
              "changeComplexity": "simple",
              "filePath": "/Users/gtanczyk/src/genaicode/src/operations/docker/start-container-executor.ts",
              "fileSize": "medium",
              "reason": "To fix the unsafe type conversion from 'ExecutorArgs' to 'StartContainerArgs' by safely extracting properties from the arguments object.",
              "dependencies": [
                "/Users/gtanczyk/src/genaicode/src/main/codegen-types.ts"
              ]
            },
            {
              "filePath": "/Users/gtanczyk/src/genaicode/src/operations/docker/run-command-executor.ts",
              "fileSize": "medium",
              "changeComplexity": "simple",
              "dependencies": [
                "/Users/gtanczyk/src/genaicode/src/main/codegen-types.ts",
                "/Users/gtanczyk/src/ai-service/common-types.ts"
              ],
              "reason": "To fix the unsafe type conversion from 'ExecutorArgs' to 'RunCommandArgs' by safely extracting properties from the arguments object and ensuring type correctness."
            },
            {
              "changeComplexity": "simple",
              "reason": "To resolve the unsafe type conversion to 'StopContainerArgs' and fix the 'implicitly has an 'any' type' error in the catch block.",
              "filePath": "/Users/gtanczyk/src/genaicode/src/operations/docker/stop-container-executor.ts",
              "fileSize": "medium",
              "dependencies": [
                "/Users/gtanczyk/src/genaicode/src/main/codegen-types.ts"
              ]
            },
            {
              "changeComplexity": "trivial",
              "filePath": "/Users/gtanczyk/src/genaicode/src/main/config.ts",
              "fileSize": "medium",
              "dependencies": [
                "/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-docker.ts"
              ],
              "reason": "To export the 'rcConfig' object, which contains the 'featuresEnabled' property needed by the Docker action handlers."
            },
            {
              "filePath": "/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/handlers/handle-docker.ts",
              "reason": "To fix multiple linting errors, including the missing 'featuresEnabled' import, incorrect action handler return types, and improper argument handling.",
              "fileSize": "small",
              "dependencies": [
                "/Users/gtanczyk/src/genaicode/src/prompt/steps/step-ask-question/step-ask-question-types.ts",
                "/Users/gtanczyk/src/main/config.ts",
                "/Users/gtanczyk/src/operations/operations-index.ts"
              ],
              "changeComplexity": "medium"
            },
            {
              "reason": "Needs to be updated with the new changes",
              "filePath": "/Users/gtanczyk/src/genaicode/GENAICODE_TRACKER.md",
              "dependencies": []
            }
          ],
          "codeChanges": "1.  **Modify `package.json`**: Add `'@types/dockerode': '^3.3.29'` to the `devDependencies` section to resolve the missing type declarations for the `dockerode` library.\n\n2.  **Update `start-container-executor.ts`**: Refactor the `executor` function to safely extract `image` and `name` from the `ExecutorArgs` object, eliminating the unsafe type assertion and improving type safety.\n\n3.  **Update `run-command-executor.ts`**: Adjust the `executor` to safely extract `containerId`, `cmd`, and `generateContent` from the `ExecutorArgs`. This will fix the unsafe conversion and ensure the `generateContent` function is correctly typed and handled.\n\n4.  **Update `stop-container-executor.ts`**: Modify the `executor` to safely extract `containerId` from `ExecutorArgs`. Also, explicitly type the error parameter in the `catch` block to `any` to resolve the implicit `any` type error.\n\n5.  **Update `src/main/config.ts`**: Add the `export` keyword to the `rcConfig` constant. This will make the configuration object, including the `featuresEnabled` property, available for other modules to import.\n\n6.  **Update `handle-docker.ts`**:\n    *   Import the `rcConfig` from `../../../../main/config.js` and update the `checkDockerEnabled` function to use `rcConfig.featuresEnabled.docker`.\n    *   Change `params.generateContent` to `params.generateContentFn` to correctly access the content generation function.\n    *   Ensure all action handlers (`handleStartContainer`, `handleRunCommand`, `handleStopContainer`) return a promise that resolves with `{ next: 'continue' }` to match the `ActionHandler` type definition.\n    *   Add checks to ensure `params.askQuestionCall.args` is not null or undefined before use.\n    *   Correctly pass arguments to the operation executors.",
          "problemAnalysis": "The linting process failed after implementing Docker container execution and a Lite LLM summarizer. The errors indicate several issues across the new files, including missing type definitions for the 'dockerode' package, unsafe type conversions in the Docker operation executors, an unexported configuration object preventing feature-flag checks, and incorrect type signatures and argument handling in the corresponding action handlers. These errors must be fixed to ensure the codebase is type-safe, robust, and adheres to the project's coding standards."
        }
      }
    ]
  },
  {
    "type": "user",
    "functionResponses": [
      {
        "name": "codegenPlanning"
      }
    ],
    "cache": true
  },
  {
    "type": "assistant",
    "text": "Planning phase completed. Would you like to proceed with the planned changes?"
  },
  {
    "type": "user",
    "text": "Accept planning and continue."
  },
  {
    "type": "assistant",
    "text": "I will now generate a summary of the proposed updates. Do you have any guidance or preferences for the summary?"
  },
  {
    "type": "user",
    "text": "# Guidelines for Code Generation Summary\n\n## Guidelines for Determining Update Tool\n\n## updateFile\n- **Use when**:\n  - Making significant, structural changes to a file that require a complete rewrite or substantial modifications across multiple parts of the file.\n  - Adding or removing large sections of code, or when the modifications are not easily expressed as a patch.\n  - The file is of reasonable size and does not approach token limits.\n  - The changes require a complete understanding of the file's context, and it's simpler to replace the entire content.\n\n- **Do not use when**:\n  - The changes are small and localized, and can be accurately described with a patch.\n  - The file is very large, and replacing the entire content would be inefficient or exceed token limits.\n  - The changes are simple line additions, deletions, or minor edits.\n  - The file has complex formatting that might be disturbed by a complete rewrite.\n\n## patchFile\n- **Use when**:\n  - Making very small, targeted, line-specific edits.\n  - Modifying a few lines in the file, adding or deleting code, or fixing minor errors.\n  - Working with large files where replacing the entire file would be inefficient.\n  - The changes are easily expressed as a patch with line numbers.\n  - There is no need to understand the entire file content.\n\n- **Do not use when**:\n  - The changes involve significant structural modifications or large content replacements.\n  - The required patch would be too complex or unreadable.\n  - The edits involve substantial changes that may affect other parts of the file.\n  - There are large blocks of code that need to be moved or changed.\n\n## createFile\n- **Use when**:\n  - Adding an entirely new file to the project, including new configuration files, code modules, or assets.\n  - Creating a new file that has no existing counterpart in the project.\n  - Implementing new features or components that require dedicated files.\n  - Creating a file in a new directory.\n\n- **Do not use when**:\n  - Modifying the contents of an existing file (use `updateFile` or `patchFile`).\n  - Renaming an existing file (use `moveFile`).\n  - Moving a file to a different location (use `moveFile`).\n\n## deleteFile\n- **Use when**:\n  - Removing a file that is no longer needed or is obsolete.\n  - Cleaning up unused code or configuration files.\n  - Removing a file before moving it to another location or replacing it with a new one.\n\n- **Do not use when**:\n  - Temporarily disabling code (use comments or conditional compilation instead).\n  - Making changes to the file content (use `updateFile` or `patchFile`).\n  - Moving the file to a new location (use `moveFile`).\n\n## moveFile\n- **Use when**:\n  - Changing the location of a file within the project, while preserving its content.\n  - Refactoring the project structure by moving files to different directories.\n  - Renaming the file or its directory.\n\n- **Do not use when**:\n  - Modifying the contents of the file (use `updateFile` or `patchFile`).\n  - Creating a new file with similar content (use `createFile`).\n  - Deleting the file (use `deleteFile`).\n\n## createDirectory\n- **Use when**:\n  - Creating a new directory in the project structure.\n  - Organizing files into logical groups.\n  - Preparing a location for new files to be created.\n\n- **Do not use when**:\n  - Modifying file contents (use `updateFile` or `patchFile`).\n  - Moving files (use `moveFile`).\n  - Deleting files or directories (use `deleteFile`).\n\n## downloadFile\n- **Use when**:\n  - Downloading a file from a remote source to the project.\n  - Fetching external resources required by the application.\n  - Integrating external data or assets.\n\n- **Do not use when**:\n  - Modifying existing files in the project (use `updateFile` or `patchFile`).\n  - Creating new files (use `createFile`).\n  - Moving files within the project (use `moveFile`).\n\n## splitImage\n- **Use when**:\n  - Dividing an image into smaller parts or regions.\n  - Extracting specific portions of an image for further analysis or processing.\n  - Preparing image assets for different display contexts.\n\n- **Do not use when**:\n  - The task does not involve image manipulation.\n  - Modifying files or code.\n  - The image does not need to be divided.\n\n## resizeImage\n- **Use when**:\n  - Adjusting the dimensions of an image.\n  - Optimizing image sizes for different platforms or resolutions.\n  - Preparing images for display in various UI components.\n\n- **Do not use when**:\n  - The task does not involve image manipulation.\n  - Modifying files or code.\n  - The image dimensions do not need to be changed.\n\n## imglyRemoveBackground\n- **Use when**:\n  - Removing the background from an image.\n  - Isolating the main subject of an image.\n  - Preparing images for use in creative contexts.\n\n- **Do not use when**:\n  - The task does not involve image manipulation.\n  - Modifying files or code.\n  - The image background does not need to be removed.\n\n## General Principles\n\n- **Choose the most precise tool**: Select the tool that best matches the required action (e.g., `patchFile` for small edits, `updateFile` for large changes).\n- **Minimize changes**: Avoid unnecessary modifications and use the tool that makes the smallest changes necessary.\n- **Preserve structure**: Maintain the existing code structure and formatting whenever possible, especially when using `patchFile`.\n- **Consider file size**: Use `patchFile` for large files and `updateFile` for smaller files to avoid token limits.\n- **Prioritize clarity**: Choose the tool that results in clear, maintainable code changes, and avoid complex patches when simpler options exist.\n- **Context awareness**: When making changes, ensure that the context is sufficient to understand the file and the changes.\n- **Ensure the directory structure**: When creating a new file, ensure the parent directory exists. If not create it first using `createDirectory`, and then create the file.\n\n"
  }
];