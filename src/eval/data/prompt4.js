import { getSystemPrompt } from '../../prompt/systemprompt';

export const DEBUG_PROMPT_4 = [
  {
    type: 'systemPrompt',
    systemPrompt: getSystemPrompt({
      verbose: false,
      askQuestion: true,
      interactive: false,
      ui: true,
      allowDirectoryCreate: false,
      allowFileCreate: false,
      allowFileDelete: false,
      allowFileMove: false,
    }),
  },
  {
    type: 'user',
    text: 'Hello, GenAIcode!',
  },
  {
    type: 'assistant',
    text: 'Hello there! I guess you have a task for me today. Before we start, could you please provide me with: \n      - the current source code of your application\n      - the image assets (if available)\n      - and conversational history (if available)\n      \n      Thanks',
    functionCalls: [
      {
        name: 'getSourceCode',
      },
      {
        name: 'getImageAssets',
      },
      {
        name: 'readHistory',
      },
    ],
  },
  {
    type: 'user',
    functionResponses: [
      {
        name: 'getSourceCode',
        content:
          '{"/Users/gtanczyk/src/codegen":{"README.md":{"summary":"GenAIcode: AI-powered code generation tool"},"knip.json":{"summary":"Configuration file for the Knip tool, used for code analysis and generation."},"package.json":{"summary":"Package configuration file for the GenAIcode tool, including dependencies, scripts, and other metadata."},"tsconfig.json":{"summary":"TypeScript config for GenAICode project."},"vitest.e2e.config.ts":{"summary":"Vitest config for e2e tests."},"vitest.unit.config.ts":{"summary":"Vite unit test configuration."},"vitest.workspace.ts":{"summary":"Vitest workspace config."}},"/Users/gtanczyk/src/codegen/bin":{"genaicode-dev.js":{"summary":"Development script for running GenAIcode tool."}},"/Users/gtanczyk/src/codegen/docs/design":{"configuration.md":{"summary":"Documentation on configuration options for the GenAIcode tool, including .genaicoderc file and lint command integration."},"context_optimization_feature.md":{"summary":"Design document for the context optimization feature in GenAIcode, aimed at reducing token usage."},"features.md":{"summary":"GenAIcode features: verbose mode, context optimization, explanations, vision, temperature control, configurable extensions, ignore paths, lint command integration, dry run, image generation, cheaper model, content mask, interactive clarification."},"file_operations.md":{"summary":"Overview of file operations supported by the GenAIcode tool, including creating, deleting, and moving files."},"genaicode_design_doc.md":{"summary":"Main design document for the GenAIcode tool, providing an overview of its architecture, components, and features."},"overview.md":{"summary":"GenAIcode overview: AI-powered code generation, multiple models, flexible configuration, dependency analysis, linting, vision, interactive/UI modes, context optimization."},"token_usage_reduction.md":{"summary":"Design document for implementing strategies to reduce token usage in the GenAIcode tool."}},"/Users/gtanczyk/src/codegen/docs/tasks":{"advanced_llm_prompt.md":{"summary":"Task description for analyzing and improving token reduction strategies in GenAIcode."},"ai_token_usage.md":{"summary":"Task to implement token usage measurement and cost estimation for AI services in GenAIcode."},"allow_directory_create.md":{"summary":"Task to add support for directory creation in the GenAIcode tool."},"codegen_design_doc.md":{"summary":"Task to create a comprehensive design document for the GenAIcode tool."},"configurable_extensions.md":{"summary":"Task to introduce configurable file extensions in the GenAIcode tool."},"content_mask.md":{"summary":"Task to add a content mask feature to the GenAIcode tool for managing token usage."},"context_shrinking.md":{"summary":"Task to implement a context shrinking feature in the GenAIcode tool for optimizing token usage."},"current_feedback.md":{"summary":"List of current feedback and improvements for the GenAIcode tool."},"interactive_cli.md":{"summary":"Task to add an interactive CLI mode to the GenAIcode tool."},"lint_step.md":{"summary":"Task to refactor the lint step in the GenAIcode tool for improved code quality."},"multimodal_frontend.md":{"summary":"Task to add multimodal functionality to the GenAIcode web UI, including image support."},"new_config_options.md":{"summary":"Task to add new configuration options to the .genaicoderc file in the GenAIcode tool."},"project_structure_refactor.md":{"summary":"Task to refactor the project structure of the GenAIcode tool for improved maintainability."},"step_ask_question_refactor.md":{"summary":"Task to refactor the `executeStepAskQuestion` function in the GenAIcode tool."},"usage_monitoring.md":{"summary":"Implementation plan for a usage monitoring feature in the GenAIcode tool."},"web_ui.md":{"summary":"Task to create a web-based user interface for the GenAIcode tool."}},"/Users/gtanczyk/src/codegen/e2e-tests":{"genaicode-ui.test.ts":{"summary":"End-to-end test for the GenAIcode web UI."}},"/Users/gtanczyk/src/codegen/examples":{"README.md":{"summary":"Examples of applications generated using the GenAIcode tool, including Python, Golang, Java, and vision-based examples."}},"/Users/gtanczyk/src/codegen/examples/genaicode_plugins":{"fake_ai_service.ts":{"summary":"Example plugin for a fake AI service in the GenAIcode tool."},"grok_ai_service.ts":{"summary":"Example plugin for the Grok AI service in the GenAIcode tool."},"nonsense_action_handler.ts":{"summary":"Plugin example: nonsense action handler"},"nonsense_operation.ts":{"summary":"Example plugin for a nonsense operation in the GenAIcode tool."}},"/Users/gtanczyk/src/codegen/examples/vite_genaicode_example":{"index.html":{"summary":"Example HTML file for the Vite GenAIcode plugin."},"vite.config.ts":{"summary":"Example Vite configuration file for the GenAIcode plugin."}},"/Users/gtanczyk/src/codegen/src/ai-service":{"ai-studio.ts":{"summary":"Generates content using Anthropic Claude model via Vertex AI."},"anthropic.ts":{"summary":"Generates content using Anthropic Claude model."},"chat-gpt.ts":{"summary":"Generates content using OpenAI chat model."},"common.test.ts":{"summary":"Unit tests for common functions in the AI service module of the GenAIcode tool."},"common.ts":{"content":"import assert from \'node:assert\';\\nimport { CodegenOptions, AiServiceType } from \'../main/codegen-types.js\';\\nimport { collectCost } from \'../main/common/cost-collector.js\';\\n\\nexport interface TokenUsage {\\n  inputTokens: number | undefined | null;\\n  outputTokens: number | undefined | null;\\n  totalTokens: number | undefined | null;\\n  cacheCreateTokens?: number | null;\\n  cacheReadTokens?: number | null;\\n}\\n\\nexport interface FunctionDef {\\n  name: string;\\n  description: string;\\n  parameters: {\\n    type: \'object\';\\n    properties: Record<string, unknown>;\\n    required: string[];\\n  };\\n}\\n\\nexport interface FunctionCall<T = Record<string, unknown>> {\\n  id?: string;\\n  name: string;\\n  args?: T;\\n}\\n\\nexport type PromptItemImage = {\\n  mediaType: \'image/jpeg\' | \'image/png\' | \'image/gif\' | \'image/webp\';\\n  base64url: string;\\n};\\n\\nexport interface PromptItem {\\n  type: \'systemPrompt\' | \'user\' | \'assistant\';\\n  systemPrompt?: string;\\n  text?: string;\\n  functionResponses?: {\\n    call_id?: string;\\n    name: string;\\n    content?: string;\\n    isError?: boolean;\\n  }[];\\n  images?: PromptItemImage[];\\n  functionCalls?: FunctionCall[];\\n  cache?: boolean;\\n}\\n\\nexport type GenerateContentArgs = [\\n  prompt: PromptItem[],\\n  functionDefs: FunctionDef[],\\n  requiredFunctionName: string | null,\\n  temperature: number,\\n  cheap: boolean,\\n  options: CodegenOptions,\\n];\\n\\nexport type GenerateContentFunction = (...args: GenerateContentArgs) => Promise<FunctionCall[]>;\\n\\nexport type GenerateImageFunction = (\\n  prompt: string,\\n  contextImagePath: string | undefined,\\n  size: { width: number; height: number },\\n  cheap: boolean,\\n) => Promise<string>;\\n\\ninterface CostInfo {\\n  aiService: AiServiceType;\\n  usage: TokenUsage;\\n  inputCostPerToken: number;\\n  outputCostPerToken: number;\\n  cheap: boolean;\\n}\\n\\n/**\\n * Common function to print token usage and estimated cost\\n * @param {CostInfo} costInfo Cost information object\\n */\\nexport function printTokenUsageAndCost(costInfo: CostInfo): void {\\n  const { usage, inputCostPerToken, outputCostPerToken, cheap } = costInfo;\\n  console.log(\'Token Usage:\', usage);\\n\\n  const inputCost =\\n    ((usage.inputTokens ?? 0) * inputCostPerToken +\\n      (usage.cacheCreateTokens ?? 0) * inputCostPerToken * 1.25 +\\n      (usage.cacheReadTokens ?? 0) * inputCostPerToken * 0.2) *\\n    (cheap ? 0.1 : 1);\\n  const outputCost = (usage.outputTokens ?? 0) * outputCostPerToken;\\n  const totalCost = inputCost + outputCost;\\n\\n  console.log(\'Cost:\', totalCost.toFixed(6), \' USD\');\\n\\n  collectCost(totalCost, usage.inputTokens ?? 0, usage.outputTokens ?? 0, costInfo.aiService, cheap);\\n}\\n\\n/**\\n * Common function to process function calls and explanations\\n */\\nexport function processFunctionCalls(functionCalls: FunctionCall[], functionDefs: FunctionDef[]): FunctionCall[] {\\n  const unknownFunctionCalls = functionCalls.filter((call) => !functionDefs.some((fd) => fd.name === call.name));\\n  assert(\\n    unknownFunctionCalls.length === 0,\\n    \'Unknown function name: \' + unknownFunctionCalls.map((call) => call.name).join(\', \'),\\n  );\\n\\n  console.log(\\n    \'Explanations:\',\\n    functionCalls.filter((fn) => fn.name === \'explanation\').map((call) => call.args?.text),\\n  );\\n\\n  return functionCalls; // .filter((fn) => fn.name !== \'explanation\');\\n}\\n"},"dall-e.ts":{"summary":"Implementation of the DALL-E image generation service in the GenAIcode tool."},"unescape-function-call.test.ts":{"summary":"Unit tests for the function call unescaping utility in the GenAIcode tool."},"unescape-function-call.ts":{"summary":"Utility function to unescape function call arguments in the GenAIcode tool."},"vertex-ai-claude.ts":{"summary":"Generates content using Anthropic Claude model via Vertex AI."},"vertex-ai-imagen.ts":{"summary":"Implementation of the Vertex AI Imagen image generation service in the GenAIcode tool."},"vertex-ai.ts":{"summary":"Generates content using Gemini Pro model via Vertex AI."}},"/Users/gtanczyk/src/codegen/src/cli":{"cli-options.test.ts":{"summary":"Unit tests for the CLI options in the GenAIcode tool."},"cli-options.ts":{"summary":"CLI options: help, dry run, disallow file operations, AI service, prompt, task file, verbose prompt, disable explanations, disable context optimization, Gemini settings, disable lint, temperature, vision, imagen, cheap, content mask, ignore pattern, disable cache, disable ask question."},"cli-params.test.ts":{"summary":"Unit tests for the CLI parameter handling in the GenAIcode tool."},"cli-params.ts":{"summary":"CLI parameters: parse and validate parameters, autodetect AI service"},"service-autodetect.test.ts":{"summary":"Tests for auto-detecting AI service from env vars."},"service-autodetect.ts":{"summary":"Detects AI service based on env vars."},"validate-cli-params.test.ts":{"summary":"CLI parameter validation tests"},"validate-cli-params.ts":{"summary":"Validates CLI parameters, checks for allowed params, and handles errors."}},"/Users/gtanczyk/src/codegen/src/eval":{"codegen-summary.test.ts":{"summary":"This file contains tests for the codegen-summary feature, which generates a summary of planned code updates."},"prompt-debug.test.ts":{"summary":"Tests different AI models for generating content."}},"/Users/gtanczyk/src/codegen/src/files":{"cache-file.ts":{"summary":"Caching utilities for source code and image assets."},"file-utils.test.ts":{"summary":"Tests for file utility functions."},"file-utils.ts":{"summary":"Utility functions for working with file paths."},"find-files.ts":{"summary":"Finds source files and image assets in the project."},"path-utils.ts":{"summary":"Utility functions for working with file paths."},"read-files.test.ts":{"summary":"Unit tests for file reading utilities"},"read-files.ts":{"summary":"Utilities to read source code and image assets"},"source-code-tree.ts":{"summary":"Defines SourceCodeTree type, getSourceCodeTree and parseSourceCodeTree functions."},"temp-buffer.ts":{"summary":"Temporary storage for image data."},"update-files.ts":{"summary":"Updates files based on code generation results."}},"/Users/gtanczyk/src/codegen/src/images":{"ensure-alpha.ts":{"summary":"Ensures alpha channel for images."},"imgly-remove-background.ts":{"summary":"Removes background from images using @imgly/background-removal-node."},"resize-image.ts":{"summary":"Resizes images."},"split-image.ts":{"summary":"Splits images into parts."}},"/Users/gtanczyk/src/codegen/src":{"index.ts":{"summary":"Exports main codegen types and functions."}},"/Users/gtanczyk/src/codegen/src/main":{"codegen-types.ts":{"content":"import { FunctionDef, GenerateContentFunction } from \'../ai-service/common\';\\nimport { ActionHandler } from \'../prompt/steps/step-ask-question/step-ask-question-types\';\\n\\n/** Example: {@link ../../examples/genaicode_plugins/grok_ai_service.ts} */\\nexport type PluginAiServiceType = `plugin:${string}`;\\n\\n/** Example: {@link ../../examples/genaicode_plugins/nonsense_action_handlers.ts} */\\nexport type PluginActionType = `plugin:${string}`;\\n\\nexport type AiServiceType =\\n  | \'vertex-ai\'\\n  | \'ai-studio\'\\n  | \'vertex-ai-claude\'\\n  | \'chat-gpt\'\\n  | \'anthropic\'\\n  | PluginAiServiceType;\\n\\nexport type ImagenType = \'vertex-ai\' | \'dall-e\';\\n\\nexport interface UploadedImage {\\n  base64url: string;\\n  mediaType: \'image/jpeg\' | \'image/png\' | \'image/gif\' | \'image/webp\';\\n  originalName: string;\\n}\\n\\nexport interface CodegenOptions {\\n  explicitPrompt?: string;\\n  taskFile?: string;\\n  allowFileCreate?: boolean;\\n  allowFileDelete?: boolean;\\n  allowDirectoryCreate?: boolean;\\n  allowFileMove?: boolean;\\n  vision?: boolean;\\n  imagen?: ImagenType;\\n  aiService: AiServiceType;\\n\\n  disableContextOptimization?: boolean;\\n  temperature?: number;\\n  cheap?: boolean;\\n  dryRun?: boolean;\\n  verbose?: boolean;\\n  requireExplanations?: boolean;\\n  geminiBlockNone?: boolean;\\n  disableInitialLint?: boolean;\\n  contentMask?: string;\\n  ignorePatterns?: string[];\\n  askQuestion?: boolean;\\n  interactive?: boolean;\\n  ui?: boolean;\\n  uiPort?: number;\\n  uiFrameAncestors?: string[];\\n  disableCache?: boolean;\\n  historyEnabled?: boolean;\\n\\n  disableAiServiceFallback?: boolean;\\n  conversationSummaryEnabled?: boolean;\\n  images?: UploadedImage[];\\n  isDev?: boolean;\\n}\\n\\ninterface ExecutorArgs {\\n  [key: string]: unknown;\\n}\\n\\nexport type OperationExecutor = (args: ExecutorArgs, options: CodegenOptions) => Promise<void>;\\n\\nexport type Operation = {\\n  executor: OperationExecutor;\\n  def: FunctionDef;\\n};\\n\\nexport interface Plugin {\\n  name: string;\\n  aiServices?: Record<string, GenerateContentFunction>;\\n  operations?: Record<string, Operation>;\\n  actionHandlers?: Record<\\n    string,\\n    {\\n      /** The action handler implementation */\\n      handler: ActionHandler;\\n      /**\\n       * Description of what this action handler does.\\n       * This description will be included in the askQuestion function definition\\n       * to help the AI understand when to use this action.\\n       */\\n      description: string;\\n    }\\n  >;\\n}\\n"},"codegen-utils.ts":{"summary":"Utility functions for codegen."},"codegen.test.ts":{"summary":"Unit tests for codegen functionality"},"codegen.ts":{"summary":"Main code generation logic: handles different modes, lint checks, AI services, and updates files."},"config-lib.test.ts":{"summary":"Tests for the configuration library."},"config-lib.ts":{"summary":"Reads and parses the .genaicoderc configuration file."},"config.ts":{"content":"import { findRcFile, parseRcFile, RcConfig, ImportantContext, ModelOverrides } from \'./config-lib.js\';\\nimport { loadPlugins } from \'./plugin-loader.js\';\\nimport path from \'path\';\\n\\n// Default extensions if not specified in .genaicoderc\\nconst DEFAULT_EXTENSIONS: string[] = [\\n  \'.md\',\\n  \'.js\',\\n  \'.ts\',\\n  \'.tsx\',\\n  \'.css\',\\n  \'.scss\',\\n  \'.py\',\\n  \'.go\',\\n  \'.c\',\\n  \'.h\',\\n  \'.cpp\',\\n  \'.txt\',\\n  \'.html\',\\n  \'.txt\',\\n  \'.json\',\\n];\\n\\n// A list of paths that are ignored by default\\nconst DEFAULT_IGNORE_PATHS: string[] = [\'node_modules\', \'build\', \'dist\', \'package-lock.json\', \'coverage\'];\\n\\n// Read and parse the configuration\\nconst rcFilePath: string = await findRcFile();\\nexport const rcConfig: RcConfig = parseRcFile(rcFilePath);\\n\\n// Load plugins\\nawait loadPlugins(rcConfig);\\n\\n// Use extensions from .genaicoderc if available, otherwise use default\\nexport const sourceExtensions: string[] = rcConfig.extensions || DEFAULT_EXTENSIONS;\\n\\n// Image extensions (driven by ai service limitations)\\nexport const IMAGE_ASSET_EXTENSIONS: string[] = [\'.png\', \'.jpg\', \'.jpeg\', \'.gif\', \'.webp\'];\\n\\n// Export ignore paths\\nexport const ignorePaths: string[] = rcConfig.ignorePaths ?? DEFAULT_IGNORE_PATHS;\\n\\n// Process and export important context\\nexport const importantContext: ImportantContext = processImportantContext(rcConfig.importantContext);\\n\\n// Export model overrides\\nexport const modelOverrides: ModelOverrides = rcConfig.modelOverrides ?? {};\\n\\nfunction processImportantContext(context: ImportantContext | undefined): ImportantContext {\\n  if (!context) return { textPrompts: [], files: [] };\\n\\n  return {\\n    textPrompts: context.textPrompts || [],\\n    files: (context.files || []).map((file) => path.resolve(rcConfig.rootDir, file)),\\n  };\\n}\\n\\nconsole.log(\'Detected codegen configuration\', rcConfig);\\nconsole.log(\'Root dir:\', rcConfig.rootDir);\\nconsole.log(\'Important context:\', importantContext);\\nconsole.log(\'Model overrides:\', modelOverrides);\\n"},"plugin-loader.ts":{"content":"import path from \'path\';\\nimport { Operation, Plugin, PluginActionType, PluginAiServiceType } from \'./codegen-types.js\';\\nimport { GenerateContentFunction } from \'../ai-service/common.js\';\\nimport { ActionHandler } from \'../prompt/steps/step-ask-question/step-ask-question-types.js\';\\nimport { RcConfig } from \'./config-lib.js\';\\n\\n// Global storage for registered AI services and operations\\nconst registeredAiServices: Map<PluginAiServiceType, GenerateContentFunction> = new Map();\\nconst registeredOperations: Record<string, Operation> = {};\\nconst registeredActionHandlerDescriptions: Map<PluginActionType, string> = new Map();\\nconst registeredActionHandlers: Map<PluginActionType, ActionHandler> = new Map();\\n\\nexport async function loadPlugins(rcConfig: RcConfig): Promise<void> {\\n  if (!rcConfig.plugins || rcConfig.plugins.length === 0) {\\n    console.log(\'No plugins specified in the configuration.\');\\n    return;\\n  }\\n\\n  for (let pluginPath of rcConfig.plugins) {\\n    try {\\n      pluginPath = path.isAbsolute(pluginPath) ? pluginPath : path.join(rcConfig.rootDir, pluginPath);\\n      console.log(\'Loading plugin:\', pluginPath);\\n      const plugin = (await import(pluginPath)).default as Plugin;\\n\\n      if (plugin.aiServices) {\\n        Object.entries(plugin.aiServices).forEach(([name, service]) => {\\n          registeredAiServices.set(`plugin:${name}`, service);\\n          console.log(`Registered AI service: ${name}`);\\n        });\\n      }\\n\\n      if (plugin.operations) {\\n        Object.entries(plugin.operations).forEach(([name, operation]) => {\\n          registeredOperations[name] = operation;\\n          console.log(`Registered operation: ${name}`);\\n        });\\n      }\\n\\n      if (plugin.actionHandlers) {\\n        Object.entries(plugin.actionHandlers).forEach(([name, { handler, description }]) => {\\n          registeredActionHandlers.set(`plugin:${name}`, handler);\\n          registeredActionHandlerDescriptions.set(`plugin:${name}`, description);\\n          console.log(`Registered action handler: ${name}`);\\n        });\\n      }\\n\\n      console.log(`Successfully loaded plugin: ${pluginPath}`);\\n    } catch (error) {\\n      console.error(`Failed to load plugin: ${pluginPath}`, error);\\n    }\\n  }\\n}\\n\\nexport function getRegisteredAiServices(): Map<PluginAiServiceType, GenerateContentFunction> {\\n  return registeredAiServices;\\n}\\n\\nexport function getRegisteredOperations(): Operation[] {\\n  return Object.values(registeredOperations);\\n}\\n\\nexport function getRegisteredActionHandlers(): Map<PluginActionType, ActionHandler> {\\n  return registeredActionHandlers;\\n}\\n\\nexport function getRegisteredActionHandlerDescriptions(): Map<PluginActionType, string> {\\n  return registeredActionHandlerDescriptions;\\n}\\n"}},"/Users/gtanczyk/src/codegen/src/main/common":{"content-bus-types.ts":{"summary":"Types for the content bus."},"content-bus.ts":{"summary":"Handles content updates and messaging."},"cost-collector.ts":{"summary":"Collects and reports usage metrics for AI services."},"user-actions.ts":{"summary":"Handles user input and confirmation."}},"/Users/gtanczyk/src/codegen/src/main/interactive":{"codegen-interactive.test.ts":{"summary":"Tests for interactive code generation mode"},"codegen-interactive.ts":{"summary":"Interactive code generation mode: handles user actions and runs code generation"},"codegen-worker.ts":{"summary":"Runs codegen in a separate process with interrupt handling."},"common.ts":{"summary":"Common functions for interactive mode: welcome message, user action selection, error handling"},"configure.ts":{"summary":"Configuration options for interactive mode"},"error-handling.ts":{"summary":"Handles errors in the interactive mode."},"help.ts":{"summary":"Help message for interactive mode"},"select-ai-service.ts":{"summary":"Allows selecting the AI service in the interactive mode."},"task-file.ts":{"summary":"Task file handling for interactive mode"},"text-prompt.ts":{"summary":"Text prompt handling for interactive mode"},"user-action-handlers.ts":{"summary":"Implements user input and confirmation handlers"},"user-interrupt.ts":{"summary":"Handles user interrupts in the interactive mode."}},"/Users/gtanczyk/src/codegen/src/main/ui/backend":{"api-utils.ts":{"summary":"Utility functions for the API."},"api.ts":{"summary":"API routes for code generation"},"server.ts":{"summary":"Starts the web server for the UI."},"service.ts":{"summary":"Backend service for UI: handles code generation requests, pausing, interrupting, and providing status updates."}},"/Users/gtanczyk/src/codegen/src/main/ui":{"codegen-ui.ts":{"summary":"Runs the web UI for codegen."},"user-action-handlers.ts":{"summary":"Registers user input and confirmation handlers"}},"/Users/gtanczyk/src/codegen/src/main/ui/common":{"api-types.ts":{"summary":"Defines types for the web UI API."}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/api":{"api-client.ts":{"summary":"Provides API client for interacting with the backend"}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/components":{"app-handlers.tsx":{"summary":"Handlers for app-level actions like execute, pause, resume"},"app-layout.tsx":{"summary":"Defines the layout of the application, including the header, usage display, and main content area."},"app-state.tsx":{"summary":"Manages app state, including execution status and usage"},"chat-interface.tsx":{"summary":"Renders the chat interface with message history and question handling"},"info-icon.tsx":{"summary":"Renders an information icon that displays the RcConfig settings in a tooltip."},"progress-indicator.tsx":{"summary":"Renders the progress indicator, including the interrupt and pause/resume buttons."},"question-handler.tsx":{"summary":"React component for handling user questions and code generation confirmation."},"styled-textarea.tsx":{"summary":"Renders a styled textarea component with automatic height adjustment and image pasting support."},"theme-toggle.tsx":{"summary":"Renders a button to toggle the application theme between light and dark mode."},"unread-messages-notification.tsx":{"summary":"Renders a notification for unread messages in the chat interface."},"usage-display.tsx":{"summary":"Renders the usage display, including the cost, RPM, RPD, TPM, and TPD metrics."}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/components/chat":{"data-container.tsx":{"summary":"Renders data in a formatted container."},"message-container.tsx":{"summary":"Renders a chat message, including user/assistant messages, images, and data."},"system-message-container.tsx":{"summary":"Renders a system message container, including collapsible execution details and data."}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/components/chat/styles":{"chat-interface-styles.ts":{"summary":"Defines styles for the chat interface, including the chat container, messages container, and iteration header."},"data-container-styles.ts":{"summary":"Defines styles for the data container component."},"message-container-styles.ts":{"summary":"Defines styles for the message container component."},"system-message-container-styles.ts":{"summary":"Defines the styles for the system message container component"}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/components/input-area":{"ai-service-selector.tsx":{"summary":"Dropdown to select AI service"},"button-container.tsx":{"summary":"Renders buttons for submitting, uploading images, and configuring AI service"},"codegen-options-form.tsx":{"summary":"Form to configure codegen options"},"image-upload.tsx":{"summary":"Handles the upload and preview of images for the input area."},"input-area.tsx":{"summary":"Handles user input, image uploads, and code generation options"}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app":{"genaicode-app.tsx":{"summary":"Main application component that orchestrates the UI"}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/hooks":{"merged-messages.ts":{"summary":"Provides a custom hook to merge chat messages into iterations, including system messages and conversation summaries."}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/theme":{"global-style.ts":{"summary":"Defines the global styles for the application, including the background image and color scheme."},"styled-components.d.ts":{"summary":"Type definitions for styled-components."},"theme.ts":{"summary":"Defines the light and dark themes for the application, including the color scheme and background image."}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend":{"index.html":{"summary":"Defines the HTML structure of the application, including the root element and script import."},"index.js":{"summary":"Renders the main application component to the DOM."},"tsconfig.json":{"summary":"Defines the TypeScript configuration for the frontend application."},"vite-env.d.ts":{"summary":"Provides type definitions for the Vite environment."}},"/Users/gtanczyk/src/codegen/src/operations/create-directory":{"create-directory-def.ts":{"summary":"Defines the function definition for creating a new directory."},"create-directory-executor.ts":{"summary":"Implements the logic for creating a new directory."}},"/Users/gtanczyk/src/codegen/src/operations/create-file":{"create-file-def.ts":{"summary":"Defines the function definition for creating a new file."},"create-file-executor.ts":{"summary":"Implements the logic for creating a new file."}},"/Users/gtanczyk/src/codegen/src/operations/delete-file":{"delete-file-def.ts":{"summary":"Defines the function definition for deleting a file."},"delete-file-executor.ts":{"summary":"Implements the logic for deleting a file."}},"/Users/gtanczyk/src/codegen/src/operations/download-file":{"download-file-def.ts":{"summary":"Defines the function definition for downloading a file."},"download-file-executor.ts":{"summary":"Implements the logic for downloading a file."}},"/Users/gtanczyk/src/codegen/src/operations/imgly-remove-background":{"imgly-remove-background-def.ts":{"summary":"Defines the function definition for removing the background from an image using the @imgly/background-removal-node library."},"imgly-remove-background-executor.ts":{"summary":"Implements the logic for removing the background from an image using the @imgly/background-removal-node library."}},"/Users/gtanczyk/src/codegen/src/operations/move-file":{"move-file-def.ts":{"summary":"Defines the function definition for moving a file from one location to another."},"move-file-executor.ts":{"summary":"Implements the logic for moving a file from one location to another."}},"/Users/gtanczyk/src/codegen/src/operations":{"operations-index.ts":{"summary":"Provides a centralized index of all available operations, including their executors and definitions."}},"/Users/gtanczyk/src/codegen/src/operations/patch-file":{"patch-file-def.ts":{"summary":"Defines the function definition for partially updating a file\'s content."},"patch-file-executor.ts":{"summary":"Implements the logic for partially updating a file\'s content."}},"/Users/gtanczyk/src/codegen/src/operations/resize-image":{"resize-image-def.ts":{"summary":"Defines the function definition for resizing an image to a specified size."},"resize-image-executor.ts":{"summary":"Implements the logic for resizing an image to a specified size."}},"/Users/gtanczyk/src/codegen/src/operations/split-image":{"split-image-def.ts":{"summary":"Defines function to split image into multiple parts and save them as separate files."},"split-image-executor.ts":{"summary":"Implements function to split image into multiple parts and save them as separate files."}},"/Users/gtanczyk/src/codegen/src/operations/update-file":{"update-file-def.ts":{"summary":"Defines function to update a file with new content."},"update-file-executor.ts":{"summary":"Implements function to update a file with new content."}},"/Users/gtanczyk/src/codegen/src/prompt":{"ai-service-fallback.ts":{"summary":"Handles AI service fallback when rate limit is exceeded"},"function-calling-validate.ts":{"summary":"Validates function calls to ensure they match the expected schema"},"function-calling.ts":{"summary":"This file defines the function definitions for the function calling feature, which allows the AI model to invoke various functions during the code generation process."},"limits.test.ts":{"summary":"Unit tests for prompt token limits"},"limits.ts":{"summary":"Defines functions to verify prompt and source code token limits"},"prompt-codegen.test.ts":{"summary":"Unit tests for codegen prompt generation"},"prompt-codegen.ts":{"summary":"Generates code generation prompt and lint fix prompt"},"prompt-service-ask-question.test.ts":{"summary":"Unit tests for prompt service with askQuestion"},"prompt-service.test.ts":{"summary":"Unit tests for prompt service"},"prompt-service.ts":{"content":"import assert from \'node:assert\';\\nimport fs from \'fs\';\\nimport mime from \'mime-types\';\\n\\nimport { getSystemPrompt } from \'./systemprompt.js\';\\nimport { getFunctionDefs } from \'./function-calling.js\';\\nimport { getSourceCode, getImageAssets } from \'../files/read-files.js\';\\nimport {\\n  PromptItem,\\n  FunctionDef,\\n  FunctionCall,\\n  GenerateContentFunction,\\n  GenerateImageFunction,\\n} from \'../ai-service/common.js\';\\nimport { importantContext } from \'../main/config.js\';\\nimport { AiServiceType, CodegenOptions, ImagenType } from \'../main/codegen-types.js\';\\nimport { executeStepAskQuestion } from \'./steps/step-ask-question/step-ask-question.js\';\\nimport { validateAndRecoverSingleResult } from \'./steps/step-validate-recover.js\';\\nimport { executeStepVerifyPatch } from \'./steps/step-verify-patch.js\';\\nimport { executeStepGenerateImage } from \'./steps/step-generate-image.js\';\\nimport { executeStepContextOptimization } from \'./steps/step-context-optimization.js\';\\nimport { StepResult } from \'./steps/steps-types.js\';\\nimport { CodegenPrompt } from \'./prompt-codegen.js\';\\nimport { putSystemMessage } from \'../main/common/content-bus.js\';\\nimport { handleAiServiceFallback } from \'./ai-service-fallback.js\';\\nimport { summarizeSourceCode } from \'./steps/step-summarization.js\';\\nimport { executeStepHistoryUpdate, getCurrentHistory } from \'./steps/step-history-update.js\';\\nimport { executeStepGenerateSummary } from \'./steps/step-generate-summary.js\';\\nimport { getSourceCodeTree } from \'../files/source-code-tree.js\';\\nimport {\\n  INITIAL_GREETING,\\n  REQUEST_SOURCE_CODE,\\n  SOURCE_CODE_RESPONSE,\\n  READY_TO_ASSIST,\\n  getPartialPromptTemplate,\\n} from \'./static-prompts.js\';\\nimport { executeStepCodegenPlanning } from \'./steps/step-codegen-planning.js\';\\n\\n/** A function that communicates with model using */\\nexport async function promptService(\\n  generateContentFns: Record<AiServiceType, GenerateContentFunction>,\\n  generateImageFns: Record<ImagenType, GenerateImageFunction>,\\n  codegenPrompt: CodegenPrompt,\\n  waitIfPaused: () => Promise<void> = () => Promise.resolve(),\\n): Promise<FunctionCall[]> {\\n  const generateContentFn: GenerateContentFunction = async (...args) => {\\n    return await handleAiServiceFallback(\\n      generateContentFns,\\n      codegenPrompt.options.aiService,\\n      codegenPrompt.options,\\n      ...args,\\n    );\\n  };\\n\\n  const generateImageFn: GenerateImageFunction = (...args) => {\\n    assert(codegenPrompt.options.imagen, \'imagen value must be provided\');\\n    return generateImageFns[codegenPrompt.options.imagen](...args);\\n  };\\n\\n  const { result, prompt } = await executePromptService(\\n    generateContentFn,\\n    generateImageFn,\\n    codegenPrompt,\\n    waitIfPaused,\\n  );\\n\\n  if (codegenPrompt.options.historyEnabled) {\\n    await executeStepHistoryUpdate(generateContentFn, prompt, codegenPrompt.options);\\n  }\\n\\n  return result;\\n}\\n\\nasync function executePromptService(\\n  generateContentFn: GenerateContentFunction,\\n  generateImageFn: GenerateImageFunction,\\n  codegenPrompt: CodegenPrompt,\\n  waitIfPaused: () => Promise<void> = () => Promise.resolve(),\\n): Promise<{ result: FunctionCall[]; prompt: PromptItem[] }> {\\n  const messages = prepareMessages(codegenPrompt);\\n\\n  // First stage: summarize the source code\\n  if (!codegenPrompt.options.disableContextOptimization) {\\n    await summarizeSourceCode(\\n      generateContentFn,\\n      getSourceCode({ forceAll: true }, codegenPrompt.options),\\n      codegenPrompt.options,\\n    );\\n  }\\n\\n  // Second stage: generate code generation summary, which should not take a lot of output tokens\\n  const getSourceCodeRequest: FunctionCall = { name: \'getSourceCode\' };\\n\\n  const prompt: PromptItem[] = [\\n    { type: \'systemPrompt\', systemPrompt: getSystemPrompt(codegenPrompt.options) },\\n    { type: \'user\', text: INITIAL_GREETING },\\n    {\\n      type: \'assistant\',\\n      text: REQUEST_SOURCE_CODE,\\n      functionCalls: [\\n        getSourceCodeRequest,\\n        ...(codegenPrompt.options.vision ? [{ name: \'getImageAssets\' }] : []),\\n        ...(codegenPrompt.options.historyEnabled ? [{ name: \'readHistory\' }] : []),\\n      ],\\n    },\\n  ];\\n\\n  const getSourceCodeResponse: PromptItem = {\\n    type: \'user\',\\n    functionResponses: [\\n      { name: \'getSourceCode\', content: messages.sourceCode },\\n      ...(codegenPrompt.options.vision ? [{ name: \'getImageAssets\', content: messages.imageAssets }] : []),\\n      ...(codegenPrompt.options.historyEnabled ? [{ name: \'readHistory\', content: getCurrentHistory() }] : []),\\n    ],\\n    text: SOURCE_CODE_RESPONSE,\\n    cache: true,\\n  };\\n  prompt.push(getSourceCodeResponse);\\n\\n  prompt.push(\\n    {\\n      type: \'assistant\',\\n      text: READY_TO_ASSIST,\\n    },\\n    {\\n      type: \'user\',\\n      text: codegenPrompt.prompt,\\n    },\\n  );\\n\\n  // Add uploaded images to the prompt if available\\n  if (codegenPrompt.options.images && codegenPrompt.options.images.length > 0 && codegenPrompt.options.vision) {\\n    prompt.slice(-1)[0].images = codegenPrompt.options.images.map((img) => ({\\n      base64url: img.base64url,\\n      mediaType: img.mediaType,\\n    }));\\n  }\\n\\n  // Initial summary based on first user input\\n  await executeStepGenerateSummary(generateContentFn, prompt, codegenPrompt.options);\\n\\n  // Execute the context optimization step\\n  if (!codegenPrompt.options.disableContextOptimization) {\\n    const optimizationResult = await executeStepContextOptimization(generateContentFn, prompt, codegenPrompt.options);\\n\\n    if (optimizationResult === StepResult.BREAK) {\\n      return { result: [], prompt };\\n    }\\n  }\\n\\n  // Execute the ask question step\\n  if (codegenPrompt.options.askQuestion !== false && (codegenPrompt.options.interactive || codegenPrompt.options.ui)) {\\n    const askQuestionResult = await executeStepAskQuestion(\\n      generateContentFn,\\n      generateImageFn,\\n      prompt,\\n      getFunctionDefs(),\\n      codegenPrompt.options.temperature ?? 0.7,\\n      messages,\\n      codegenPrompt.options,\\n    );\\n\\n    // Summary based on the ask-question conversation history (may be different from the initial summary)\\n    await executeStepGenerateSummary(generateContentFn, prompt, codegenPrompt.options);\\n\\n    if (askQuestionResult === StepResult.BREAK) {\\n      return { result: [], prompt };\\n    }\\n  } else if (codegenPrompt.options.askQuestion === false) {\\n    console.log(\'Ask question is not enabled.\');\\n    // Also there is no need to generate conversation summary\\n  }\\n\\n  const planningResult = await executeStepCodegenPlanning(generateContentFn, prompt, codegenPrompt.options);\\n  if (planningResult === StepResult.BREAK) {\\n    return { result: [], prompt };\\n  }\\n\\n  const baseRequest: [PromptItem[], FunctionDef[], string, number, boolean, CodegenOptions] = [\\n    prompt,\\n    getFunctionDefs(),\\n    \'codegenSummary\',\\n    codegenPrompt.options.temperature ?? 0.7,\\n    codegenPrompt.options.cheap ?? false,\\n    codegenPrompt.options,\\n  ];\\n  let baseResult = await generateContentFn(...baseRequest);\\n\\n  let codegenSummaryRequest = baseResult.find((call) => call.name === \'codegenSummary\');\\n\\n  if (codegenSummaryRequest) {\\n    // Second stage: for each file request the actual code updates\\n    putSystemMessage(\'Received codegen summary, will collect partial updates\', codegenSummaryRequest.args);\\n\\n    baseResult = await validateAndRecoverSingleResult(baseRequest, baseResult, generateContentFn);\\n    codegenSummaryRequest = baseResult.find((call) => call.name === \'codegenSummary\');\\n\\n    // Sometimes the result happens to be a string\\n    assert(Array.isArray(codegenSummaryRequest?.args?.fileUpdates), \'fileUpdates is not an array\');\\n    assert(Array.isArray(codegenSummaryRequest?.args.contextPaths), \'contextPaths is not an array\');\\n\\n    if (!codegenPrompt.options.disableContextOptimization) {\\n      console.log(\'Optimize with context paths.\');\\n      // Monkey patch the initial getSourceCode, do not send parts of source code that are consider irrelevant\\n      getSourceCodeRequest.args = {\\n        filePaths: [\\n          ...codegenSummaryRequest.args.fileUpdates.map((file: { filePath: string }) => file.filePath),\\n          ...codegenSummaryRequest.args.contextPaths,\\n          ...(importantContext.files ?? []),\\n        ],\\n      };\\n      getSourceCodeResponse.functionResponses!.find((item) => item.name === \'getSourceCode\')!.content =\\n        messages.contextSourceCode(getSourceCodeRequest.args?.filePaths as string[]);\\n    }\\n\\n    // Store the first stage response entirely in conversation history\\n    prompt.push({ type: \'assistant\', functionCalls: baseResult });\\n    prompt.push({\\n      type: \'user\',\\n      functionResponses: baseResult.map((call) => ({ name: call.name, call_id: call.id })),\\n      cache: true,\\n    });\\n\\n    const result: FunctionCall[] = [];\\n\\n    for (const file of codegenSummaryRequest!.args.fileUpdates) {\\n      putSystemMessage(\'Collecting partial update for: \' + file.filePath + \' using tool: \' + file.updateToolName, file);\\n\\n      // Check if execution is paused before proceeding\\n      await waitIfPaused();\\n\\n      // this is needed, otherwise we will get an error\\n      if (prompt.slice(-1)[0].type === \'user\') {\\n        prompt.slice(-1)[0].text = file.prompt ?? getPartialPromptTemplate(file.filePath);\\n      } else {\\n        prompt.push({ type: \'user\', text: file.prompt ?? getPartialPromptTemplate(file.filePath) });\\n      }\\n\\n      if (codegenPrompt.options.vision && file.contextImageAssets) {\\n        prompt.slice(-1)[0].images = file.contextImageAssets.map((path: string) => ({\\n          path,\\n          base64url: fs.readFileSync(path, \'base64\'),\\n          mediaType: mime.lookup(path) || \'\',\\n        }));\\n      }\\n\\n      const partialRequest: [PromptItem[], FunctionDef[], string, number, boolean, CodegenOptions] = [\\n        prompt,\\n        getFunctionDefs(),\\n        file.updateToolName,\\n        file.temperature ?? codegenPrompt.options.temperature,\\n        file.cheap === true,\\n        codegenPrompt.options,\\n      ];\\n      let partialResult = await generateContentFn(...partialRequest);\\n\\n      putSystemMessage(\'Received partial update\', partialResult);\\n\\n      // Validate if function call is compliant with the schema\\n      partialResult = await validateAndRecoverSingleResult(partialRequest, partialResult, generateContentFn);\\n\\n      // Handle image generation requests\\n      const generateImageCall = partialResult.find((call) => call.name === \'generateImage\');\\n      if (generateImageCall) {\\n        partialResult.push(await executeStepGenerateImage(generateImageFn, generateImageCall));\\n      }\\n\\n      // Verify if patchFile is one of the functions called, and test if patch is valid and can be applied successfully\\n      const patchFileCall = partialResult.find((call) => call.name === \'patchFile\');\\n      if (patchFileCall) {\\n        partialResult = await executeStepVerifyPatch(\\n          patchFileCall.args as { filePath: string; patch: string },\\n          generateContentFn,\\n          prompt,\\n          getFunctionDefs(),\\n          file.temperature ?? codegenPrompt.options.temperature,\\n          file.cheap === true,\\n          codegenPrompt.options,\\n        );\\n      }\\n\\n      // add the code gen result to the context, as the subsequent code gen may depend on the result\\n      prompt.push(\\n        { type: \'assistant\', functionCalls: partialResult },\\n        {\\n          type: \'user\',\\n          text: \'Update applied.\',\\n          functionResponses: partialResult.map((call) => ({ name: call.name, call_id: call.id })),\\n        },\\n      );\\n\\n      result.push(...partialResult);\\n    }\\n\\n    return { result, prompt };\\n  } else {\\n    // This is unexpected, if happens probably means no code updates.\\n    putSystemMessage(\'Did not receive codegen summary, returning result.\');\\n    return { result: baseResult, prompt };\\n  }\\n}\\n\\n/**\\n * Function to prepare messages for AI services\\n */\\nfunction prepareMessages(codegen: CodegenPrompt) {\\n  return {\\n    sourceCode: JSON.stringify(\\n      getSourceCodeTree(getSourceCode({ taskFile: codegen.options.taskFile }, codegen.options)),\\n    ),\\n    contextSourceCode: (paths: string[], pathsOnly: boolean = false) =>\\n      JSON.stringify(\\n        getSourceCodeTree(\\n          Object.fromEntries(\\n            Object.entries(\\n              getSourceCode(\\n                { filterPaths: paths, taskFile: codegen.options.taskFile, forceAll: true },\\n                codegen.options,\\n              ),\\n            ).filter(([path]) => !pathsOnly || paths.includes(path)),\\n          ),\\n        ),\\n      ),\\n    imageAssets: JSON.stringify(getImageAssets()),\\n  };\\n}\\n"},"static-prompts.ts":{"summary":"This file contains static prompts used in the prompt-service module, such as the initial greeting, request for source code, and acknowledgment of readiness to assist."},"systemprompt.test.ts":{"summary":"Unit tests for system prompt generation"},"systemprompt.ts":{"summary":"Generates the system prompt for the code generation"},"token-estimator.ts":{"summary":"Estimates token count for text and code"}},"/Users/gtanczyk/src/codegen/src/prompt/function-defs":{"ask-question.ts":{"summary":"Function definitions for asking questions and managing conversation flow"},"codegen-planning.ts":{"summary":"This file defines the function definition for the codegenPlanning function, which analyzes the conversation and produces a detailed implementation plan before proceeding with code generation."},"codegen-summary.ts":{"summary":"Definition of codegenSummary function"},"explanation.ts":{"summary":"Defines function to explain the reasoning behind code changes."},"generate-image.ts":{"summary":"Defines function to generate images using AI service."},"get-image-assets.ts":{"summary":"Defines function to get a map of application image assets."},"get-source-code.ts":{"summary":"Defines function definition for getSourceCode."},"optimize-context.ts":{"summary":"Defines optimizeContext function: prioritizes code files based on relevance to user prompt."},"read-history.ts":{"summary":"Defines function to read the conversation history."},"set-summaries.ts":{"summary":"Defines function to save summaries of files."},"update-history.ts":{"summary":"Defines function to update the conversation history."}},"/Users/gtanczyk/src/codegen/src/prompt/steps/step-ask-question/handlers":{"cancel-code-generation.ts":{"summary":"Handles cancellation of code generation"},"confirm-code-generation.ts":{"summary":"Handles user confirmation for starting code generation."},"context-optimization.ts":{"summary":"Handles user confirmation for optimizing context during code generation."},"default-action.ts":{"summary":"Default action handler"},"handle-send-message-with-image.ts":{"summary":"Handles the \'sendMessageWithImage\' action, generating an image and displaying it."},"handle-send-message.ts":{"summary":"Handles sending messages"},"remove-files-from-context.ts":{"summary":"Handles removing files from context"},"request-files-content.ts":{"summary":"Handles request for file contents, refreshes files, categorizes legitimate/illegitimate files, and returns source code."},"request-permissions.ts":{"summary":"Handles requesting permissions from user"},"start-code-generation.ts":{"summary":"Handles the start of code generation"}},"/Users/gtanczyk/src/codegen/src/prompt/steps/step-ask-question":{"step-ask-question-types.ts":{"summary":"Defines types for the \'ask question\' step, including action types, assistant and user items, and action handlers."},"step-ask-question.ts":{"summary":"Handles the step where the assistant asks questions to the user"}},"/Users/gtanczyk/src/codegen/src/prompt/steps":{"step-codegen-planning.ts":{"summary":"This file defines the logic for the codegen planning step, which analyzes the conversation and produces a detailed implementation plan before proceeding with code generation."},"step-context-optimization.test.ts":{"summary":"Unit tests for context optimization step."},"step-context-optimization.ts":{"summary":"Optimizes context for code generation by evaluating file relevance and token cost."},"step-generate-image.ts":{"summary":"Implements the step to generate images using AI service."},"step-generate-summary.ts":{"summary":"Implements the step to generate a summary of the conversation."},"step-history-update.ts":{"summary":"Implements the step to update the conversation history."},"step-summarization.ts":{"summary":"Summarizes source code files and caches the summaries."},"step-validate-recover.ts":{"summary":"Utility to validate and recover from invalid function calls"},"step-verify-patch.ts":{"summary":"Implements the step to verify the validity of a patch file."},"steps-types.ts":{"summary":"Defines types for the prompt service steps."},"steps-utils.ts":{"summary":"Provides utility functions for the prompt service steps."}},"/Users/gtanczyk/src/codegen/src/vite-genaicode":{"README.md":{"summary":"Docs for Vite plugin that integrates GenAIcode into dev workflow."},"tsconfig.json":{"summary":"TypeScript config for Vite GenAIcode plugin."},"vite-env.d.ts":{"summary":"TypeScript type definitions for Vite environment."},"vite-genaicode-frontend.ts":{"summary":"Custom element for GenAICode overlay in Vite plugin."},"vite-genaicode-plugin.ts":{"summary":"Vite plugin for GenAIcode"}}}',
      },
      {
        name: 'getImageAssets',
        content:
          '{"/Users/gtanczyk/src/codegen/media/logo-dark.png":{"mimeType":"image/png","width":1200,"height":686},"/Users/gtanczyk/src/codegen/media/logo.png":{"mimeType":"image/png","width":1200,"height":686},"/Users/gtanczyk/src/codegen/src/vite-genaicode/media/demo-for-readme.gif":{"mimeType":"image/gif","width":769,"height":465}}',
      },
      {
        name: 'readHistory',
        content:
          '2024-11-02T17:29: Upd img gen/ctx handl in handle-send-msg-img, verf prompt-srv. 17:26: Img gen UI, no ctx. Analysis: add img data to prompt arr, upd prompt-srv. Upd: handle-send-msg-img.ts, prompt-srv.ts. 17:22: Img gen/save req. 17:02: AI srv sel, prompt-srv upd. 12:37: codegenPlanning intro. 12:08: codegen artifacts upd. 11-01: self-reflect upd. 10: opt opts, ctx retain. 29: step-ctx-opt tst. 28: getSourceCodeTree, summ gen. 22: plugin ActionTypes.',
      },
    ],
    text: 'Sure, here is the application source code, image assets, and the history.',
    cache: true,
  },
  {
    type: 'assistant',
    text: "Thank you, I'm ready to assist you with your request.",
  },
  {
    type: 'user',
    text: 'I want to implement a new feature in genaicode:\r\n\r\nplugins should be allowed to register a hook that is executed on each generateContent function call in prompt-service',
  },
  {
    type: 'assistant',
    text: "Okay, let's plan the implementation of the new plugin hook feature in GenAICode.\n\nTo allow plugins to register hooks that are executed on each generateContent function call in the prompt-service, we'll need to make the following changes:\n\n1. Modify the prompt-service module to accept an array of plugin hooks, and execute them during the generateContent call.\n2. Create a new module to manage the registration and execution of plugin hooks.\n3. Update the plugin loading logic to register any defined hooks.\n4. Document the new hook feature in the plugin development guide.\n\nDoes this high-level plan make sense? I'd be happy to discuss the details further and provide a more comprehensive implementation plan.",
  },
  {
    type: 'user',
    text: 'yes, it sounds good, lets do this, and please create a new file with tests',
  },
];
