export const DEBUG_PROMPT3 = [
  {
    type: 'systemPrompt',
    systemPrompt:
      '## Who are you?\n\nYou are GenAIcode, a code generation assistant tasked with helping me implement my ideas into my application\'s source code.\nYou should parse my application source code and then suggest changes using appropriate tools.\nPlease limit any changes to the root directory of my application, which is `/Users/gtanczyk/src/codegen`.\n\n## Important Guidelines\n\n- **Use Absolute Paths**: Always use absolute file paths exactly as provided.\n- **Return Working Code**: Aim to return fully functional code.\n- **Avoid Incomplete Code Snippets**: Do not include commented-out fragments like `// ... (keep other existing functions)`.\n- **Handle Large Files Appropriately**: For large files, prefer to use the `patchFile` function.\n- **Suggest File Splitting When Relevant**: Suggest splitting large files if it improves maintainability.\n- **Verify Permissions**: Ensure you have the necessary permissions before proceeding.\n- **Error Handling**: If instructions are unclear, consider failing the task with an explanation.\n- **Produce Necessary Code Only**: Do not generate unnecessary code.\n- **Request Context When Needed**: Ask for sufficient context paths in the code generation summary.\n\n## Your permissions\n\nYou are allowed to create new files.\nYou are allowed to delete files; in such cases, add an empty string as content.\nYou are allowed to create new directories.\nYou are allowed to move files.\nYou are allowed to analyze image assets.\nYou are allowed to generate images.\n## Asking Questions And Conversing\nYou have the ability to have a conversation with me to clarify requirements, seek permissions, or request additional context.\nUse this feature wisely to gather crucial information that would help you better understand the task or provide more accurate code generation.\n\nTo have conversation with me use the `askQuestion` function. This function allows you to:\n\n- **Express Your Thoughts**: Inform me about your considerations or concerns regarding the task.\n- **Share Analysis**: Provide insights or analysis based on the task requirements.\n- **Seek Clarification**: Ask questions or provide suggestions to ensure you fully understand the requirements.\n- **Request File Access**: If certain files are important but haven\'t been provided, request access to their content.\n- **Request Additional Permissions**: If you need permissions for operations that were initially restricted, you may request them.\n- **Generate an image**: If you want to express your thoughts through an image, you can request image generation.\n\n### Efficient File Content Requests\n\nYou can request the content of legitimate files within the project without interrupting the user. This allows you to gather more context when needed.\n\n- **Judicious Use**: Only request files directly relevant to the task.\n- **Relevance**: Consider if the file content is truly necessary.\n- **Large Files**: Be cautious when requesting large files.\n- **Dependencies**: Trace through file dependencies when necessary.\n- **Privacy and Security**: Be mindful of sensitive information.\n- **Iterative Requests**: Anticipate your needs to minimize the number of requests.\n\n# Typical Conversation Flow \n\nIt is ** VERY IMPORTANT ** to follow the conversation flow to ensure a smooth and efficient code generation process. Here is a typical conversation flow:\n\n1. I provide you with source code and context.\n2. Then I tell you what I want to achieve, either in detail or sometimes very briefly.\n3. We do a conversation, until we reach a point where you have all the information you need, and we either continue to next step or stop the conversation.\n4. You propose to start code generation\n5. I confirm that you can proceed\n6. You generate the code changes summary\n7. Then you generate code change for each file\n8. I apply code changes, and the conversation ends.\n\n# Common pitfalls to avoid\n\nIt is **VERY IMPORTANT** to not make the following mistakes:\n\n- Assistant wants to start code generation while the conversation is still ongoing.\n- Assistant says that it starts analysis, but it does not provide any analysis.\n- Assistant says something like "please wait", instead of providing a meaningful response.\n\n# Important Context\n\n[object Object]\n\n',
  },
  {
    type: 'user',
    text: 'Hello, GenAIcode!',
  },
  {
    type: 'assistant',
    text: 'Hello there! I guess you have a task for me today. Before we start, could you please provide me with: \n      - the current source code of your application\n      - the image assets (if available)\n      - and conversational history (if available)\n      \n      Thanks',
    functionCalls: [
      {
        name: 'getSourceCode',
      },
      {
        name: 'getImageAssets',
      },
      {
        name: 'readHistory',
      },
    ],
  },
  {
    type: 'user',
    functionResponses: [
      {
        name: 'getSourceCode',
        content:
          '{"/Users/gtanczyk/src/codegen":{"README.md":{"summary":"GenAIcode: AI-powered code generation tool"},"knip.json":{"summary":"Configuration file for the Knip tool, used for code analysis and generation."},"package.json":{"summary":"Package configuration file for the GenAIcode tool, including dependencies, scripts, and other metadata."},"tsconfig.json":{"summary":"TypeScript config for GenAICode project."},"vitest.e2e.config.ts":{"summary":"Vitest config for e2e tests."},"vitest.unit.config.ts":{"summary":"Vite unit test configuration."},"vitest.workspace.ts":{"summary":"Vitest workspace config."}},"/Users/gtanczyk/src/codegen/bin":{"genaicode-dev.js":{"summary":"Development script for running GenAIcode tool."}},"/Users/gtanczyk/src/codegen/docs/design":{"configuration.md":{"summary":"Documentation on configuration options for the GenAIcode tool, including .genaicoderc file and lint command integration."},"context_optimization_feature.md":{"summary":"Design document for the context optimization feature in GenAIcode, aimed at reducing token usage."},"features.md":{"summary":"GenAIcode features: verbose mode, context optimization, explanations, vision, temperature control, configurable extensions, ignore paths, lint command integration, dry run, image generation, cheaper model, content mask, interactive clarification."},"file_operations.md":{"summary":"Overview of file operations supported by the GenAIcode tool, including creating, deleting, and moving files."},"genaicode_design_doc.md":{"summary":"Main design document for the GenAIcode tool, providing an overview of its architecture, components, and features."},"overview.md":{"summary":"GenAIcode overview: AI-powered code generation, multiple models, flexible configuration, dependency analysis, linting, vision, interactive/UI modes, context optimization."},"token_usage_reduction.md":{"summary":"Design document for implementing strategies to reduce token usage in the GenAIcode tool."}},"/Users/gtanczyk/src/codegen/docs/tasks":{"advanced_llm_prompt.md":{"summary":"Task description for analyzing and improving token reduction strategies in GenAIcode."},"ai_token_usage.md":{"summary":"Task to implement token usage measurement and cost estimation for AI services in GenAIcode."},"allow_directory_create.md":{"summary":"Task to add support for directory creation in the GenAIcode tool."},"codegen_design_doc.md":{"summary":"Task to create a comprehensive design document for the GenAIcode tool."},"configurable_extensions.md":{"summary":"Task to introduce configurable file extensions in the GenAIcode tool."},"content_mask.md":{"summary":"Task to add a content mask feature to the GenAIcode tool for managing token usage."},"context_shrinking.md":{"summary":"Task to implement a context shrinking feature in the GenAIcode tool for optimizing token usage."},"current_feedback.md":{"summary":"List of current feedback and improvements for the GenAIcode tool."},"interactive_cli.md":{"summary":"Task to add an interactive CLI mode to the GenAIcode tool."},"lint_step.md":{"summary":"Task to refactor the lint step in the GenAIcode tool for improved code quality."},"multimodal_frontend.md":{"summary":"Task to add multimodal functionality to the GenAIcode web UI, including image support."},"new_config_options.md":{"summary":"Task to add new configuration options to the .genaicoderc file in the GenAIcode tool."},"project_structure_refactor.md":{"summary":"Task to refactor the project structure of the GenAIcode tool for improved maintainability."},"step_ask_question_refactor.md":{"summary":"Task to refactor the `executeStepAskQuestion` function in the GenAIcode tool."},"usage_monitoring.md":{"summary":"Implementation plan for a usage monitoring feature in the GenAIcode tool."},"web_ui.md":{"summary":"Task to create a web-based user interface for the GenAIcode tool."}},"/Users/gtanczyk/src/codegen/e2e-tests":{"genaicode-ui.test.ts":{"summary":"End-to-end test for the GenAIcode web UI."}},"/Users/gtanczyk/src/codegen/examples":{"README.md":{"summary":"Examples of applications generated using the GenAIcode tool, including Python, Golang, Java, and vision-based examples."}},"/Users/gtanczyk/src/codegen/examples/genaicode_plugins":{"fake_ai_service.ts":{"summary":"Example plugin for a fake AI service in the GenAIcode tool."},"grok_ai_service.ts":{"summary":"Example plugin for the Grok AI service in the GenAIcode tool."},"nonsense_action_handler.ts":{"summary":"Plugin example: nonsense action handler"},"nonsense_operation.ts":{"summary":"Example plugin for a nonsense operation in the GenAIcode tool."}},"/Users/gtanczyk/src/codegen/examples/vite_genaicode_example":{"index.html":{"summary":"Example HTML file for the Vite GenAIcode plugin."},"vite.config.ts":{"summary":"Example Vite configuration file for the GenAIcode plugin."}},"/Users/gtanczyk/src/codegen/src/ai-service":{"ai-studio.ts":{"summary":"Implementation of the AI Studio service integration in the GenAIcode tool."},"anthropic.ts":{"summary":"Anthropic AI service for generating content using the Claude model."},"chat-gpt.ts":{"summary":"Implementation of the ChatGPT service integration in the GenAIcode tool."},"common.test.ts":{"summary":"Unit tests for common functions in the AI service module of the GenAIcode tool."},"common.ts":{"summary":"Common functions and types used across the AI service integrations in the GenAIcode tool."},"dall-e.ts":{"summary":"Implementation of the DALL-E image generation service in the GenAIcode tool."},"unescape-function-call.test.ts":{"summary":"Unit tests for the function call unescaping utility in the GenAIcode tool."},"unescape-function-call.ts":{"summary":"Utility function to unescape function call arguments in the GenAIcode tool."},"vertex-ai-claude.ts":{"summary":"Implementation of the Vertex AI Claude service integration in the GenAIcode tool."},"vertex-ai-imagen.ts":{"summary":"Implementation of the Vertex AI Imagen image generation service in the GenAIcode tool."},"vertex-ai.ts":{"summary":"Implementation of the Vertex AI Gemini Pro service integration in the GenAIcode tool."}},"/Users/gtanczyk/src/codegen/src/cli":{"cli-options.test.ts":{"summary":"Unit tests for the CLI options in the GenAIcode tool."},"cli-options.ts":{"summary":"CLI options: help, dry run, disallow file operations, AI service, prompt, task file, verbose prompt, disable explanations, disable context optimization, Gemini settings, disable lint, temperature, vision, imagen, cheap, content mask, ignore pattern, disable cache, disable ask question."},"cli-params.test.ts":{"summary":"Unit tests for the CLI parameter handling in the GenAIcode tool."},"cli-params.ts":{"summary":"CLI parameters: parse and validate parameters, autodetect AI service"},"service-autodetect.test.ts":{"summary":"Tests for auto-detecting AI service from env vars."},"service-autodetect.ts":{"summary":"Detects AI service based on env vars."},"validate-cli-params.test.ts":{"summary":"CLI parameter validation tests"},"validate-cli-params.ts":{"summary":"Validates CLI parameters, checks for allowed params, and handles errors."}},"/Users/gtanczyk/src/codegen/src/eval":{"codegen-summary.test.ts":{"summary":"Unit tests for codegen-summary functionality"},"prompt-debug.test.ts":{"summary":"Unit tests for prompt debugging"}},"/Users/gtanczyk/src/codegen/src/files":{"cache-file.ts":{"summary":"Caching utilities for source code and image assets."},"file-utils.test.ts":{"summary":"Tests for file utility functions."},"file-utils.ts":{"summary":"Utility functions for working with file paths."},"find-files.ts":{"summary":"Finds source files and image assets in the project."},"path-utils.ts":{"summary":"Utility functions for working with file paths."},"read-files.test.ts":{"summary":"Unit tests for file reading utilities"},"read-files.ts":{"summary":"Utilities to read source code and image assets"},"source-code-tree.ts":{"summary":"Defines SourceCodeTree type, getSourceCodeTree and parseSourceCodeTree functions."},"temp-buffer.ts":{"summary":"Temporary storage for image data."},"update-files.ts":{"summary":"Updates files based on code generation results."}},"/Users/gtanczyk/src/codegen/src/images":{"ensure-alpha.ts":{"summary":"Ensures alpha channel for images."},"imgly-remove-background.ts":{"summary":"Removes background from images using @imgly/background-removal-node."},"resize-image.ts":{"summary":"Resizes images."},"split-image.ts":{"summary":"Splits images into parts."}},"/Users/gtanczyk/src/codegen/src":{"index.ts":{"summary":"Exports main codegen types and functions."}},"/Users/gtanczyk/src/codegen/src/main":{"codegen-types.ts":{"content":"import { FunctionDef, GenerateContentFunction } from \'../ai-service/common\';\\nimport { ActionHandler } from \'../prompt/steps/step-ask-question/step-ask-question-types\';\\n\\n/** Example: {@link ../../examples/genaicode_plugins/grok_ai_service.ts} */\\nexport type PluginAiServiceType = `plugin:${string}`;\\n\\n/** Example: {@link ../../examples/genaicode_plugins/nonsense_action_handlers.ts} */\\nexport type PluginActionType = `plugin:${string}`;\\n\\nexport type AiServiceType =\\n  | \'vertex-ai\'\\n  | \'ai-studio\'\\n  | \'vertex-ai-claude\'\\n  | \'chat-gpt\'\\n  | \'anthropic\'\\n  | PluginAiServiceType;\\n\\nexport type ImagenType = \'vertex-ai\' | \'dall-e\';\\n\\nexport interface UploadedImage {\\n  base64url: string;\\n  mediaType: \'image/jpeg\' | \'image/png\' | \'image/gif\' | \'image/webp\';\\n  originalName: string;\\n}\\n\\nexport interface CodegenOptions {\\n  explicitPrompt?: string;\\n  taskFile?: string;\\n  allowFileCreate?: boolean;\\n  allowFileDelete?: boolean;\\n  allowDirectoryCreate?: boolean;\\n  allowFileMove?: boolean;\\n  vision?: boolean;\\n  imagen?: ImagenType;\\n  aiService: AiServiceType;\\n\\n  disableContextOptimization?: boolean;\\n  temperature?: number;\\n  cheap?: boolean;\\n  dryRun?: boolean;\\n  verbose?: boolean;\\n  requireExplanations?: boolean;\\n  geminiBlockNone?: boolean;\\n  disableInitialLint?: boolean;\\n  contentMask?: string;\\n  ignorePatterns?: string[];\\n  askQuestion?: boolean;\\n  interactive?: boolean;\\n  ui?: boolean;\\n  uiPort?: number;\\n  uiFrameAncestors?: string[];\\n  disableCache?: boolean;\\n  historyEnabled?: boolean;\\n\\n  disableAiServiceFallback?: boolean;\\n  conversationSummaryEnabled?: boolean;\\n  images?: UploadedImage[];\\n  isDev?: boolean;\\n}\\n\\ninterface ExecutorArgs {\\n  [key: string]: unknown;\\n}\\n\\nexport type OperationExecutor = (args: ExecutorArgs, options: CodegenOptions) => Promise<void>;\\n\\nexport type Operation = {\\n  executor: OperationExecutor;\\n  def: FunctionDef;\\n};\\n\\nexport interface Plugin {\\n  name: string;\\n  aiServices?: Record<string, GenerateContentFunction>;\\n  operations?: Record<string, Operation>;\\n  actionHandlers?: Record<\\n    string,\\n    {\\n      /** The action handler implementation */\\n      handler: ActionHandler;\\n      /**\\n       * Description of what this action handler does.\\n       * This description will be included in the askQuestion function definition\\n       * to help the AI understand when to use this action.\\n       */\\n      description: string;\\n    }\\n  >;\\n}\\n"},"codegen-utils.ts":{"content":"import { AiServiceType } from \'./codegen-types\';\\nimport { getRegisteredAiServices } from \'./plugin-loader.js\';\\n\\nexport function getSupportedAiServices(): AiServiceType[] {\\n  return [\'vertex-ai\', \'ai-studio\', \'vertex-ai-claude\', \'chat-gpt\', \'anthropic\', ...getRegisteredAiServices().keys()];\\n}\\n\\nexport function stringToAiServiceType(aiService: string | undefined | null): AiServiceType {\\n  if (!aiService) {\\n    throw new Error(\'Please specify which AI service should be used with --ai-service option\');\\n  }\\n\\n  // Validate that the provided AI service is supported\\n  const supportedServices = getSupportedAiServices();\\n  if (!supportedServices.includes(aiService as AiServiceType)) {\\n    throw new Error(`Unsupported AI service: ${aiService}. Supported services are: ${supportedServices.join(\', \')}`);\\n  }\\n\\n  return aiService as AiServiceType;\\n}\\n"},"codegen.test.ts":{"summary":"Unit tests for codegen functionality"},"codegen.ts":{"summary":"Main code generation logic: handles different modes, lint checks, AI services, and updates files."},"config-lib.test.ts":{"summary":"Tests for the configuration library."},"config-lib.ts":{"summary":"Reads and parses the .genaicoderc configuration file."},"config.ts":{"summary":"Loads the configuration and sets up the environment."},"plugin-loader.ts":{"summary":"Loads and registers plugins."}},"/Users/gtanczyk/src/codegen/src/main/common":{"content-bus-types.ts":{"summary":"Types for the content bus."},"content-bus.ts":{"summary":"Handles content updates and messaging."},"cost-collector.ts":{"summary":"Collects and reports usage metrics for AI services."},"user-actions.ts":{"summary":"Handles user input and confirmation."}},"/Users/gtanczyk/src/codegen/src/main/interactive":{"codegen-interactive.test.ts":{"summary":"Tests for interactive code generation mode"},"codegen-interactive.ts":{"summary":"Interactive code generation mode: handles user actions and runs code generation"},"codegen-worker.ts":{"summary":"Runs codegen in a separate process with interrupt handling."},"common.ts":{"summary":"Common functions for interactive mode: welcome message, user action selection, error handling"},"configure.ts":{"summary":"Configuration options for interactive mode"},"error-handling.ts":{"summary":"Handles errors in the interactive mode."},"help.ts":{"summary":"Help message for interactive mode"},"select-ai-service.ts":{"summary":"Allows selecting the AI service in the interactive mode."},"task-file.ts":{"summary":"Task file handling for interactive mode"},"text-prompt.ts":{"summary":"Text prompt handling for interactive mode"},"user-action-handlers.ts":{"summary":"Implements user input and confirmation handlers"},"user-interrupt.ts":{"summary":"Handles user interrupts in the interactive mode."}},"/Users/gtanczyk/src/codegen/src/main/ui/backend":{"api-utils.ts":{"summary":"Utility functions for the API."},"api.ts":{"summary":"API routes for code generation"},"server.ts":{"summary":"Starts the web server for the UI."},"service.ts":{"summary":"Backend service for UI: handles code generation requests, pausing, interrupting, and providing status updates."}},"/Users/gtanczyk/src/codegen/src/main/ui":{"codegen-ui.ts":{"summary":"Runs the web UI for codegen."},"user-action-handlers.ts":{"summary":"Registers user input and confirmation handlers"}},"/Users/gtanczyk/src/codegen/src/main/ui/common":{"api-types.ts":{"summary":"Defines types for the web UI API."}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/api":{"api-client.ts":{"summary":"Provides API client for interacting with the backend"}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/components":{"app-handlers.tsx":{"summary":"Handlers for app-level actions like execute, pause, resume"},"app-layout.tsx":{"summary":"Defines the layout of the application, including the header, usage display, and main content area."},"app-state.tsx":{"summary":"Manages app state, including execution status and usage"},"chat-interface.tsx":{"summary":"Renders the chat interface with message history and question handling"},"info-icon.tsx":{"summary":"Renders an information icon that displays the RcConfig settings in a tooltip."},"progress-indicator.tsx":{"summary":"Renders the progress indicator, including the interrupt and pause/resume buttons."},"question-handler.tsx":{"summary":"React component for handling user questions and code generation confirmation."},"styled-textarea.tsx":{"summary":"Renders a styled textarea component with automatic height adjustment and image pasting support."},"theme-toggle.tsx":{"summary":"Renders a button to toggle the application theme between light and dark mode."},"unread-messages-notification.tsx":{"summary":"Renders a notification for unread messages in the chat interface."},"usage-display.tsx":{"summary":"Renders the usage display, including the cost, RPM, RPD, TPM, and TPD metrics."}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/components/chat":{"data-container.tsx":{"summary":"Renders data in a formatted container."},"message-container.tsx":{"summary":"Renders a chat message, including user/assistant messages, images, and data."},"system-message-container.tsx":{"summary":"Renders a system message container, including collapsible execution details and data."}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/components/chat/styles":{"chat-interface-styles.ts":{"summary":"Defines styles for the chat interface, including the chat container, messages container, and iteration header."},"data-container-styles.ts":{"summary":"Defines styles for the data container component."},"message-container-styles.ts":{"summary":"Defines styles for the message container component."},"system-message-container-styles.ts":{"summary":"Defines the styles for the system message container component"}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/components/input-area":{"ai-service-selector.tsx":{"summary":"Dropdown to select AI service"},"button-container.tsx":{"summary":"Renders the buttons for the input area, including submit, upload images, and configuration."},"codegen-options-form.tsx":{"summary":"Form to configure codegen options"},"image-upload.tsx":{"summary":"Handles the upload and preview of images for the input area."},"input-area.tsx":{"summary":"Renders the input area, including the textarea, image upload, buttons, and codegen options form."}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app":{"genaicode-app.tsx":{"summary":"Main application component that orchestrates the UI"}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/hooks":{"merged-messages.ts":{"summary":"Provides a custom hook to merge chat messages into iterations, including system messages and conversation summaries."}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend/app/theme":{"global-style.ts":{"summary":"Defines the global styles for the application, including the background image and color scheme."},"styled-components.d.ts":{"summary":"Type definitions for styled-components."},"theme.ts":{"summary":"Defines the light and dark themes for the application, including the color scheme and background image."}},"/Users/gtanczyk/src/codegen/src/main/ui/frontend":{"index.html":{"summary":"Defines the HTML structure of the application, including the root element and script import."},"index.js":{"summary":"Renders the main application component to the DOM."},"tsconfig.json":{"summary":"Defines the TypeScript configuration for the frontend application."},"vite-env.d.ts":{"summary":"Provides type definitions for the Vite environment."}},"/Users/gtanczyk/src/codegen/src/operations/create-directory":{"create-directory-def.ts":{"summary":"Defines the function definition for creating a new directory."},"create-directory-executor.ts":{"summary":"Implements the logic for creating a new directory."}},"/Users/gtanczyk/src/codegen/src/operations/create-file":{"create-file-def.ts":{"summary":"Defines the function definition for creating a new file."},"create-file-executor.ts":{"summary":"Implements the logic for creating a new file."}},"/Users/gtanczyk/src/codegen/src/operations/delete-file":{"delete-file-def.ts":{"summary":"Defines the function definition for deleting a file."},"delete-file-executor.ts":{"summary":"Implements the logic for deleting a file."}},"/Users/gtanczyk/src/codegen/src/operations/download-file":{"download-file-def.ts":{"summary":"Defines the function definition for downloading a file."},"download-file-executor.ts":{"summary":"Implements the logic for downloading a file."}},"/Users/gtanczyk/src/codegen/src/operations/imgly-remove-background":{"imgly-remove-background-def.ts":{"summary":"Defines the function definition for removing the background from an image using the @imgly/background-removal-node library."},"imgly-remove-background-executor.ts":{"summary":"Implements the logic for removing the background from an image using the @imgly/background-removal-node library."}},"/Users/gtanczyk/src/codegen/src/operations/move-file":{"move-file-def.ts":{"summary":"Defines the function definition for moving a file from one location to another."},"move-file-executor.ts":{"summary":"Implements the logic for moving a file from one location to another."}},"/Users/gtanczyk/src/codegen/src/operations":{"operations-index.ts":{"summary":"Provides a centralized index of all available operations, including their executors and definitions."}},"/Users/gtanczyk/src/codegen/src/operations/patch-file":{"patch-file-def.ts":{"summary":"Defines the function definition for partially updating a file\'s content."},"patch-file-executor.ts":{"summary":"Implements the logic for partially updating a file\'s content."}},"/Users/gtanczyk/src/codegen/src/operations/resize-image":{"resize-image-def.ts":{"summary":"Defines the function definition for resizing an image to a specified size."},"resize-image-executor.ts":{"summary":"Implements the logic for resizing an image to a specified size."}},"/Users/gtanczyk/src/codegen/src/operations/split-image":{"split-image-def.ts":{"summary":"Defines function to split image into multiple parts and save them as separate files."},"split-image-executor.ts":{"summary":"Implements function to split image into multiple parts and save them as separate files."}},"/Users/gtanczyk/src/codegen/src/operations/update-file":{"update-file-def.ts":{"summary":"Defines function to update a file with new content."},"update-file-executor.ts":{"summary":"Implements function to update a file with new content."}},"/Users/gtanczyk/src/codegen/src/prompt":{"ai-service-fallback.ts":{"summary":"Handles AI service fallback when rate limit is exceeded"},"function-calling-validate.ts":{"summary":"Validates function calls to ensure they match the expected schema"},"function-calling.ts":{"summary":"Defines function definitions for function calling"},"limits.test.ts":{"summary":"Unit tests for prompt token limits"},"limits.ts":{"summary":"Defines functions to verify prompt and source code token limits"},"prompt-codegen.test.ts":{"summary":"Unit tests for codegen prompt generation"},"prompt-codegen.ts":{"content":"import assert from \'node:assert\';\\nimport { verifyCodegenPromptLimit } from \'./limits.js\';\\nimport { CodegenOptions } from \'../main/codegen-types.js\';\\n\\nexport interface CodegenPrompt {\\n  prompt: string;\\n  options: CodegenOptions;\\n}\\n\\n/** Get codegen prompt */\\nexport function getCodeGenPrompt(options: CodegenOptions): CodegenPrompt {\\n  let { explicitPrompt } = options;\\n  const { taskFile, verbose } = options;\\n\\n  assert(!explicitPrompt || !taskFile, \'Both taskFile and explicitPrompt are not allowed\');\\n\\n  if (taskFile) {\\n    explicitPrompt = `I want you to perform a coding task. The task is described in the ${taskFile} file. Use those instructions.`;\\n  }\\n\\n  assert(explicitPrompt, \'No taskFile or explicitPrompt provided\');\\n\\n  const taskPrompt = explicitPrompt;\\n\\n  if (verbose) {\\n    console.log(\'Code gen prompt:\');\\n    console.log(taskPrompt);\\n  }\\n\\n  verifyCodegenPromptLimit(taskPrompt);\\n\\n  return { prompt: taskPrompt, options };\\n}\\n\\n/** Get lint fix prompt */\\nexport function getLintFixPrompt(command: string, { verbose }: CodegenOptions, stdout: string, stderr: string): string {\\n  const lintFixPrompt = `The following lint errors were encountered after the initial code generation:\\n\\nLint command: ${command}\\nLint command stdout:\\n\\n\\\\`\\\\`\\\\`\\n${stdout}\\n\\\\`\\\\`\\\\`\\n\\nLint command stderr:\\n\\n\\\\`\\\\`\\\\`\\n${stderr}\\n\\\\`\\\\`\\\\`\\n\\nPlease suggest changes to fix these lint errors. Use the \'sendMessage\' actionType if you need any clarifications before proposing fixes.`;\\n\\n  if (verbose) {\\n    console.log(\'Lint fix prompt:\');\\n    console.log(lintFixPrompt);\\n  }\\n\\n  verifyCodegenPromptLimit(lintFixPrompt);\\n\\n  return lintFixPrompt;\\n}\\n"},"prompt-service-ask-question.test.ts":{"summary":"Unit tests for prompt service with askQuestion"},"prompt-service.test.ts":{"summary":"Unit tests for prompt service"},"prompt-service.ts":{"content":"import assert from \'node:assert\';\\nimport fs from \'fs\';\\nimport mime from \'mime-types\';\\n\\nimport { getSystemPrompt } from \'./systemprompt.js\';\\nimport { getFunctionDefs } from \'./function-calling.js\';\\nimport { getSourceCode, getImageAssets } from \'../files/read-files.js\';\\nimport {\\n  PromptItem,\\n  FunctionDef,\\n  FunctionCall,\\n  GenerateContentFunction,\\n  GenerateImageFunction,\\n} from \'../ai-service/common.js\';\\nimport { importantContext } from \'../main/config.js\';\\nimport { AiServiceType, CodegenOptions, ImagenType } from \'../main/codegen-types.js\';\\nimport { executeStepAskQuestion } from \'./steps/step-ask-question/step-ask-question.js\';\\nimport { validateAndRecoverSingleResult } from \'./steps/step-validate-recover.js\';\\nimport { executeStepVerifyPatch } from \'./steps/step-verify-patch.js\';\\nimport { executeStepGenerateImage } from \'./steps/step-generate-image.js\';\\nimport { executeStepContextOptimization } from \'./steps/step-context-optimization.js\';\\nimport { StepResult } from \'./steps/steps-types.js\';\\nimport { CodegenPrompt } from \'./prompt-codegen.js\';\\nimport { putSystemMessage } from \'../main/common/content-bus.js\';\\nimport { handleAiServiceFallback } from \'./ai-service-fallback.js\';\\nimport { summarizeSourceCode } from \'./steps/step-summarization.js\';\\nimport { executeStepHistoryUpdate, getCurrentHistory } from \'./steps/step-history-update.js\';\\nimport { executeStepGenerateSummary } from \'./steps/step-generate-summary.js\';\\nimport { getSourceCodeTree } from \'../files/source-code-tree.js\';\\n\\n/** A function that communicates with model using */\\nexport async function promptService(\\n  generateContentFns: Record<AiServiceType, GenerateContentFunction>,\\n  generateImageFns: Record<ImagenType, GenerateImageFunction>,\\n  codegenPrompt: CodegenPrompt,\\n  waitIfPaused: () => Promise<void> = () => Promise.resolve(),\\n): Promise<FunctionCall[]> {\\n  const generateContentFn: GenerateContentFunction = async (...args) => {\\n    return await handleAiServiceFallback(\\n      generateContentFns,\\n      codegenPrompt.options.aiService,\\n      codegenPrompt.options,\\n      ...args,\\n    );\\n  };\\n\\n  const generateImageFn: GenerateImageFunction = (...args) => {\\n    assert(codegenPrompt.options.imagen, \'imagen value must be provided\');\\n    return generateImageFns[codegenPrompt.options.imagen](...args);\\n  };\\n\\n  const { result, prompt } = await executePromptService(\\n    generateContentFn,\\n    generateImageFn,\\n    codegenPrompt,\\n    waitIfPaused,\\n  );\\n\\n  if (codegenPrompt.options.historyEnabled) {\\n    await executeStepHistoryUpdate(generateContentFn, prompt, codegenPrompt.options);\\n  }\\n\\n  return result;\\n}\\n\\nasync function executePromptService(\\n  generateContentFn: GenerateContentFunction,\\n  generateImageFn: GenerateImageFunction,\\n  codegenPrompt: CodegenPrompt,\\n  waitIfPaused: () => Promise<void> = () => Promise.resolve(),\\n): Promise<{ result: FunctionCall[]; prompt: PromptItem[] }> {\\n  const messages = prepareMessages(codegenPrompt);\\n\\n  // First stage: summarize the source code\\n  if (!codegenPrompt.options.disableContextOptimization) {\\n    await summarizeSourceCode(\\n      generateContentFn,\\n      getSourceCode({ forceAll: true }, codegenPrompt.options),\\n      codegenPrompt.options,\\n    );\\n  }\\n\\n  // Second stage: generate code generation summary, which should not take a lot of output tokens\\n  const getSourceCodeRequest: FunctionCall = { name: \'getSourceCode\' };\\n\\n  const prompt: PromptItem[] = [\\n    { type: \'systemPrompt\', systemPrompt: getSystemPrompt(codegenPrompt.options) },\\n    { type: \'user\', text: \'Hello, GenAIcode!\' },\\n    {\\n      type: \'assistant\',\\n      text: `Hello there! I guess you have a task for me today. Before we start, could you please provide me with: \\n      - the current source code of your application\\n      - the image assets (if available)\\n      - and conversational history (if available)\\n      \\n      Thanks`,\\n      functionCalls: [\\n        getSourceCodeRequest,\\n        ...(codegenPrompt.options.vision ? [{ name: \'getImageAssets\' }] : []),\\n        ...(codegenPrompt.options.historyEnabled ? [{ name: \'readHistory\' }] : []),\\n      ],\\n    },\\n  ];\\n\\n  const getSourceCodeResponse: PromptItem = {\\n    type: \'user\',\\n    functionResponses: [\\n      { name: \'getSourceCode\', content: messages.sourceCode },\\n      ...(codegenPrompt.options.vision ? [{ name: \'getImageAssets\', content: messages.imageAssets }] : []),\\n      ...(codegenPrompt.options.historyEnabled ? [{ name: \'readHistory\', content: getCurrentHistory() }] : []),\\n    ],\\n    text: \'Sure, here is the application source code, image assets, and the history.\',\\n    cache: true,\\n  };\\n  prompt.push(getSourceCodeResponse);\\n\\n  prompt.push(\\n    {\\n      type: \'assistant\',\\n      text: \\"Thank you, I\'m ready to assist you with your request.\\",\\n    },\\n    {\\n      type: \'user\',\\n      text: codegenPrompt.prompt,\\n    },\\n  );\\n\\n  // Add uploaded images to the prompt if available\\n  if (codegenPrompt.options.images && codegenPrompt.options.images.length > 0 && codegenPrompt.options.vision) {\\n    prompt.slice(-1)[0].images = codegenPrompt.options.images.map((img) => ({\\n      base64url: img.base64url,\\n      mediaType: img.mediaType,\\n    }));\\n  }\\n\\n  // Initial summary based on first user input\\n  await executeStepGenerateSummary(generateContentFn, prompt, codegenPrompt.options);\\n\\n  // Execute the context optimization step\\n  if (!codegenPrompt.options.disableContextOptimization) {\\n    const optimizationResult = await executeStepContextOptimization(generateContentFn, prompt, codegenPrompt.options);\\n\\n    if (optimizationResult === StepResult.BREAK) {\\n      return { result: [], prompt };\\n    }\\n  }\\n\\n  // Execute the ask question step\\n  if (codegenPrompt.options.askQuestion !== false && (codegenPrompt.options.interactive || codegenPrompt.options.ui)) {\\n    const askQuestionResult = await executeStepAskQuestion(\\n      generateContentFn,\\n      generateImageFn,\\n      prompt,\\n      getFunctionDefs(),\\n      codegenPrompt.options.temperature ?? 0.7,\\n      messages,\\n      codegenPrompt.options,\\n    );\\n\\n    // Summary based on the ask-question conversation history (may be different from the initial summary)\\n    await executeStepGenerateSummary(generateContentFn, prompt, codegenPrompt.options);\\n\\n    if (askQuestionResult === StepResult.BREAK) {\\n      return { result: [], prompt };\\n    }\\n  } else if (codegenPrompt.options.askQuestion === false) {\\n    console.log(\'Ask question is not enabled.\');\\n    // Also there is no need to generate conversation summary\\n  }\\n\\n  const baseRequest: [PromptItem[], FunctionDef[], string, number, boolean, CodegenOptions] = [\\n    prompt,\\n    getFunctionDefs(),\\n    \'codegenSummary\',\\n    codegenPrompt.options.temperature ?? 0.7,\\n    codegenPrompt.options.cheap ?? false,\\n    codegenPrompt.options,\\n  ];\\n  let baseResult = await generateContentFn(...baseRequest);\\n\\n  let codegenSummaryRequest = baseResult.find((call) => call.name === \'codegenSummary\');\\n\\n  if (codegenSummaryRequest) {\\n    // Second stage: for each file request the actual code updates\\n    putSystemMessage(\'Received codegen summary, will collect partial updates\', codegenSummaryRequest.args);\\n\\n    baseResult = await validateAndRecoverSingleResult(baseRequest, baseResult, generateContentFn);\\n    codegenSummaryRequest = baseResult.find((call) => call.name === \'codegenSummary\');\\n\\n    // Sometimes the result happens to be a string\\n    assert(Array.isArray(codegenSummaryRequest?.args?.fileUpdates), \'fileUpdates is not an array\');\\n    assert(Array.isArray(codegenSummaryRequest?.args.contextPaths), \'contextPaths is not an array\');\\n\\n    if (!codegenPrompt.options.disableContextOptimization) {\\n      console.log(\'Optimize with context paths.\');\\n      // Monkey patch the initial getSourceCode, do not send parts of source code that are consider irrelevant\\n      getSourceCodeRequest.args = {\\n        filePaths: [\\n          ...codegenSummaryRequest.args.fileUpdates.map((file: { filePath: string }) => file.filePath),\\n          ...codegenSummaryRequest.args.contextPaths,\\n          ...(importantContext.files ?? []),\\n        ],\\n      };\\n      getSourceCodeResponse.functionResponses!.find((item) => item.name === \'getSourceCode\')!.content =\\n        messages.contextSourceCode(getSourceCodeRequest.args?.filePaths as string[]);\\n    }\\n\\n    // Store the first stage response entirely in conversation history\\n    prompt.push({ type: \'assistant\', functionCalls: baseResult });\\n    prompt.push({\\n      type: \'user\',\\n      functionResponses: baseResult.map((call) => ({ name: call.name, call_id: call.id })),\\n      cache: true,\\n    });\\n\\n    const result: FunctionCall[] = [];\\n\\n    for (const file of codegenSummaryRequest!.args.fileUpdates) {\\n      putSystemMessage(\'Collecting partial update for: \' + file.filePath + \' using tool: \' + file.updateToolName, file);\\n      console.log(\'- Prompt:\', file.prompt);\\n      console.log(\'- Temperature\', file.temperature);\\n      console.log(\'- Cheap\', file.cheap);\\n      if (codegenPrompt.options.vision) {\\n        console.log(\'- Context image assets\', file.contextImageAssets);\\n      }\\n\\n      // Check if execution is paused before proceeding\\n      await waitIfPaused();\\n\\n      // this is needed, otherwise we will get an error\\n      if (prompt.slice(-1)[0].type === \'user\') {\\n        prompt.slice(-1)[0].text = file.prompt ?? messages.partialPromptTemplate(file.filePath);\\n      } else {\\n        prompt.push({ type: \'user\', text: file.prompt ?? messages.partialPromptTemplate(file.filePath) });\\n      }\\n\\n      if (codegenPrompt.options.vision && file.contextImageAssets) {\\n        prompt.slice(-1)[0].images = file.contextImageAssets.map((path: string) => ({\\n          path,\\n          base64url: fs.readFileSync(path, \'base64\'),\\n          mediaType: mime.lookup(path) || \'\',\\n        }));\\n      }\\n\\n      const partialRequest: [PromptItem[], FunctionDef[], string, number, boolean, CodegenOptions] = [\\n        prompt,\\n        getFunctionDefs(),\\n        file.updateToolName,\\n        file.temperature ?? codegenPrompt.options.temperature,\\n        file.cheap === true,\\n        codegenPrompt.options,\\n      ];\\n      let partialResult = await generateContentFn(...partialRequest);\\n\\n      putSystemMessage(\'Received partial update\', partialResult);\\n\\n      // Validate if function call is compliant with the schema\\n      partialResult = await validateAndRecoverSingleResult(partialRequest, partialResult, generateContentFn);\\n\\n      // Handle image generation requests\\n      const generateImageCall = partialResult.find((call) => call.name === \'generateImage\');\\n      if (generateImageCall) {\\n        partialResult.push(await executeStepGenerateImage(generateImageFn, generateImageCall));\\n      }\\n\\n      // Verify if patchFile is one of the functions called, and test if patch is valid and can be applied successfully\\n      const patchFileCall = partialResult.find((call) => call.name === \'patchFile\');\\n      if (patchFileCall) {\\n        partialResult = await executeStepVerifyPatch(\\n          patchFileCall.args as { filePath: string; patch: string },\\n          generateContentFn,\\n          prompt,\\n          getFunctionDefs(),\\n          file.temperature ?? codegenPrompt.options.temperature,\\n          file.cheap === true,\\n          codegenPrompt.options,\\n        );\\n      }\\n\\n      // add the code gen result to the context, as the subsequent code gen may depend on the result\\n      prompt.push(\\n        { type: \'assistant\', functionCalls: partialResult },\\n        {\\n          type: \'user\',\\n          text: \'Update applied.\',\\n          functionResponses: partialResult.map((call) => ({ name: call.name, call_id: call.id })),\\n        },\\n      );\\n\\n      result.push(...partialResult);\\n    }\\n\\n    return { result, prompt };\\n  } else {\\n    // This is unexpected, if happens probably means no code updates.\\n    putSystemMessage(\'Did not receive codegen summary, returning result.\');\\n    return { result: baseResult, prompt };\\n  }\\n}\\n\\n/**\\n * Function to prepare messages for AI services\\n */\\nfunction prepareMessages(codegen: CodegenPrompt) {\\n  return {\\n    sourceCode: JSON.stringify(\\n      getSourceCodeTree(getSourceCode({ taskFile: codegen.options.taskFile }, codegen.options)),\\n    ),\\n    contextSourceCode: (paths: string[], pathsOnly: boolean = false) =>\\n      JSON.stringify(\\n        getSourceCodeTree(\\n          Object.fromEntries(\\n            Object.entries(\\n              getSourceCode(\\n                { filterPaths: paths, taskFile: codegen.options.taskFile, forceAll: true },\\n                codegen.options,\\n              ),\\n            ).filter(([path]) => !pathsOnly || paths.includes(path)),\\n          ),\\n        ),\\n      ),\\n    imageAssets: JSON.stringify(getImageAssets()),\\n    partialPromptTemplate(path: string) {\\n      return `Thank you for providing the summary, now suggest changes for the \\\\`${path}\\\\` file using appropriate tools.`;\\n    },\\n  };\\n}\\n"},"systemprompt.test.ts":{"summary":"Unit tests for system prompt generation"},"systemprompt.ts":{"summary":"Generates system prompt for code generation assistant, defines guidelines and usage of key functions"},"token-estimator.ts":{"summary":"Estimates token count for text and code"}},"/Users/gtanczyk/src/codegen/src/prompt/function-defs":{"ask-question.ts":{"summary":"Function definitions for asking questions and managing conversation flow"},"codegen-summary.ts":{"content":"import { FunctionDef } from \'../../ai-service/common.js\';\\nimport { getRegisteredOperations } from \'../../main/plugin-loader.js\';\\n\\n/**\\n * Function definition for codegenSummary\\n */\\nexport const getCodegenSummaryDef = (): FunctionDef => ({\\n  name: \'codegenSummary\',\\n  description:\\n    \'This function is called with a summary of proposed updates.\\\\n\' +\\n    \'- `explanation`: A general explanation of the planned code generation updates or reasoning for no code changes.\\\\n\' +\\n    \'- `fileUpdates`: A list of proposed file updates that will be subject to subsequent code generation requests.\\\\n\' +\\n    \'- `contextPaths`: A list of file paths that make sense to use as context for code generation requests.\\\\n\' +\\n    \'It is critically important to adhere to the schema of parameters.\',\\n  parameters: {\\n    type: \'object\',\\n    properties: {\\n      explanation: {\\n        type: \'string\',\\n        description: \'A brief description of the planned changes or an explanation if no changes are proposed.\',\\n      },\\n      fileUpdates: {\\n        type: \'array\',\\n        description: \'An array of proposed file updates, each update is an object with several properties.\',\\n        items: {\\n          type: \'object\',\\n          description:\\n            \'An object representing a proposed update to a file, containing properties like the absolute file path, the update tool name, and other important properties.\',\\n          properties: {\\n            filePath: {\\n              type: \'string\',\\n              description:\\n                \'An absolute path of the project file that will be updated. This must be an absolute file path.\',\\n            },\\n            prompt: {\\n              type: \'string\',\\n              description:\\n                \'A detailed prompt that will be passed to the model request together with the tool request. It summarizes the planned changes for this particular file.\',\\n            },\\n            updateToolName: {\\n              type: \'string\',\\n              enum: [\\n                \'createFile\',\\n                \'updateFile\',\\n                \'patchFile\',\\n                \'deleteFile\',\\n                \'createDirectory\',\\n                \'moveFile\',\\n                \'generateImage\',\\n                \'downloadFile\',\\n                \'splitImage\',\\n                \'resizeImage\',\\n                \'imglyRemoveBackground\',\\n                ...getRegisteredOperations().map((operation) => operation.def.name),\\n              ],\\n              description: \'The name of the tool that will be used to perform the update.\',\\n            },\\n            temperature: {\\n              type: \'number\',\\n              description:\\n                \'Temperature parameter for the LLM request. Should be within the range [0.0, 2.0]. Lower values make the output more deterministic.\',\\n              minimum: 0.0,\\n              maximum: 2.0,\\n            },\\n            cheap: {\\n              type: \'boolean\',\\n              description:\\n                \'If true, the prompt will be executed with a cheaper, faster model that provides lower quality results. Use only when lower quality results are acceptable.\',\\n            },\\n            contextImageAssets: {\\n              type: \'array\',\\n              description:\\n                \'A list of absolute image asset paths that should be included in the context of the LLM request. Use this parameter when there is a need to analyze an image.\',\\n              items: { type: \'string\' },\\n            },\\n          },\\n          required: [\'filePath\', \'prompt\', \'updateToolName\'],\\n        },\\n      },\\n      contextPaths: {\\n        type: \'array\',\\n        description:\\n          \'An array of absolute file paths that should be used to provide context for the following updates. These could be dependencies or files that depend on the files to be updated.\',\\n        items: {\\n          type: \'string\',\\n        },\\n      },\\n    },\\n    required: [\'explanation\', \'fileUpdates\', \'contextPaths\'],\\n  },\\n});\\n"},"explanation.ts":{"content":"import { FunctionDef } from \'../../ai-service/common\';\\n\\n/**\\n * Function definition for explanation\\n */\\nexport const explanation: FunctionDef = {\\n  name: \'explanation\',\\n  description: \'Explain the reasoning behind the suggested code changes or reasoning for lack of code changes\',\\n  parameters: {\\n    type: \'object\',\\n    properties: {\\n      text: {\\n        type: \'string\',\\n        description: \'The explanation text\',\\n      },\\n    },\\n    required: [\'text\'],\\n  },\\n};\\n"},"generate-image.ts":{"summary":"Defines function to generate images using AI service."},"get-image-assets.ts":{"summary":"Defines function to get a map of application image assets."},"get-source-code.ts":{"content":"import { FunctionDef } from \'../../ai-service/common\';\\n\\n/**\\n * Function definition for getSourceCode\\n */\\nexport const getSourceCode: FunctionDef = {\\n  name: \'getSourceCode\',\\n  description: `This function returns source code of the application in the following format:\\n\\\\`\\\\`\\\\`\\n{\\n  [directoryPath: string]: {\\n    [filePath: string]: {content: string | null} | {summary: string};\\n  };\\n}\\n\\\\`\\\\`\\\\`\\n\\nSome keys may not provide content. Some keys may provide a short summary of content.\\n\\nHere is an example of the returned object:\\n\\\\`\\\\`\\\\`\\n{\\n  \'/path/to/directory\': {\\n    \'file1.js\': {content: \'console.log(\'Hello, World!\');\'},\\n  },\\n  \'/path/to/directory/sub1/sub2\': {\\n    \'file2.js\': {summary: \'This file contains a simple log statement.\'},\\n  }\\n}\\n\\\\`\\\\`\\\\`\\n\\nHow to understand this object:\\n- there are 2 files\\n- the first file has content: \'console.log(\'Hello, World!\');\'\\n- the second file has no content, but a summary: \'This file contains a simple log statement.\'\\n- path of first file: \'/path/to/directory/file1.js\'\\n- path of second file: \'/path/to/directory/sub1/sub2/file2.js\'\\n\\nThis function is used to provide context to the AI model.\\n    `,\\n  parameters: {\\n    type: \'object\',\\n    properties: {\\n      filePaths: {\\n        type: \'array\',\\n        description: \'An array of absolute paths of files that should be used to provided context.\',\\n        items: {\\n          type: \'string\',\\n        },\\n      },\\n    },\\n    required: [],\\n  },\\n};\\n"},"optimize-context.ts":{"summary":"Defines optimizeContext function: prioritizes code files based on relevance to user prompt."},"read-history.ts":{"summary":"Defines function to read the conversation history."},"set-summaries.ts":{"summary":"Defines function to save summaries of files."},"update-history.ts":{"summary":"Defines function to update the conversation history."}},"/Users/gtanczyk/src/codegen/src/prompt/steps/step-ask-question/handlers":{"cancel-code-generation.ts":{"summary":"Handles cancellation of code generation"},"confirm-code-generation.ts":{"summary":"Handles user confirmation for starting code generation."},"context-optimization.ts":{"summary":"Handles user confirmation for optimizing context during code generation."},"default-action.ts":{"summary":"Default action handler"},"handle-send-message-with-image.ts":{"summary":"Handles sending messages with images"},"handle-send-message.ts":{"summary":"Handles sending messages"},"remove-files-from-context.ts":{"summary":"Handles removing files from context"},"request-files-content.ts":{"summary":"Handles requesting content of missing files"},"request-permissions.ts":{"summary":"Handles requesting permissions from user"},"start-code-generation.ts":{"summary":"Handles the start of code generation"}},"/Users/gtanczyk/src/codegen/src/prompt/steps/step-ask-question":{"step-ask-question-types.ts":{"summary":"Types for step-ask-question"},"step-ask-question.ts":{"summary":"Step for asking questions in code generation"}},"/Users/gtanczyk/src/codegen/src/prompt/steps":{"step-context-optimization.test.ts":{"summary":"Unit tests for context optimization step."},"step-context-optimization.ts":{"summary":"Optimizes context for code generation by evaluating file relevance and token cost."},"step-generate-image.ts":{"summary":"Implements the step to generate images using AI service."},"step-generate-summary.ts":{"content":"import { GenerateContentArgs, GenerateContentFunction, PromptItem } from \'../../ai-service/common.js\';\\nimport { CodegenOptions } from \'../../main/codegen-types.js\';\\nimport { putSystemMessage } from \'../../main/common/content-bus.js\';\\nimport { getFunctionDefs } from \'../function-calling.js\';\\nimport { ChatMessageFlags } from \'../../main/common/content-bus-types.js\';\\n\\nexport async function executeStepGenerateSummary(\\n  generateContentFn: GenerateContentFunction,\\n  prompt: PromptItem[],\\n  options: CodegenOptions,\\n): Promise<void> {\\n  if (!options.conversationSummaryEnabled) {\\n    console.log(\\"Not generating conversation summary because it\'s disabled in options.\\");\\n    return;\\n  }\\n\\n  const summaryRequest: GenerateContentArgs = [\\n    [\\n      ...prompt,\\n      { type: \'assistant\', text: \'Thank you for explaining the task.\' },\\n      {\\n        type: \'user\',\\n        text: `Now please summarize our conversation, I want maximum 1 sentence of maximum 10 words explaning the conversation.`,\\n      },\\n    ],\\n    getFunctionDefs(),\\n    \'explanation\',\\n    0.3, // Use a lower temperature for more focused summaries\\n    true, // Use cheap model by default for summaries\\n    options,\\n  ];\\n\\n  try {\\n    const summaryResult = await generateContentFn(...summaryRequest);\\n    const summaryExplanation = summaryResult.find((call) => call.name === \'explanation\');\\n\\n    if (summaryExplanation && summaryExplanation.args && typeof summaryExplanation.args.text === \'string\') {\\n      const conversationSummary = summaryExplanation.args.text;\\n      putSystemMessage(\'Generated conversation summary\', conversationSummary, [ChatMessageFlags.CONVERSATION_SUMMARY]);\\n    } else {\\n      throw new Error(\'Failed to generate summary: unexpected response format\');\\n    }\\n  } catch (error) {\\n    console.error(\'Error generating conversation summary:\', error);\\n    putSystemMessage(\'Failed to generate conversation summary.\');\\n    return;\\n  }\\n}\\n"},"step-history-update.ts":{"summary":"Implements the step to update the conversation history."},"step-summarization.ts":{"summary":"Summarizes source code files and caches the summaries."},"step-validate-recover.ts":{"summary":"Utility to validate and recover from invalid function calls"},"step-verify-patch.ts":{"summary":"Implements the step to verify the validity of a patch file."},"steps-types.ts":{"summary":"Defines types for the prompt service steps."},"steps-utils.ts":{"summary":"Provides utility functions for the prompt service steps."}},"/Users/gtanczyk/src/codegen/src/vite-genaicode":{"README.md":{"summary":"Docs for Vite plugin that integrates GenAIcode into dev workflow."},"tsconfig.json":{"summary":"TypeScript config for Vite GenAIcode plugin."},"vite-env.d.ts":{"summary":"TypeScript type definitions for Vite environment."},"vite-genaicode-frontend.ts":{"summary":"Custom element for GenAICode overlay in Vite plugin."},"vite-genaicode-plugin.ts":{"summary":"Vite plugin for GenAIcode"}}}',
      },
      {
        name: 'getImageAssets',
        content:
          '{"/Users/gtanczyk/src/codegen/media/logo-dark.png":{"mimeType":"image/png","width":1200,"height":686},"/Users/gtanczyk/src/codegen/media/logo.png":{"mimeType":"image/png","width":1200,"height":686},"/Users/gtanczyk/src/codegen/src/vite-genaicode/media/demo-for-readme.gif":{"mimeType":"image/gif","width":769,"height":465}}',
      },
      {
        name: 'readHistory',
        content:
          "2024-11-02: Opt sys prompt codegen. 24-10: ops, refact, perms, CG start. 21: plg cfg, load, svc; core/cfg/func upd; ops, self-reflect. 21: plg init, new loader, cfg/CG upd, opt hist. 22: 'nonsense', '--ai-svc' CLI, gen code. 22: tst, req clarif, conf/summ CG, opt ctx. 22: task: hello; anlys, clarif, conf CG, CG summ, opt ctx, CG, comp. 22: plg ext ActionTypes, custom acts. 22: anlyz Anthropic genCont, fix cache, patch. 22: upd ask-question, plg acts. 26: img disp, upd ChatMsg. 27: 'reqAnswWithImg', img gen req. 28: anlyz getSourceCodeTree, gen summ, conf/opt CG, comp. 28-10: tst step-ctx-opt: src, opt, edge, token. 29: upd tst, verify step-ctx-opt. 29: AI svc sel, save backend. 30: upd cfg/svc. 30: opt opts, retain ctx. 30: add QHandler opts. 30-10: sync aiSvc in QHandler. 2024-11-01: upd self-reflect: cheap/exp, 4-step, err, esc. Summ CG: exp, files, ctx. Clarif: tasks, goals, constraints, timeline. 2024-11-01: upd step-ask-question-reflect.ts self-reflect: balanced, concise, struct, examples. 2024-11-01T12:13: Fixed tst: prompt-ask-question, 7 calls exp, updated. 2024-11-01T12:25: Analyzed tst, fixed 6 calls issue. 2024-11-02: Analyzed and fixed codegen.test.ts: mocks, CLI params, func calls, types, expectations. 2024-11-02: Opt sys prompt codegen. 2024-11-02: Cre new tst codegen-summary.test.ts, test codegenSummary w/ Claude, valid resp struct/content. 2024-11-02T10:14: Upd codegen-summ.ts: import prompt templates, test multiple AI srvcs (vertex-ai, chat-gpt, vertex-ai-claude)",
      },
    ],
    text: 'Sure, here is the application source code, image assets, and the history.',
    cache: true,
  },
  {
    type: 'assistant',
    text: "Thank you, I'm ready to assist you with your request.",
  },
  {
    type: 'user',
    text: 'codegen-summary.test.ts should be importing prompts from prompt-service, using the same static prompts',
  },
  {
    type: 'assistant',
    text: "Thank you for providing the source code, image assets, and history. I noticed that the codegen-summary.test.ts file should be importing the prompt templates from the prompt-service module, rather than using static prompts. This will ensure consistency and maintainability across the codebase. I'd be happy to make this update, but first I want to confirm that this change aligns with your expectations. Please let me know if you have any other feedback or concerns.",
  },
  {
    type: 'user',
    text: 'yes it aligns',
  },
  {
    type: 'assistant',
    text: 'Okay, great. I will update the codegen-summary.test.ts file to import the prompt templates from the prompt-service module. Before I proceed, would you like me to confirm anything else or provide an explanation of the planned changes?',
  },
  {
    type: 'user',
    text: 'Confirmed. Proceed with code generation.',
  },
];
