import { FunctionDef } from '../../ai-service/common-types.js';
import { getOperationDefs } from '../../operations/operations-index.js';

/**
 * Function definition for the internal `compoundActionList` function.
 * This is used by the `handleCompoundAction` handler to structure the response
 * from an internal inference call that generates a list of actions.
 */
export const getCompoundActionListDef = (): FunctionDef => ({
  name: 'compoundActionList',
  description:
    'Receives the list of actions generated by an internal inference call within the compoundAction handler. This function structures the output of the inference.',
  parameters: {
    type: 'object',
    properties: {
      actions: {
        type: 'array',
        description:
          'An array of actions (like createFile, updateFile) to be executed as part of a compound operation.',
        items: {
          // Define the schema for CompoundActionItem here based on its definition in step-ask-question-types.ts
          type: 'object',
          properties: {
            actionName: {
              type: 'string',
              description: 'The name of the operation to execute (e.g., createFile, updateFile).',
              enum: getOperationDefs().map((op) => op.name), // Use the operation names from the operations index
            },
            params: {
              type: 'array',
              description: 'The parameters required by the specified actionName.',
              items: {
                type: 'object',
                properties: {
                  paramName: {
                    type: 'string',
                    description: 'The name of the parameter required by the action.',
                  },
                  paramValue: {
                    type: 'string',
                    description: 'The value of the parameter required by the action.',
                  },
                },
                required: ['paramName', 'paramValue'],
              },
            },
          },
          required: ['actionName', 'params'],
        },
      },
      summary: {
        type: 'string',
        description:
          'Summary of the actions to be performed, brief and concise user facing description. The message should be asking the user for confirmation to proceed with the actions.',
      },
    },
    required: ['actions', 'summary'],
  },
});
