import { useEffect } from 'react';
import { useChatState } from '../contexts/chat-state-context';
import { generateSuggestions } from '../services/browser-ai-service';
import { ChatMessage, ChatMessageType } from '../../../../common/content-bus-types';

export const SuggestionGenerator: React.FC = () => {
  const context = useChatState();

  if (!context) {
    // Context might not be available yet, or we are outside the provider
    // This should ideally not happen if used correctly within the provider
    console.warn('SuggestionGenerator used outside of ChatStateProvider');
    return null;
  }

  const { messages, executionStatus, currentQuestion, setSuggestions } = context;

  useEffect(() => {
    // Guard against running when context isn't fully initialized (though useChatState helps)
    if (!setSuggestions) return;

    // Clear suggestions if execution is not running or there is no question requiring suggestions
    if (executionStatus !== 'executing' || !currentQuestion || currentQuestion.confirmation) {
      setSuggestions([]);
      return;
    }

    // Find the current iteration based on the last message's iterationId
    const lastMessageIterationId = messages.length > 0 ? messages[messages.length - 1]?.iterationId : null;
    if (!lastMessageIterationId) {
      setSuggestions([]);
      return;
    }

    // Filter messages belonging to the current iteration
    const currentIterationMessages = messages.filter((msg) => msg.iterationId === lastMessageIterationId);

    // Get all message parts from the current iteration as context
    const iterationMessagesContext = currentIterationMessages.flatMap(
      (message) =>
        // If it's a system message block, include its parts
        message.type === ChatMessageType.SYSTEM && 'parts' in message && Array.isArray(message.parts)
          ? message.parts // Assuming parts exist and are array-like
          : [message], // Treat as single message otherwise
    );

    if (iterationMessagesContext.length > 0) {
      console.log('Attempting to generate suggestions using conversation context in SuggestionGenerator...');
      generateSuggestions(iterationMessagesContext as ChatMessage[]) // Ensure type compatibility
        .then((newSuggestions) => {
          if (newSuggestions.length > 0) {
            console.log('Suggestions generated by SuggestionGenerator:', newSuggestions);
            setSuggestions(newSuggestions);
          } else {
            console.log('No suggestions generated or generation failed in SuggestionGenerator.');
            setSuggestions([]); // Clear suggestions if generation failed
          }
        })
        .catch((error) => {
          console.error('Error generating suggestions in SuggestionGenerator:', error);
          setSuggestions([]); // Clear suggestions on error
        });
    } else {
      // Clear suggestions if there are no messages in the current iteration context
      setSuggestions([]);
    }
    // Depend on the relevant context values
  }, [executionStatus, currentQuestion, messages, setSuggestions]);

  // This component does not render anything itself
  return null;
};
